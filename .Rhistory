library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(ondisc)
library(sceptre2)
library(sceptre)
library(kableExtra)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_assignment/matrix.odm")
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp,
protein_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get perturbations for gene
bio_rep = mm_odm@global_cell_covariates$bio_rep
grna = str_sub(mm_odm@modalities$grna_assignment@cell_covariates$assigned_grna,
1,-3)
grna[grna == 'NTg'] = 'NT'
#get unique targets
targets = unique(grna)
targets = targets[targets != 'NT']
#initialize vector that will hold pvalues testing if there is an association
#between bio_rep and grna assignment
confounder = rep(NA,length(targets))
names(confounder) = targets
#initialize counter
counter = 1
#iterate over grna targets
for(gene in targets){
#get cells which are either NT or gene KO
cells = which(grna == gene | grna == 'NT')
#get grna assignments
A = grna[cells]
#get biological replicate
B = bio_rep[cells]
#get pvalue via fishers test
confounder[counter] = fisher.test(x = table(B,A))$p.value
#counter++
counter = counter + 1
}
#BH correction
confounder = p.adjust(confounder,method = 'BH')
#see which grna assignments differ by replicate
affected_confounders = confounder[which(confounder<0.05)]
results = cbind(names(affected_confounders),affected_confounders)
colnames(results) = c('Perturbation','Pvalue')
rownames(results) = c(1:nrow(results))
results_table = kable(affected_confounders,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(ondisc)
library(sceptre2)
library(sceptre)
library(kableExtra)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_assignment/matrix.odm")
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp,
protein_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get perturbations for gene
bio_rep = mm_odm@global_cell_covariates$bio_rep
grna = str_sub(mm_odm@modalities$grna_assignment@cell_covariates$assigned_grna,
1,-3)
grna[grna == 'NTg'] = 'NT'
#get unique targets
targets = unique(grna)
targets = targets[targets != 'NT']
#initialize vector that will hold pvalues testing if there is an association
#between bio_rep and grna assignment
confounder = rep(NA,length(targets))
names(confounder) = targets
#initialize counter
counter = 1
#iterate over grna targets
for(gene in targets){
#get cells which are either NT or gene KO
cells = which(grna == gene | grna == 'NT')
#get grna assignments
A = grna[cells]
#get biological replicate
B = bio_rep[cells]
#get pvalue via fishers test
confounder[counter] = fisher.test(x = table(B,A))$p.value
#counter++
counter = counter + 1
}
#BH correction
confounder = p.adjust(confounder,method = 'BH')
#see which grna assignments differ by replicate
affected_confounders = confounder[which(confounder<0.05)]
results = cbind(names(affected_confounders),affected_confounders)
colnames(results) = c('Perturbation','Pvalue')
rownames(results) = c(1:nrow(results))
results_table = kable(results,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(ondisc)
library(sceptre2)
library(sceptre)
library(kableExtra)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_assignment/matrix.odm")
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp,
protein_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get perturbations for gene
bio_rep = mm_odm@global_cell_covariates$bio_rep
grna = str_sub(mm_odm@modalities$grna_assignment@cell_covariates$assigned_grna,
1,-3)
grna[grna == 'NTg'] = 'NT'
#get unique targets
targets = unique(grna)
targets = targets[targets != 'NT']
#initialize vector that will hold pvalues testing if there is an association
#between bio_rep and grna assignment
confounder = rep(NA,length(targets))
names(confounder) = targets
#initialize counter
counter = 1
#iterate over grna targets
for(gene in targets){
#get cells which are either NT or gene KO
cells = which(grna == gene | grna == 'NT')
#get grna assignments
A = grna[cells]
#get biological replicate
B = bio_rep[cells]
#get pvalue via fishers test
confounder[counter] = fisher.test(x = table(B,A))$p.value
#counter++
counter = counter + 1
}
#BH correction
confounder = p.adjust(confounder,method = 'BH')
#see which grna assignments differ by replicate
affected_confounders = confounder[which(confounder<0.05)]
results = cbind(names(affected_confounders),affected_confounders)
colnames(results) = c('Perturbation','Pvalue')
rownames(results) = c(1:nrow(results))
results_table = kable(results,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
# Download dataset using SeuratData.
options(timeout = 1000)
InstallData(ds = "thp1.eccite")
# Setup custom theme for plotting.
custom_theme <- theme(
plot.title = element_text(size=16, hjust = 0.5),
legend.key.size = unit(0.7, "cm"),
legend.text = element_text(size = 14))
# Load object.
eccite <- LoadData(ds = "thp1.eccite")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
##########################################
# SET ARGS FOR PROTEIN EXPRESSION ANALYSIS
##########################################
response_matrix <- as.matrix(protein_matrix)
grna_matrix <- grna_matrix
covariate_data_frame <- protein_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- protein_formula
calibration_check <- FALSE
response_grna_group_pairs <- expand.grid(response_id = rownames(response_matrix),
grna_group = unique(grna_groups$grna_group)[1:2]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_protein <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_1,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
View(response_grna_group_pairs)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique(grna_groups$grna_group)) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix),
grna_group = "CUL3") # an example set of pairs
View(response_grna_group_pairs_1)
View(response_grna_group_pairs_2)
View(response_grna_group_pairs_2)
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix),
grna_group = "CUL3") # an example set of
View(response_grna_group_pairs_2)
View(response_grna_group_pairs)
View(response_grna_group_pairs_1)
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_1,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
View(response_grna_group_pairs_2)
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix),
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
View(response_grna_group_pairs_2)
response_grna_group_pairs_1[13565:13570]
response_grna_group_pairs_1[13565:13570,]
response_grna_group_pairs_2[13565:13570,]
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')])[-c(13565:13570),] # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix),
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
install.packages("BH")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix),
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
