# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1762.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
View(chipseq_data)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
View(chipseq_data)
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE, cache = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score","pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point","peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
peak_position = chipseq_data$pos_max_peak)
# get TSS for each gene
gene_names <- sceptre_results |> pull(response_id) |> unique() |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = hgnc_symbol, chr = chromosome_name) |>
select(gene, chr, TSS)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score","pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point","peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE, cache = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score","pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point","peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score
peak_position = chipseq_data$pos_max_peak)
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE, cache = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score","pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point","peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
peak_position = chipseq_data$pos_max_peak)
# get TSS for each gene
gene_names <- sceptre_results |> pull(response_id) |> unique() |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = hgnc_symbol, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
chipseq_scores_binary <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
# get linear score for each gene
window_width_linear <- 5e4
chipseq_scores_linear <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_linear,
end = TSS_info$TSS+window_width_linear),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(linear_score = sum((window_width_linear - abs(TSS - peak_position))/
window_width_linear)) |>
as_tibble() |>
mutate(linear_score = ifelse(is.na(linear_score), 0, linear_score))
# join the two sets of chipseq scores, and add database information
chipseq_scores <- full_join(chipseq_scores_binary,
chipseq_scores_linear,
by = "gene") |>
mutate(in_database = gene %in% database_genes)
chipseq_scores |>
ggplot(aes(x = linear_score)) +
geom_histogram(color = "black") +
labs(x = "ChIP-seq linear score") +
theme(axis.title.y = element_blank())
chipseq_scores |>
group_by(in_database) |>
summarise(round(mean(binary_score), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Mean binary score"),
caption = paste0("Comparing ChIP-seq binary score to database.")) |>
kable_styling(position = "center", latex_options = "hold_position")
chipseq_scores |>
group_by(in_database) |>
summarise(round(median(linear_score), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Median linear score"),
caption = paste0("Comparing ChIP-seq linear score to database.")) |>
kable_styling(position = "center", latex_options = "hold_position")
chipseq_scores |>
ggplot(aes(x = in_database, y = linear_score)) +
geom_violin(fill = "dodgerblue") +
labs(x = "In database", y = "Linear score")
q <- 0.1
# apply BH correction to SCEPTRE IRF1 results
sceptre_results_IRF1 <- sceptre_results |>
filter(grna_group == "IRF1") |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat IRF1 results
seurat_results_IRF1 <- seurat_results[["IRF1"]] |>
rownames_to_column(var = "gene") |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(gene, seurat_discovery)
seurat_results_IRF1 <- seurat_results[["IRF1"]] |>
rownames_to_column(var = "gene") |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(gene, seurat_discovery)
View(sceptre_results_IRF1)
View(seurat_results)
View(seurat_results)
q <- 0.1
# apply BH correction to SCEPTRE IRF1 results
sceptre_results_IRF1 <- sceptre_results |>
filter(grna_group == "IRF1") |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat IRF1 results
seurat_results_IRF1 <- seurat_results |>
filter(grna_group == "IRF1") |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(response_id, seurat_discovery) |>
rename(gene = response_id)
# join with chipseq scores
merged_results <- chipseq_scores |>
left_join(sceptre_results_IRF1, by = "gene") |>
left_join(seurat_results_IRF1, by = "gene") |>
na.omit()
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE, cache = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score","pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point","peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_1767.IRF1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
peak_position = chipseq_data$pos_max_peak)
# get TSS for each gene
gene_names <- sceptre_results |> pull(response_id) |> unique() |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = hgnc_symbol, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
chipseq_scores_binary <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
# get linear score for each gene
window_width_linear <- 5e4
chipseq_scores_linear <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_linear,
end = TSS_info$TSS+window_width_linear),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(linear_score = sum((window_width_linear - abs(TSS - peak_position))/
window_width_linear)) |>
as_tibble() |>
mutate(linear_score = ifelse(is.na(linear_score), 0, linear_score))
# join the two sets of chipseq scores, and add database information
chipseq_scores <- full_join(chipseq_scores_binary,
chipseq_scores_linear,
by = "gene") |>
mutate(in_database = gene %in% database_genes)
chipseq_scores |>
ggplot(aes(x = linear_score)) +
geom_histogram(color = "black") +
labs(x = "ChIP-seq linear score") +
theme(axis.title.y = element_blank())
chipseq_scores |>
group_by(in_database) |>
summarise(round(mean(binary_score), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Mean binary score"),
caption = paste0("Comparing ChIP-seq binary score to database.")) |>
kable_styling(position = "center", latex_options = "hold_position")
chipseq_scores |>
group_by(in_database) |>
summarise(round(median(linear_score), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Median linear score"),
caption = paste0("Comparing ChIP-seq linear score to database.")) |>
kable_styling(position = "center", latex_options = "hold_position")
chipseq_scores |>
ggplot(aes(x = in_database, y = linear_score)) +
geom_violin(fill = "dodgerblue") +
labs(x = "In database", y = "Linear score")
q <- 0.1
# apply BH correction to SCEPTRE IRF1 results
sceptre_results_IRF1 <- sceptre_results |>
filter(grna_group == "IRF1") |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat IRF1 results
seurat_results_IRF1 <- seurat_results |>
filter(grna_group == "IRF1") |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(response_id, seurat_discovery) |>
rename(gene = response_id)
# join with chipseq scores
merged_results <- chipseq_scores |>
left_join(sceptre_results_IRF1, by = "gene") |>
left_join(seurat_results_IRF1, by = "gene") |>
na.omit()
merged_results |>
count(sceptre_discovery, seurat_discovery) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("SCEPTRE discovery", "Seurat Discovery", "Number"),
caption = paste0("Comparing numbers of discoveries made by SCEPTRE
and Seurat.")) |>
kable_styling(position = "center", latex_options = "hold_position")
merged_results |>
group_by(in_database) |>
summarise(round(mean(sceptre_discovery), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In hTFtarget", "Proportion SCEPTRE discoveries"),
caption = paste0("Comparing SCEPTRE discoveries to ChIP-seq binary scores.")) |>
kable_styling(position = "center", latex_options = "hold_position")
merged_results |>
group_by(in_database) |>
summarise(round(mean(seurat_discovery), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In hTFtarget", "Proportion Seurat discoveries"),
caption = paste0("Comparing Seurat discoveries to ChIP-seq binary scores.")) |>
kable_styling(position = "center", latex_options = "hold_position")
merged_results |>
group_by(binary_score) |>
summarise(round(mean(sceptre_discovery), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("Binary ChIP-seq score", "Proportion SCEPTRE discoveries"),
caption = paste0("Comparing SCEPTRE discoveries to ChIP-seq binary scores.")) |>
kable_styling(position = "center", latex_options = "hold_position")
merged_results |>
group_by(binary_score) |>
summarise(round(mean(seurat_discovery), 2)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("Binary ChIP-seq score", "Proportion Seurat discoveries"),
caption = paste0("Comparing Seurat discoveries to ChIP-seq binary scores.")) |>
kable_styling(position = "center", latex_options = "hold_position")
merged_results |>
ggplot(aes(x = sceptre_discovery, y = linear_score)) +
geom_violin(fill = "dodgerblue") +
labs(x = "SCEPTRE discovery",
y = "ChIP-seq linear score")
merged_results |>
ggplot(aes(x = seurat_discovery, y = linear_score)) +
geom_violin(fill = "dodgerblue") +
labs(x = "Seurat discovery",
y = "ChIP-seq linear score")
test1 <- GRanges(
seqnames = "chr1",
ranges = IRanges(start = 10, end = 20))
test2 <- GRanges(
seqnames = "chr2",
ranges = IRanges(start = 10, end = 20),
metadata = "a")
test3 <- GRanges(
seqnames = "chr1",
ranges = IRanges(start = 10, end = 20),
metadata = "a")
join_overlap_left(test1, test2) # different chromosomes
join_overlap_left(test1, test3) # same chromosome
