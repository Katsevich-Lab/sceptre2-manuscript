n_calibration_pairs = 9 * nrow(response_matrix))
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
remove.packages("sceptre3")
install.packages("/Users/kmason/Desktop/sceptre3-main",
repos = NULL,
type = "source")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
install.packages("/Users/kmason/Desktop/sceptre3-main",
repos = NULL,
type = "source")
install.packages("/Users/kmason/Desktop/sceptre3-main",
repos = NULL,
type = "source")
devtools::install_github("https://github.com/Katsevich-Lab/katlabutils")
install.packages("/Users/kmason/Desktop/sceptre3-main",
repos = NULL,
type = "source")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
remove.packages("sceptre3")
install.packages("/Users/kmason/Desktop/sceptre3-main",
repos = NULL,
type = "source")
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
remove.packages("sceptre3")
install.packages("/Users/kmason/Desktop/sceptre3-devel",
repos = NULL,
type = "source")
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
remove.packages("sceptre3")
install.packages("/Users/kmason/sceptre3",
repos = NULL,
type = "source")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
sceptre3:::iterate_over_combinations
sceptre3:::iterate_over_combinations(10,3,20000)
remove.packages("sceptre3")
devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
p <- sceptre3::plot_calibration_results(undercover_result)
sceptre3::plot_calibration_results(undercover_result)
?sceptre3::plot_calibration_results()
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
#get CUL3 mrna data. Remove genes 13565-13575 since they contain something that is causing code to crash
response_grna_group_pairs <- expand.grid(response_id = rownames(response_matrix)[-c(13565:13575)],
grna_group = c("STAT3","NFKBIA","ETV7")) # an example set of pairs
test_stat <- "distilled"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
#get CUL3 mrna data. Remove genes 13565-13575 since they contain something that is causing code to crash
response_grna_group_pairs <- expand.grid(response_id = rownames(response_matrix)[-c(13565:13575)],
grna_group = c("STAT3","NFKBIA","ETV7")) # an example set of pairs
test_stat <- "distilled"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
#save results
CODE_DIR <-.get_config_path("LOCAL_CODE_DIR")
papalexi_analysis_data_dir <- paste0(CODE_DIR, "/sceptre2-manuscript/writeups/papalexi_analysis/")
saveRDS(result_gene,paste0(papalexi_analysis_data_dir,"sceptre_STAT3_NFKBIA_ETV7_mrna_results_with_effect_size.rds"))
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
remove.packages("sceptre3")
devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
gene_formula <- ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + phase + p_mito
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs = 9 * nrow(response_matrix))
p <- sceptre3::plot_calibration_results(undercover_result)
remove.packages("sceptre3")
