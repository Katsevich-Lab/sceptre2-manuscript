papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
response_grna_group_pairs <- data.frame(response_id = rownames(gene_expression_matrix)[13565:13575], grna_group = "CUL3") # data.frame(response_id = "ZNF546", grna_group = "CUL3") # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
response_grna_group_pairs <- data.frame(response_id = rownames(gene_expression_matrix)[13565:13575], grna_group = "CUL3") # data.frame(response_id = "ZNF546", grna_group = "CUL3") # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
response_grna_group_pairs <- data.frame(response_id = rownames(gene_expression_matrix)[13565:13575], grna_group = "CUL3") # data.frame(response_id = "ZNF546", grna_group = "CUL3") # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
response_grna_group_pairs <- data.frame(response_id = rownames(gene_expression_matrix)[13565:13575], grna_group = "CUL3") # data.frame(response_id = "ZNF546", grna_group = "CUL3") # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix)[-which(rownames(response_matrix) == 'ZN546')],
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
rownames(response_matrix)[-which(rownames(response_matrix) == 'ZN546')]
rownames(response_matrix)
which(rownames(response_matrix) == 'ZN546')
sort(rownames(response_matrix))
sort(rownames(response_matrix),decreasing = T)
which(rownames(response_matrix) == "ZNF546")
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix)[-which(rownames(response_matrix) == 'ZNF546')],
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
<<<<<<< HEAD
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
-which(rownames(response_matrix) == 'ZNF546')
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix)[-c(13565:13575)],
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs_2,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs_1 <- expand.grid(response_id = 'CD274',
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
response_grna_group_pairs_2 <- expand.grid(response_id = rownames(response_matrix)[-c(13565:13575)],
grna_group = "CUL3") # an example set of pairs
response_grna_group_pairs = rbind(response_grna_group_pairs_1,response_grna_group_pairs_2)
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
##########################################
# SET ARGS FOR PROTEIN EXPRESSION ANALYSIS
##########################################
response_matrix <- as.matrix(protein_matrix)
grna_matrix <- grna_matrix
covariate_data_frame <- protein_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- protein_formula
calibration_check <- FALSE
response_grna_group_pairs <- expand.grid(response_id = rownames(response_matrix),
grna_group = unique(grna_groups$grna_group)[1:2]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- FALSE
result_protein <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
LOCAL_SCEPTRE2_DATA_DIR
CODE_DIR <-.get_config_path("LOCAL_CODE_DIR")
#save results
CODE_DIR <-.get_config_path("LOCAL_CODE_DIR")
papalexi_analysis_data_dir <- paste0(CODE_DIR, "/sceptre2-manuscript/writeups/papalexi_analysis/")
saveRDS(result_protein,paste0(papalexi_analysis_data_dir,"sceptre_protein_results_with_effect_size"))
saveRDS(result_gene,paste0(papalexi_analysis_data_dir,"sceptre_CUL3_and_PDL1_mrna_results_with_effect_size"))
#save results
CODE_DIR <-.get_config_path("LOCAL_CODE_DIR")
papalexi_analysis_data_dir <- paste0(CODE_DIR, "/sceptre2-manuscript/writeups/papalexi_analysis/")
saveRDS(result_protein,paste0(papalexi_analysis_data_dir,"sceptre_protein_results_with_effect_size.rds"))
saveRDS(result_gene,paste0(papalexi_analysis_data_dir,"sceptre_CUL3_and_PDL1_mrna_results_with_effect_size.rds"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(rlist)
library(jsonlite)
library(varhandle)
library(stringi)
library(kableExtra)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(rlist)
library(jsonlite)
library(varhandle)
library(stringi)
library(kableExtra)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
gene_path = paste0(data.dir,
'sceptre_CUL3_and_PDL1_mrna_results_with_effect_size.rds')
protein_path = paste0(data.dir,'sceptre_protein_results_with_effect_size.rds')
seurat_path = paste0(data.dir,'papalexi_results_seurat.rds')
#Note that sceptre results have columns pvalue, grna, target
#get sceptre perturbation on PDL1 mrna results
gene_result = readRDS(gene_path)
#get sceptre perturbation on protein results
protein_result = readRDS(protein_path)
#get seurat DE results. Columns 1,2,and 6 correspond to pvalue, effect size
#and perturbation
seurat_result = readRDS(seurat_path)
View(protein_result)
View(protein_result)
#See which gene perturbations are associated with PDL1 protein expression
#get pvalues from sceptre
P_adj = protein_result$p_value
#unlist pvalues
P_adj = unlist(P_adj)
#some pvalues are negative so take absolute value
P_adj = abs(P_adj)
#make numeric
P_adj = as.numeric(P_adj)
#perform BH procedure
P_adj = p.adjust(P_adj,method = 'BH')
#replace results matrix pvalues with adjusted pvalues
protein_adjusted= cbind(P_adj,protein_result$log_fold_change,
protein_result$response_id,protein_result$grna_group)
#filter to just look at PDL1 pvalues
protein_PDL1 = protein_adjusted[which(protein_adjusted[,3] == 'PDL1')]
#get significant perturbations
sig_genes = subset(protein_PDL1,P_adj < 0.05)$grna_group
sig_genes = subset(protein_PDL1,P_adj < 0.05)
View(protein_adjusted)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(rlist)
library(jsonlite)
library(varhandle)
library(stringi)
library(kableExtra)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
gene_path = paste0(data.dir,
'sceptre_CUL3_and_PDL1_mrna_results_with_effect_size.rds')
protein_path = paste0(data.dir,'sceptre_protein_results_with_effect_size.rds')
seurat_path = paste0(data.dir,'papalexi_results_seurat.rds')
#Note that sceptre results have columns pvalue, grna, target
#get sceptre perturbation on PDL1 mrna results
gene_result = readRDS(gene_path)
#get sceptre perturbation on protein results
protein_result = readRDS(protein_path)
#get seurat DE results. Columns 1,2,and 6 correspond to pvalue, effect size
#and perturbation
seurat_result = readRDS(seurat_path)
#See which gene perturbations are associated with PDL1 protein expression
#get pvalues from sceptre
P_adj = protein_result$p_value
#unlist pvalues
P_adj = unlist(P_adj)
#some pvalues are negative so take absolute value
P_adj = abs(P_adj)
#make numeric
P_adj = as.numeric(P_adj)
#perform BH procedure
P_adj = p.adjust(P_adj,method = 'BH')
#replace results matrix pvalues with adjusted pvalues
protein_adjusted = data.frame(adj.Pval = P_adj,
log_fold_change = protein_result$log_fold_change,
response_id = protein_result$response_id,
grna_group = protein_result$grna_group)
#filter to just look at PDL1 pvalues
protein_PDL1 = protein_adjusted[which(protein_adjusted$response_id == 'PDL1')]
#get significant perturbations
sig_genes = subset(protein_PDL1,P_adj < 0.05)$grna_group
#unfactor
sig_genes = unfactor(sig_genes)
A = 'Significant perturbations for the expression of PDL1 protein are:\n '
cat(paste0(A,paste(sig_genes,collapse = ',')))
View(protein_adjusted)
View(protein_result)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
