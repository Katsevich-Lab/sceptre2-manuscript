chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
filter_by_chromosome_genes = chipseq_binary_test[,1]
no_filter_by_chromosome_genes = chipseq_scores_binary[,1]
mean(filter_by_chromosome_genes%in%no_filter_by_chromosome_genes)
View(filter_by_chromosome_genes)
View(no_filter_by_chromosome_genes)
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
counter = 0
for(test_chr in chr){
TSS_filter = TSS %>%
filter(seqnames == test_chr)
chipseq_filter = chipseq_data%>%
filter(seqnames == test_chr)
chipseq_binary_temp <-TSS_filter |>
join_overlap_left(chipseq_filter) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
if(counter == 0){
chipseq_binary_test = chipseq_binary_temp
}else{
chipseq_binary_test = rbind(chipseq_binary_test,chipseq_binary_temp )
}
counter = counter + 1
}
chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
filter_by_chromosome_genes = chipseq_binary_test[,1][,1]
no_filter_by_chromosome_genes = chipseq_scores_binary[,1][,1]
mean(filter_by_chromosome_genes%in%no_filter_by_chromosome_genes)
View(filter_by_chromosome_genes)
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
counter = 0
for(test_chr in chr){
TSS_filter = TSS %>%
filter(seqnames == test_chr)
chipseq_filter = chipseq_data%>%
filter(seqnames == test_chr)
chipseq_binary_temp <-TSS_filter |>
join_overlap_left(chipseq_filter) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
if(counter == 0){
chipseq_binary_test = chipseq_binary_temp
}else{
chipseq_binary_test = rbind(chipseq_binary_test,chipseq_binary_temp )
}
counter = counter + 1
}
chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
filter_by_chromosome_genes = as.matrix(chipseq_binary_test[,1])
no_filter_by_chromosome_genes = as.matrix(chipseq_scores_binary[,1])
mean(filter_by_chromosome_genes%in%no_filter_by_chromosome_genes)
View(filter_by_chromosome_genes)
filter_by_chromosome_genes[,1]
sort(filter_by_chromosome_genes[,1])
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
counter = 0
for(test_chr in chr){
TSS_filter = TSS %>%
filter(seqnames == test_chr)
chipseq_filter = chipseq_data%>%
filter(seqnames == test_chr)
chipseq_binary_temp <-TSS_filter |>
join_overlap_left(chipseq_filter) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
if(counter == 0){
chipseq_binary_test = chipseq_binary_temp
}else{
chipseq_binary_test = rbind(chipseq_binary_test,chipseq_binary_temp )
}
counter = counter + 1
}
chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
filter_by_chromosome_genes = sort(as.matrix(chipseq_binary_test)[,1])
no_filter_by_chromosome_genes = sort(as.matrix(chipseq_scores_binary)[,1])
mean(filter_by_chromosome_genes%in%no_filter_by_chromosome_genes)
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
counter = 0
for(test_chr in chr){
TSS_filter = TSS %>%
filter(seqnames == test_chr)
chipseq_filter = chipseq_data%>%
filter(seqnames == test_chr)
chipseq_binary_temp <-TSS_filter |>
join_overlap_left(chipseq_filter) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
if(counter == 0){
chipseq_binary_test = chipseq_binary_temp
}else{
chipseq_binary_test = rbind(chipseq_binary_test,chipseq_binary_temp )
}
counter = counter + 1
}
chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
filter_by_chromosome_genes = sort(as.matrix(chipseq_binary_test)[,1])
no_filter_by_chromosome_genes = sort(as.matrix(chipseq_scores_binary)[,1])
mean(filter_by_chromosome_genes==no_filter_by_chromosome_genes)
a = 0
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr2"
TSS_test = TSS %>%
filter(seqnames == test_chr)
View(TSS_test)
View(TSS)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
#get genes associated with chr 2
genes = TSS_test@elementMetadata@listData$gene
#get all genes
all_genes = TSS_test@elementMetadata@listData$gene
#get indices and cross refernce to chromosmes
TSS@seqnames@values[which(all_genes%in%genes)]
length(TSS@seqnames@values)
length(all_genes)
View(TSS)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
#get genes associated with chr 2
genes = TSS_test@elementMetadata@listData$gene
#get all genes
all_genes = TSS@elementMetadata@listData$gene
#get indices and cross refernce to chromosmes
TSS@seqnames@values[which(all_genes%in%genes)]
length(all_genes)
length(TSS@seqnames@values)
View(TSS)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
#get genes associated with chr 2
gene_TSS = TSS_test@elementMetadata@listData$TSS
#get all genes
all_genes = TSS@elementMetadata@listData$gene
all_genes_TSS = TSS@elementMetadata@listData$TSS
#get indices and cross refernce to chromosmes
all_genes[which(all_genes_TSS%in%genes_TSS)]
View(chipseq_data)
View(TSS)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
TSS_test <-TSS_test |>
join_overlap_left(TSS)
View(TSS_test)
TSS_test@seqnames@values
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
#TSS_test <-TSS_test |>
#join_overlap_left(TSS)
View(TSS_test)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
query=GRanges(seqnames=test_chr)
seqnames(TSS)
View(TSS_test)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
print(TSS_test@seqnames@values)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
library(Hmisc)
library(varhandle)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
# read in K562 ChIP-seq data
stat1_filename <- "GSM1057011_STAT1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", stat1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point",
"peak_to_mid_dist")
# read in genes from database
database_genes <- read_table(paste0(
data_dir,
"data/htftarget/dataset_3390.STAT1.target.txt"
)) |>
suppressWarnings() |>
pull(target_name)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
peak_position = chipseq_data$pos_max_peak)
# get TSS for each gene
gene_names <- sceptre_results |> pull(response_id) |> unique() |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
TSS <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS)
chipseq_scores_binary <-TSS |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
chipseq_scores_binary = subset(chipseq_scores_binary,binary_score == T)
#get list of chromosomes
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
#try chromsome 1
test_chr = "chr1"
TSS_test = TSS %>%
filter(seqnames == test_chr)
print(TSS_test@seqnames@values)
chr = sort(unique(varhandle::unfactor(TSS@seqnames@values)))
counter = 0
for(test_chr in chr){
#get filtered TSS granges object
TSS_filter = TSS %>%
filter(seqnames == test_chr)
#get filtered chipseq granges object
chipseq_filter = chipseq_data%>%
filter(seqnames == test_chr)
#compute binary score
chipseq_binary_temp <-TSS_filter |>
join_overlap_left(chipseq_filter) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
#add to matrix
if(counter == 0){
chipseq_binary_test = chipseq_binary_temp
}else{
chipseq_binary_test = rbind(chipseq_binary_test,chipseq_binary_temp )
}
counter = counter + 1
}
#filter to only have genes whose score is 1
chipseq_binary_test = subset(chipseq_binary_test,binary_score == T)
#get gene lists
filter_by_chromosome_genes = sort(as.matrix(chipseq_binary_test)[,1])
no_filter_by_chromosome_genes = sort(as.matrix(chipseq_scores_binary)[,1])
#see overlap. If overlap = 1, then we know that they return the same result
mean(filter_by_chromosome_genes==no_filter_by_chromosome_genes)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in sceptre and seurat results
sceptre_path <- paste0(
data_dir, "results/papalexi_analysis/",
"sceptre_full_mrna_results_with_effect_size.rds"
)
seurat_path <- paste0(
data_dir, "results/papalexi_analysis/",
"seurat_all_perturbations_results.rds"
)
sceptre_results <- readRDS(sceptre_path)
seurat_results <- readRDS(seurat_path)
View(sceptre_results)
View(seurat_results)
PRTB = unique(sceptre_results$grna_group)[1]
A = sceptre_results%>%filter(grna_group == PRTB)
View(A)
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)
View(sceptre_results)
View(seurat_results)
View(sceptre_results)
View(seurat_results)
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>mutate(p_adj = p.adjust(p_value,method = "BH"))
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>mutate(p_adj = p.adjust(p_value,method = "BH"))
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
library(dplyr)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>mutate(p_adj = p.adjust(p_value,method = "BH"))
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>mutate(p_adj = p.adjust(p_value,method = "BH"))
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)>%>mutate(p = p.adjust(p_value,method = "BH"))
View(sceptre_filter)
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)|>mutate(p_adj = p.adjust(p_value,method = "BH"))
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))
View(sceptre_filter)
View(seurat_filter)
View(seurat_filter)
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))
View(sceptre_filter)
alpha = 0.1
PRTB = unique(sceptre_results$grna_group)[1]
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
View(sceptre_filter)
View(seurat_filter)
View(sceptre_filter)
PRTB
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)[1]
for(PRTB in perturbations){
print(PRTB)
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
print(length(sceptre_filter))
}
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)
for(PRTB in perturbations){
print(PRTB)
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
print(length(sceptre_filter))
}
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)[1]
for(PRTB in perturbations){
print(PRTB)
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
print(length(sceptre_filter))
}
View(sceptre_filter)
length(sceptre_filter)
nrow(sceptre_filter)
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)[1]
for(PRTB in perturbations){
print(PRTB)
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
print(nrow(sceptre_filter))
}
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)
for(PRTB in perturbations){
print(PRTB)
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
print(nrow(sceptre_filter))
}
alpha = 0.1
perturbations = unique(sceptre_results$grna_group)
for(PRTB in perturbations){
sceptre_filter = sceptre_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_value,method = "BH"))%>%
filter(p_adj < alpha)%>%select(response_id)
seurat_filter = seurat_results%>%filter(grna_group == PRTB)%>%
mutate(p_adj = p.adjust(p_val,method = "BH"))%>%
filter(p_adj < alpha)%>% select(response_id)
if(nrow(sceptre_filter) > 50){
print(PRTB)
}
}
library(tibble)
library(tidyr)
library(tidyverse)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
metadata_table <-
tribble(
~TF,
"STAT1",
"IRF1",
"STAT2",
"SMAD4",
"BRD4",
"MYC"
)
# directory for hTFtarget data
htftarget_dir <- paste0(sceptre2_dir, "/data/htftarget")
dir.create(htftarget_dir)
for(j in c(1:nrow(metadata_table))){
TF <- metadata_table$TF[j]
############### Download hTFtarget data ###########################
htftarget_url <- "http://bioinfo.life.hust.edu.cn/hTFtarget/static/hTFtarget/tmp_files/targets/"
filename <- paste0(toupper(TF), ".target.txt.gz")
destfile <- paste0(htftarget_dir, "/", filename)
url <- paste0(htftarget_url, filename)
download.file(url = url, destfile = destfile)
R.utils::gunzip(destfile,overwrite = T)
}
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
