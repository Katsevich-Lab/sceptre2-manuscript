assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
# Calculate percentage of KO cells for all target gene classes.
df <- prop.table(table(eccite$mixscape_class.global, eccite$NT),2)
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KO"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("NT", "NP", "KO"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2),
function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]
p1 <- ggplot(df3, aes(x = guide_number, y = value*100, fill= Var1)) +
geom_bar(stat= "identity") +
theme_classic()+
scale_fill_manual(values = c("grey49", "grey79","coral1")) +
ylab("% of cells") +
xlab("sgRNA")
p1 + theme(axis.text.x = element_text(size = 18, hjust = 1),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 16),
strip.text = element_text(size=16, face = "bold")) +
facet_wrap(vars(gene),ncol = 5, scales = "free") +
labs(fill = "mixscape class") +theme(legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
CUL3_marker = FindMarkers(eccite,ident.1 = 'NT',ident.2 = 'CUL3 KO',assay = 'RNA',only.pos = T)
View(CUL3_marker)
top = 300
CUL3_top = rownames(CUL3_marker)[order(CUL3_marker$avg_log2FC,decreasing = T)[1:top]]
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
dbs <- listEnrichrDbs()
View(dbs)
top = 300
CUL3_top = rownames(CUL3_marker)[order(CUL3_marker$avg_log2FC,decreasing = T)[1:top]]
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
View(pathways)
View(pathways$WikiPathway_2021_Human)
order(c(3,2,1))
unique(Idents(eccite))
table(Idents(eccite))
CUL3_marker = FindMarkers(eccite,ident.1 = 'CUL3 KO',ident.2 = 'NT',assay = 'RNA',only.pos = T)
top = 300
CUL3_top = rownames(CUL3_marker)[order(CUL3_marker$avg_log2FC,decreasing = T)[1:top]]
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
View(pathways$WikiPathway_2021_Human)
View(pathways$WikiPathway_2021_Human)
View(pathways$WikiPathway_2021_Human[,c(1,4)])
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
kable_styling(pathway_table,position = "center", latex_options = "scale_down")
View(pathways$WikiPathway_2021_Human)
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
pathways = subset(pathways$WikiPathway_2021_Human,select = c(Term,Adjusted.P.value))
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
kable_styling(pathway_table,position = "center", latex_options = "scale_down")
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
pathways = cbind(pathways$WikiPathway_2021_Human$Term,
pathways$WikiPathway_2021_Human$Adjusted.P.value)
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
kable_styling(pathway_table,position = "center", latex_options = "scale_down")
#get top 300 genes by log fold change
top = 300
CUL3_top = rownames(CUL3_marker)[order(CUL3_marker$avg_log2FC,decreasing = T)[1:top]]
#run pathway enrichment analysis
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
#get term and pvalue (using subset truncates pvalues for some reason)
pathways = cbind(pathways$WikiPathway_2021_Human$Term,
pathways$WikiPathway_2021_Human$Adjusted.P.value)[1:50,]
#make table
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
kable_styling(pathway_table,position = "center", latex_options = "scale_down")
CUL3_marker = FindMarkers(eccite,ident.1 = 'CUL3 KO',ident.2 = 'NT',assay = 'PRTB',only.pos = T)
#get top 300 genes by log fold change
top = 300
CUL3_top = rownames(CUL3_marker)[order(CUL3_marker$avg_log2FC,decreasing = T)[1:top]]
#run pathway enrichment analysis
pathways = enrichr(CUL3_top,databases = 'WikiPathway_2021_Human')
#get term and pvalue (using subset truncates pvalues for some reason)
pathways = cbind(pathways$WikiPathway_2021_Human$Term,
pathways$WikiPathway_2021_Human$Adjusted.P.value)[1:50,]
#make table
pathway_table = kable(pathways,booktabs = TRUE, linesep = "")
kable_styling(pathway_table,position = "center", latex_options = "scale_down")
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
# load papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(rlist)
library(jsonlite)
library(varhandle)
library(stringi)
library(kableExtra)
#using absolute paths to download results since files exist on github
data.dir = '/Users/kmason/sceptre2-manuscript/writeups/papalexi_analysis/'
gene_path = paste0(data.dir,'gene_result_PDL1_mrna.rds')
protein_path = paste0(data.dir,'protein_result.rds')
seurat_path = paste0(data.dir,'papalexi_results_seurat.rds')
gene_result = readRDS(gene_path)
protein_result = readRDS(protein_path)
seurat_result = readRDS(seurat_path)
#See which gene perturbations are associated with PDL1 protein expression
#get pvalues from sceptre
P_adj = protein_result[,1]
#unlist pvalues
P_adj = unlist(P_adj)
#some pvalues are negative so take absolute value
P_adj = abs(P_adj)
#make numeric
P_adj = as.numeric(P_adj)
#perform BH procedure
P_adj = p.adjust(P_adj,method = 'BH')
#replace results matrix pvalues with adjusted pvalues
protein_adjusted= cbind(P_adj,protein_result[,c(2,3)])
#filter to just look at PDL1 pvalues
protein_PDL1 = protein_adjusted[which(protein_adjusted[,3] == 'PDL1')]
#get significant perturbations
sig_genes = subset(protein_PDL1,P_adj < 0.05)$grna_group
#unfactor
sig_genes = unfactor(sig_genes)
A = 'Significant perturbations for the expression of PDL1 protein are:\n '
cat(paste0(A,paste(sig_genes,collapse = ',')))
#get sceptre results on PDL1 protein
protein_PDL1_raw = protein_result[which(protein_result[,3] == 'PDL1'),c(1,2)]
#get seurat results on PDL1 protein
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
protein_PDL1_raw = subset(protein_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
protein_PDL1_raw = protein_PDL1_raw[match(seurat_PDL1_raw$PRTB,
protein_PDL1_raw$grna_group)]
protein_PDL1_raw$grna_group = unfactor(protein_PDL1_raw$grna_group)
#bind them
combined_results_PDL1 = data.frame(protein_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
protein_PDL1_raw$grna_group)
colnames(combined_results_PDL1) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1 = combined_results_PDL1 [,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1 = combined_results_PDL1[
order(combined_results_PDL1$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1)
#get sceptre results on CD86 protein
protein_CD86_raw = protein_result[which(protein_result[,3] == 'CD86'),c(1,2)]
#get seurat results on CD86 protein
seurat_CD86_raw = seurat_result[which(seurat_result$Target == 'CD86'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_CD86_raw$grna_group){
if (target %in% seurat_CD86_raw$PRTB == F){
seurat_CD86_raw = rbind(seurat_CD86_raw,c(NA,NA,target))
}
}
protein_CD86_raw = subset(protein_CD86_raw,grna_group %in% seurat_CD86_raw$PRTB)
#reorder rows of sceptre analysis
protein_CD86_raw = protein_CD86_raw[match(seurat_CD86_raw$PRTB,
protein_CD86_raw$grna_group)]
protein_CD86_raw$grna_group = unfactor(protein_CD86_raw$grna_group)
#bind them
combined_results_CD86 = data.frame(protein_CD86_raw$p_value,
seurat_CD86_raw$p_val,
seurat_CD86_raw$avg_log2FC,
protein_CD86_raw$grna_group)
colnames(combined_results_CD86) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_CD86 = combined_results_CD86[,c(4,1,2,3)]
#order by pvalue
combined_results_CD86 = combined_results_CD86[
order(combined_results_CD86$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_CD86,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_CD86)
#get sceptre results on PDL2 protein
protein_PDL2_raw = protein_result[which(protein_result[,3] == 'PDL2'),c(1,2)]
#get seurat results on PDL2 protein
seurat_PDL2_raw = seurat_result[which(seurat_result$Target == 'PDL2'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_PDL2_raw$grna_group){
if (target %in% seurat_PDL2_raw$PRTB == F){
seurat_PDL2_raw = rbind(seurat_PDL2_raw,c(NA,NA,target))
}
}
protein_PDL2_raw = subset(protein_PDL2_raw,grna_group %in% seurat_PDL2_raw$PRTB)
#reorder rows of sceptre analysis
protein_PDL2_raw = protein_PDL2_raw[match(seurat_PDL2_raw$PRTB,
protein_PDL2_raw$grna_group)]
protein_PDL2_raw$grna_group = unfactor(protein_PDL2_raw$grna_group)
#bind them
combined_results_PDL2 = data.frame(protein_PDL2_raw$p_value,
seurat_PDL2_raw$p_val,
seurat_PDL2_raw$avg_log2FC,
protein_PDL2_raw$grna_group)
colnames(combined_results_PDL2) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL2 = combined_results_PDL2[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL2 = combined_results_PDL2[
order(combined_results_PDL2$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL2,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL2)
#get sceptre results on PDL1 gene
gene_PDL1_raw = gene_result[which(gene_result$response_id == 'CD274'),c(1,2)]
#get seurat results on PDL1 gene
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1_raw'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in gene_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
gene_PDL1_raw = subset(gene_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
gene_PDL1_raw = gene_PDL1_raw[match(seurat_PDL1_raw$PRTB,
gene_PDL1_raw$grna_group)]
gene_PDL1_raw$grna_group = unfactor(gene_PDL1_raw$grna_group)
#bind them
combined_results_PDL1_raw = data.frame(gene_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
gene_PDL1_raw$grna_group)
colnames(combined_results_PDL1_raw) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1_raw = combined_results_PDL1_raw[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1_raw = combined_results_PDL1_raw[
order(combined_results_PDL1_raw$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1_raw,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1_raw)
#get sceptre results on PDL1 gene
gene_PDL1_raw = gene_result[which(gene_result$response_id == 'CD274'),c(1,2)]
#get seurat results on PDL1 gene
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1_norm'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in gene_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
gene_PDL1_raw = subset(gene_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
gene_PDL1_raw = gene_PDL1_raw[match(seurat_PDL1_raw$PRTB,
gene_PDL1_raw$grna_group)]
gene_PDL1_raw$grna_group = unfactor(gene_PDL1_raw$grna_group)
#bind them
combined_results_PDL1_norm = data.frame(gene_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
gene_PDL1_raw$grna_group)
colnames(combined_results_PDL1_norm) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1_norm = combined_results_PDL1_norm[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1_norm = combined_results_PDL1_norm[
order(combined_results_PDL1_norm$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1_norm,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1_norm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(httr)
library(rlist)
library(jsonlite)
library(varhandle)
library(stringi)
library(kableExtra)
#using absolute paths to download results since files exist on github
data.dir = '/Users/kmason/sceptre2-manuscript/writeups/papalexi_analysis/'
gene_path = paste0(data.dir,'gene_result_PDL1_mrna.rds')
protein_path = paste0(data.dir,'protein_result.rds')
seurat_path = paste0(data.dir,'papalexi_results_seurat.rds')
gene_result = readRDS(gene_path)
protein_result = readRDS(protein_path)
seurat_result = readRDS(seurat_path)
#See which gene perturbations are associated with PDL1 protein expression
#get pvalues from sceptre
P_adj = protein_result[,1]
#unlist pvalues
P_adj = unlist(P_adj)
#some pvalues are negative so take absolute value
P_adj = abs(P_adj)
#make numeric
P_adj = as.numeric(P_adj)
#perform BH procedure
P_adj = p.adjust(P_adj,method = 'BH')
#replace results matrix pvalues with adjusted pvalues
protein_adjusted= cbind(P_adj,protein_result[,c(2,3)])
#filter to just look at PDL1 pvalues
protein_PDL1 = protein_adjusted[which(protein_adjusted[,3] == 'PDL1')]
#get significant perturbations
sig_genes = subset(protein_PDL1,P_adj < 0.05)$grna_group
#unfactor
sig_genes = unfactor(sig_genes)
A = 'Significant perturbations for the expression of PDL1 protein are:\n '
cat(paste0(A,paste(sig_genes,collapse = ',')))
#get sceptre results on PDL1 protein
protein_PDL1_raw = protein_result[which(protein_result[,3] == 'PDL1'),c(1,2)]
#get seurat results on PDL1 protein
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
protein_PDL1_raw = subset(protein_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
protein_PDL1_raw = protein_PDL1_raw[match(seurat_PDL1_raw$PRTB,
protein_PDL1_raw$grna_group)]
protein_PDL1_raw$grna_group = unfactor(protein_PDL1_raw$grna_group)
#bind them
combined_results_PDL1 = data.frame(protein_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
protein_PDL1_raw$grna_group)
colnames(combined_results_PDL1) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1 = combined_results_PDL1 [,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1 = combined_results_PDL1[
order(combined_results_PDL1$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1)
#get sceptre results on CD86 protein
protein_CD86_raw = protein_result[which(protein_result[,3] == 'CD86'),c(1,2)]
#get seurat results on CD86 protein
seurat_CD86_raw = seurat_result[which(seurat_result$Target == 'CD86'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_CD86_raw$grna_group){
if (target %in% seurat_CD86_raw$PRTB == F){
seurat_CD86_raw = rbind(seurat_CD86_raw,c(NA,NA,target))
}
}
protein_CD86_raw = subset(protein_CD86_raw,grna_group %in% seurat_CD86_raw$PRTB)
#reorder rows of sceptre analysis
protein_CD86_raw = protein_CD86_raw[match(seurat_CD86_raw$PRTB,
protein_CD86_raw$grna_group)]
protein_CD86_raw$grna_group = unfactor(protein_CD86_raw$grna_group)
#bind them
combined_results_CD86 = data.frame(protein_CD86_raw$p_value,
seurat_CD86_raw$p_val,
seurat_CD86_raw$avg_log2FC,
protein_CD86_raw$grna_group)
colnames(combined_results_CD86) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_CD86 = combined_results_CD86[,c(4,1,2,3)]
#order by pvalue
combined_results_CD86 = combined_results_CD86[
order(combined_results_CD86$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_CD86,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_CD86)
#get sceptre results on PDL2 protein
protein_PDL2_raw = protein_result[which(protein_result[,3] == 'PDL2'),c(1,2)]
#get seurat results on PDL2 protein
seurat_PDL2_raw = seurat_result[which(seurat_result$Target == 'PDL2'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in protein_PDL2_raw$grna_group){
if (target %in% seurat_PDL2_raw$PRTB == F){
seurat_PDL2_raw = rbind(seurat_PDL2_raw,c(NA,NA,target))
}
}
protein_PDL2_raw = subset(protein_PDL2_raw,grna_group %in% seurat_PDL2_raw$PRTB)
#reorder rows of sceptre analysis
protein_PDL2_raw = protein_PDL2_raw[match(seurat_PDL2_raw$PRTB,
protein_PDL2_raw$grna_group)]
protein_PDL2_raw$grna_group = unfactor(protein_PDL2_raw$grna_group)
#bind them
combined_results_PDL2 = data.frame(protein_PDL2_raw$p_value,
seurat_PDL2_raw$p_val,
seurat_PDL2_raw$avg_log2FC,
protein_PDL2_raw$grna_group)
colnames(combined_results_PDL2) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL2 = combined_results_PDL2[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL2 = combined_results_PDL2[
order(combined_results_PDL2$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL2,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL2)
#get sceptre results on PDL1 gene
gene_PDL1_raw = gene_result[which(gene_result$response_id == 'CD274'),c(1,2)]
#get seurat results on PDL1 gene
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1_raw'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in gene_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
gene_PDL1_raw = subset(gene_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
gene_PDL1_raw = gene_PDL1_raw[match(seurat_PDL1_raw$PRTB,
gene_PDL1_raw$grna_group)]
gene_PDL1_raw$grna_group = unfactor(gene_PDL1_raw$grna_group)
#bind them
combined_results_PDL1_raw = data.frame(gene_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
gene_PDL1_raw$grna_group)
colnames(combined_results_PDL1_raw) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1_raw = combined_results_PDL1_raw[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1_raw = combined_results_PDL1_raw[
order(combined_results_PDL1_raw$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1_raw,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1_raw)
#get sceptre results on PDL1 gene
gene_PDL1_raw = gene_result[which(gene_result$response_id == 'CD274'),c(1,2)]
#get seurat results on PDL1 gene
seurat_PDL1_raw = seurat_result[which(seurat_result$Target == 'PDL1_norm'),c(1,2,6)]
#remove perturbations that aren't in both analyses
for(target in gene_PDL1_raw$grna_group){
if (target %in% seurat_PDL1_raw$PRTB == F){
seurat_PDL1_raw = rbind(seurat_PDL1_raw,c(NA,NA,target))
}
}
gene_PDL1_raw = subset(gene_PDL1_raw,grna_group %in% seurat_PDL1_raw$PRTB)
#reorder rows of sceptre analysis
gene_PDL1_raw = gene_PDL1_raw[match(seurat_PDL1_raw$PRTB,
gene_PDL1_raw$grna_group)]
gene_PDL1_raw$grna_group = unfactor(gene_PDL1_raw$grna_group)
#bind them
combined_results_PDL1_norm = data.frame(gene_PDL1_raw$p_value,
seurat_PDL1_raw$p_val,
seurat_PDL1_raw$avg_log2FC,
gene_PDL1_raw$grna_group)
colnames(combined_results_PDL1_norm) = c("SCEPTRE Pvalues","Seurat Pvalues",
'Seurat Log Change',
"Perturbation")
#reorder columns
combined_results_PDL1_norm = combined_results_PDL1_norm[,c(4,1,2,3)]
#order by pvalue
combined_results_PDL1_norm = combined_results_PDL1_norm[
order(combined_results_PDL1_norm$`SCEPTRE Pvalues`),]
results_table = kable(combined_results_PDL1_norm,booktabs = TRUE, linesep = "")
kable_styling(results_table,position = "center", latex_options = "scale_down")
#View(combined_results_PDL1_norm)
library(ondisc)
library(sceptre2)
library(sceptre)
#devtools::install_github('timothy-barry/ondisc')
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
