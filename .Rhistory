935488,   "Stat1", "K562", "Ifng6h", "hg19",3385,
935549,   "Irf1", "K562","Ifng6h","hg19",1762
)
# directory for ChIP-seq data
chipseq_dir <- paste0(sceptre2_dir, "/data/chipseq")
dir.create(chipseq_dir)
# directory for hTFtarget data
htftarget_dir <- paste0(sceptre2_dir, "/data/htftarget")
dir.create(htftarget_dir)
for(j in c(1:nrow(metadata_table))){
geo_id <- metadata_table$geo_id[j]
condition <- metadata_table$condition[j]
cell_type <- metadata_table$cell_type[j]
genome = metadata_table$genome[j]
TF <- metadata_table$TF[j]
condition <- metadata_table$condition[j]
hTFtarget_id <- metadata_table$hTFtarget_id[j]
geo_url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc="
############### Download ENCODE ChIP-seq data ###########################
filename <- paste0("GSM", geo_id,
"_", genome, "_wgEncodeSydhTfbs",
cell_type, TF, condition,
"StdPk.narrowPeak.gz")
url <- paste0(geo_url, "GSM", geo_id, "&format=file&file=", filename)
destfile <- paste0(chipseq_dir, "/", filename)
download.file(url = url, destfile = destfile)
R.utils::gunzip(destfile)
############### Download hTFtarget data ###########################
htftarget_url <- "http://bioinfo.life.hust.edu.cn/hTFtarget/static/hTFtarget/tmp_files/targets/"
filename <- paste0("dataset_", hTFtarget_id, ".", toupper(TF), ".target.txt.gz")
destfile <- paste0(htftarget_dir, "/", filename)
url <- paste0(htftarget_url, filename)
download.file(url = url, destfile = destfile)
R.utils::gunzip(destfile)
}
library(tibble)
library(tidyr)
library(tidyverse)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
metadata_table <-
tribble(
~geo_id, ~TF, ~cell_type, ~condition, ~genome,~hTFtarget_id,
935488,   "Stat1", "K562", "Ifng6h", "hg19",3385,
935549,   "Irf1", "K562","Ifng6h","hg19",1762
)
# directory for ChIP-seq data
chipseq_dir <- paste0(sceptre2_dir, "/data/chipseq")
dir.create(chipseq_dir)
# directory for hTFtarget data
htftarget_dir <- paste0(sceptre2_dir, "/data/htftarget")
dir.create(htftarget_dir)
for(j in c(1:nrow(metadata_table))){
geo_id <- metadata_table$geo_id[j]
condition <- metadata_table$condition[j]
cell_type <- metadata_table$cell_type[j]
genome = metadata_table$genome[j]
TF <- metadata_table$TF[j]
condition <- metadata_table$condition[j]
hTFtarget_id <- metadata_table$hTFtarget_id[j]
geo_url <- "https://www.ncbi.nlm.nih.gov/geo/download/?acc="
############### Download ENCODE ChIP-seq data ###########################
filename <- paste0("GSM", geo_id,
"_", genome, "_wgEncodeSydhTfbs",
cell_type, TF, condition,
"StdPk.narrowPeak.gz")
url <- paste0(geo_url, "GSM", geo_id, "&format=file&file=", filename)
destfile <- paste0(chipseq_dir, "/", filename)
download.file(url = url, destfile = destfile)
R.utils::gunzip(destfile)
############### Download hTFtarget data ###########################
htftarget_url <- "http://bioinfo.life.hust.edu.cn/hTFtarget/static/hTFtarget/tmp_files/targets/"
filename <- paste0("dataset_", hTFtarget_id, ".", toupper(TF), ".target.txt.gz")
destfile <- paste0(htftarget_dir, "/", filename)
url <- paste0(htftarget_url, filename)
download.file(url = url, destfile = destfile)
R.utils::gunzip(destfile)
}
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
colnames(gene_odm)
rownames(gene_odm)
View(gene_odm)
get_feature_ids(gene_odm)
remove.packages("sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
devtools::install_github('timothy-barry/sceptre3')
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs <- expand.grid(response_id = get_feature_ids(gene_odm),
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
#devtools::install_github('timothy-barry/sceptre3')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs <- expand.grid(response_id = get_feature_ids(gene_odm),
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
response_grna_group_pairs$response_id
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
eccite_copy = eccite
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
#library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
#library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
# Download dataset using SeuratData.
options(timeout = 1000)
InstallData(ds = "thp1.eccite")
# Setup custom theme for plotting.
custom_theme <- theme(
plot.title = element_text(size=16, hjust = 0.5),
legend.key.size = unit(0.7, "cm"),
legend.text = element_text(size = 14))
# Load object.
eccite <- LoadData(ds = "thp1.eccite")
# Normalize protein.
eccite <- NormalizeData(
object = eccite,
assay = "ADT",
normalization.method = "CLR",
margin = 2)
# Prepare RNA assay for dimensionality reduction:
# Normalize data, find variable features and scale data.
DefaultAssay(object = eccite) <- 'RNA'
eccite <- NormalizeData(object = eccite) %>% FindVariableFeatures() %>% ScaleData()
# Run Principle Component Analysis (PCA) to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite)
# Run Uniform Manifold Approximation and Projection (UMAP) to visualize clustering in 2-D.
eccite <- RunUMAP(object = eccite, dims = 1:40)
# Generate plots to check if clustering is driven by biological replicate ID,
# cell cycle phase or target gene class.
p1 <- DimPlot(
object = eccite,
group.by = 'replicate',
label = F,
pt.size = 0.2,
reduction = "umap", cols = "Dark2", repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
xlab("UMAP 1") +
ylab("UMAP 2") +
custom_theme
p2 <- DimPlot(
object = eccite,
group.by = 'Phase',
label = F, pt.size = 0.2,
reduction = "umap", repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
p3 <- DimPlot(
object = eccite,
group.by = 'crispr',
pt.size = 0.2,
reduction = "umap",
split.by = "crispr",
ncol = 1,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
((p1 / p2 + plot_layout(guides = 'auto')) | p3 )
# Calculate perturbation signature (PRTB).
eccite<- CalcPerturbSig(
object = eccite,
assay = "RNA",
slot = "data",
gd.class ="gene",
nt.cell.class = "NT",
reduction = "pca",
ndims = 40,
num.neighbors = 20,
split.by = "replicate",
new.assay.name = "PRTB")
# Prepare PRTB assay for dimensionality reduction:
# Normalize data, find variable features and center data.
DefaultAssay(object = eccite) <- 'PRTB'
# Use variable features from RNA assay.
VariableFeatures(object = eccite) <- VariableFeatures(object = eccite[["RNA"]])
eccite <- ScaleData(object = eccite, do.scale = F, do.center = T)
# Run PCA to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite, reduction.key = 'prtbpca', reduction.name = 'prtbpca')
# Run UMAP to visualize clustering in 2-D.
eccite <- RunUMAP(
object = eccite,
dims = 1:40,
reduction = 'prtbpca',
reduction.key = 'prtbumap',
reduction.name = 'prtbumap')
# Generate plots to check if clustering is driven by biological replicate ID,
# cell cycle phase or target gene class.
q1 <- DimPlot(
object = eccite,
group.by = 'replicate',
reduction = 'prtbumap',
pt.size = 0.2, cols = "Dark2", label = F, repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q2 <- DimPlot(
object = eccite,
group.by = 'Phase',
reduction = 'prtbumap',
pt.size = 0.2, label = F, repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q3 <- DimPlot(
object = eccite,
group.by = 'crispr',
reduction = 'prtbumap',
split.by = "crispr",
ncol = 1,
pt.size = 0.2,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
(q1 / q2 + plot_layout(guides = 'auto') | q3)
# Run mixscape.
eccite <- RunMixscape(
object = eccite,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
# Calculate percentage of KO cells for all target gene classes.
df <- prop.table(table(eccite$mixscape_class.global, eccite$NT),2)
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KO"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("NT", "NP", "KO"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2),
function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]
p1 <- ggplot(df3, aes(x = guide_number, y = value*100, fill= Var1)) +
geom_bar(stat= "identity") +
theme_classic()+
scale_fill_manual(values = c("grey49", "grey79","coral1")) +
ylab("% of cells") +
xlab("sgRNA")
p1 + theme(axis.text.x = element_text(size = 18, hjust = 1),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 16),
strip.text = element_text(size=16, face = "bold")) +
facet_wrap(vars(gene),ncol = 5, scales = "free") +
labs(fill = "mixscape class") +theme(legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[unique(grna) != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0.9,min.pct = 0)
marker_all$grna = rep(val,nrow(marker_all))
marker_all$response_id = rownames(marker_all)
diff_genes[[counter]] = marker_all
counter = counter + 1
}
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[unique(grna) != 'NT']
#diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0.9,min.pct = 0)
marker_all$grna = rep(val,nrow(marker_all))
marker_all$response_id = rownames(marker_all)
if(counter ==1){
diff_genes = marker_all
}else{
diff_genes = rbind(diff_genes,marker_all)
}
counter = counter + 1
}
View(diff_genes)
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[unique(grna) != 'NT']
#diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[unique(grna) != 'NT']
#diff_genes <- vector(mode='list', length=length(prtb))
#names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0,min.pct = 0)
marker_all$grna = rep(val,nrow(marker_all))
marker_all$response_id = rownames(marker_all)
if(counter ==1){
diff_genes = marker_all
}else{
diff_genes = rbind(diff_genes,marker_all)
}
counter = counter + 1
}
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
#devtools::install_github('timothy-barry/sceptre3')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
