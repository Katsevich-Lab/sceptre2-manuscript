library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
remove.packages("ondisc")
devtools::install_github('timothy-barry/ondisc')
ibrary(biomaRt)
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) #devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
TSS = rep(NA,nrow(A))
END = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS[j] = A$start_position[j]
END[j] = A$start_position[j]-500
}else{
TSS[j] = A$end_position[j]
END[j] = A$start_position[j]+500
}
}
A$TSS = TSS
A$END = END
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
View(A)
View(chipseq_data)
chipseq_data@seqnames@values
chipseq_data@seqnames@lengths
chipseq_data@seqnames@elementMetadata
chipseq_data@seqnames@metadata
View(chipseq_data)
View(A)
IRanges(start = A$TSS, end = A$END)
View(A)
View(A)
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$start_position[j]+500
}
}
A$TSS_start = TSS_start
A$TSS_end = TSS_end
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/misc/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
score = chipseq_data$signalValue,
TF = A$hgnc_symbol)
View(A)
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
A$TSS_start = TSS_start
A$TSS_end = TSS_end
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/misc/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
score = chipseq_data$signalValue,
TF = A$hgnc_symbol)
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/misc/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
View(promoters)
View(chipseq_data)
View(A)
A$chromosome_name[1]
View(chipseq_data)
A$chromosome_name = paste0("chr",A$chromosome_name)
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/misc/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
plyranges::join_overlap_left(chipseq_data,promoters)
C = plyranges::join_overlap_left(chipseq_data,promoters)
View(C)
C = plyranges::join_overlap_left(promoters,chipseq_data)
View(C)
View(C)
C
C$TF
tables(C$score)
table(C$score)
mean(is.na(C$score))
table(chipseq_data$score)
View(C)
View(C)
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
View(sceptre)
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
View(seurat_IRF1)
View(sceptre_IRF1)
mean(overlap_genes%in%sceptre_IRF1$response_id)
View(seurat_IRF1)
seurat_IRF1 = seurat_IRF1[overlap_genes,]
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[overlap_genes,]
View(seurat_IRF1)
hist(seurat_IRF1$p_val)
hist(sceptre_IRF1$p_val)
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[rownames(seurat_IRF1)%in%overlap_genes),]
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[rownames(seurat_IRF1)%in%overlap_genes,]
View(sceptre_IRF1)
View(seurat_IRF1)
knitr::opts_chunk$set(echo = TRUE)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
sceptre$p_value = p.adjust(sceptre$p_value,method = "BH")
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get results for those genes that are associated with IRF1 based on Chipseq
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[rownames(seurat_IRF1)%in%overlap_genes,]
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get results for those genes that are associated with IRF1 based on Chipseq
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[rownames(seurat_IRF1)%in%overlap_genes,]
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
mean(sceptre_IRF1$p_value < alpha)
mean(seurat_IRF1$p_val < alpha)
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sum(sceptre_IRF1$p_value < alpha)
sum(seurat_IRF1$p_val < alpha)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = mean(sceptre_IRF1$p_value < alpha)
sum(seurat_IRF1$p_val < alpha)
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = mean(sceptre_IRF1$p_value < alpha)
seurat_sensitivity = sum(seurat_IRF1$p_val < alpha)
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = mean(sceptre_IRF1$p_value < alpha)
seurat_sensitivity = sum(seurat_IRF1$p_val < alpha)
wrt = "with respect to genes whose promoter overlaps with Chipseq peaks is"
print(paste0("The sensitivity of SCEPTRE ",wrt," is ",sceptre_sensitivity))
print(paste0("The sensitivity of Seurat ",wrt," is ",seurat_sensitivity))
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = mean(sceptre_IRF1$p_value < alpha)
seurat_sensitivity = mean(seurat_IRF1$p_val < alpha)
wrt = "with respect to genes whose promoter overlaps with Chipseq peaks is"
print(paste0("The sensitivity of SCEPTRE ",wrt," is ",sceptre_sensitivity))
print(paste0("The sensitivity of Seurat ",wrt," is ",seurat_sensitivity))
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#get TSS for each gene
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes",
dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
sceptre$p_value = p.adjust(sceptre$p_value,method = "BH")
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get results for those genes that are associated with IRF1 based on Chipseq
sceptre_IRF1 = subset(sceptre_IRF1,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1[rownames(seurat_IRF1)%in%overlap_genes,]
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = mean(sceptre_IRF1$p_value < alpha)
seurat_sensitivity = mean(seurat_IRF1$p_val < alpha)
wrt = "with respect to genes whose promoter overlaps with Chipseq peaks is"
print(paste0("The sensitivity of SCEPTRE ",wrt," is ",sceptre_sensitivity))
print(paste0("The sensitivity of Seurat ",wrt," is ",seurat_sensitivity))
#get number of rejection in this gene set at FDR level 0.05
alpha = 0.05
sceptre_sensitivity = round(mean(sceptre_IRF1$p_value < alpha),3)
seurat_sensitivity = round(mean(seurat_IRF1$p_val < alpha),3)
wrt = "with respect to genes whose promoter overlaps with Chipseq peaks is"
print(paste0("The sensitivity of SCEPTRE ",wrt," is ",sceptre_sensitivity))
print(paste0("The sensitivity of Seurat ",wrt," is ",seurat_sensitivity))
?rnegbinom
?rnbinom
n_samp = 100000000
A = rnbinom(n_samp,mu = 3,size = 3)
B = rnbinom(n_samp,mu = 6,size = 2)
C = rnbinom(n_samp,mu = 9,size = 1)
D = A+B+C
hist(D)
table(D)
A_mu = c()
B_mu = c()
C_mu = c()
for(j in c(1:130)){
print(j)
ind = which(D==j)
A_mu = c(A_mu,mean(A[ind]))
B_mu = c(B_mu,mean(B[ind]))
C_mu = c(C_mu,mean(C[ind]))
}
plot(A_mu)
plot(B_mu)
plot(C_mu)
n_samp = 100000
A = rnbinom(n_samp,mu = 3,size = 1)
B = rnbinom(n_samp,mu = 6,size = 1)
C = rnbinom(n_samp,mu = 9,size = 1)
D = A+B+C
n_samp = 1000000
A = rnbinom(n_samp,mu = 3,size = 1)
B = rnbinom(n_samp,mu = 6,size = 1)
C = rnbinom(n_samp,mu = 9,size = 1)
D = A+B+C
table(D)
A_mu = c()
B_mu = c()
C_mu = c()
for(j in c(1:80)){
print(j)
ind = which(D==j)
A_mu = c(A_mu,mean(A[ind]))
B_mu = c(B_mu,mean(B[ind]))
C_mu = c(C_mu,mean(C[ind]))
}
plot(A)
plot(A_mu)
A_mu
plot(B_mu)
plot(C_mu)
n_samp = 1000000
#A = rnbinom(n_samp,mu = 3,size = 1)
#B = rnbinom(n_samp,mu = 6,size = 1)
#C = rnbinom(n_samp,mu = 9,size = 1)
A = rpois(n_samp,3)
B = rpois(n_samp,6)
C = rpois(n_samp,9)
D = A+B+C
table(D)
A_mu = c()
B_mu = c()
C_mu = c()
for(j in c(5:30)){
print(j)
ind = which(D==j)
A_mu = c(A_mu,mean(A[ind]))
B_mu = c(B_mu,mean(B[ind]))
C_mu = c(C_mu,mean(C[ind]))
}
plot(A_mu)
plot(B_mu)
plot(C_mu)
n_samp = 1000000
A = rnbinom(n_samp,mu = 3,size = 1)
B = rnbinom(n_samp,mu = 6,size = 1)
C = rnbinom(n_samp,mu = 9,size = 1)
D = A+B+C
table(D)
A_mu = c()
B_mu = c()
C_mu = c()
for(j in c(0:80)){
print(j)
ind = which(D==j)
A_mu = c(A_mu,mean(A[ind]))
B_mu = c(B_mu,mean(B[ind]))
C_mu = c(C_mu,mean(C[ind]))
}
plot(A_mu)
plot(B_mu)
plot(C_mu)
hist(A)
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
