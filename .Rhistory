View(atac_TF)
# join with chipseq scores
merged_results <- atac_TF |>
filter(gene %in% genes_qc) |>
left_join(sceptre_results_TF, by = "gene") |>
left_join(seurat_results_TF, by = "gene")
View(merged_results)
merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
TFs = colnames(atac_target_genes)
odds_ratios <- matrix(NA, nrow = length(TFs), ncol = 4,
dimnames = list(ground_truth = TFs,
method = c("SCEPTRE", "Seurat","SCEPTRE-pval","Seurat-pval")))
for(TF in TFs){
#get atac target gene matrix
atac_TF = atac_target_genes%>%select(TF)%>%
mutate(gene = rownames(atac_target_genes))%>%
dplyr::rename(binary_score = TF)
atac_genes = rownames(atac_target_genes)
genes_qc <- intersect(sceptre_results |>
filter(grna_group == TF) |>
na.omit() |>
pull(response_id),
atac_genes)
q <- 0.1
# apply BH correction to SCEPTRE STAT1 results
sceptre_results_TF<- sceptre_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat TFresults
seurat_results_TF<- seurat_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(response_id, seurat_discovery) |>
rename(gene = response_id)
# join with chipseq scores
merged_results <- atac_TF |>
filter(gene %in% genes_qc) |>
left_join(sceptre_results_TF, by = "gene") |>
left_join(seurat_results_TF, by = "gene")
odds_ratios[TF, "SCEPTRE"] <- merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
odds_ratios[TF, "Seurat"] <- merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
odds_ratios[TF, "SCEPTRE-pval"] <- merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
odds_ratios[TF, "Seurat-pval"] <- merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
}
odds_ratios |>
signif(3) |>
Hmisc::latex(booktabs = TRUE,
rowlabel="\\diagbox{Ground truth}{Method}",
file="",
caption = "Enrichment odds ratios, comparing to ChIP-seq target assignments with changing quantile threshold",
where = "!htbp")
View(odds_ratios)
TF = "STAT3"
#get atac target gene matrix
atac_TF = atac_target_genes%>%select(TF)%>%
mutate(gene = rownames(atac_target_genes))%>%
dplyr::rename(binary_score = TF)
atac_genes = rownames(atac_target_genes)
genes_qc <- intersect(sceptre_results |>
filter(grna_group == TF) |>
na.omit() |>
pull(response_id),
atac_genes)
q <- 0.1
# apply BH correction to SCEPTRE STAT1 results
sceptre_results_TF<- sceptre_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat TFresults
seurat_results_TF<- seurat_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(response_id, seurat_discovery) |>
rename(gene = response_id)
# join with chipseq scores
merged_results <- atac_TF |>
filter(gene %in% genes_qc) |>
left_join(sceptre_results_TF, by = "gene") |>
left_join(seurat_results_TF, by = "gene")
View(merged_results)
View(odds_ratios)
View(merged_results)
View(merged_results)
TFs = colnames(atac_target_genes)
odds_ratios <- matrix(NA, nrow = length(TFs), ncol = 7,
dimnames = list(ground_truth = TFs,
method = c("SCEPTRE", "Seurat","SCEPTRE-pval","Seurat-pval",
"Num TF Targets","Num Seurat Targets","Num SCEPTRE Targets")))
for(TF in TFs){
#get atac target gene matrix
atac_TF = atac_target_genes%>%select(TF)%>%
mutate(gene = rownames(atac_target_genes))%>%
dplyr::rename(binary_score = TF)
atac_genes = rownames(atac_target_genes)
genes_qc <- intersect(sceptre_results |>
filter(grna_group == TF) |>
na.omit() |>
pull(response_id),
atac_genes)
q <- 0.1
# apply BH correction to SCEPTRE STAT1 results
sceptre_results_TF<- sceptre_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(sceptre_discovery = p.adjust(p_value, method = "BH") <= q) |>
select(response_id, sceptre_discovery) |>
rename(gene = response_id)
# apply BH correction to Seurat TFresults
seurat_results_TF<- seurat_results |>
filter(grna_group == TF, response_id %in% genes_qc) |>
mutate(seurat_discovery = p.adjust(p_val, method = "BH") <= q) |>
select(response_id, seurat_discovery) |>
rename(gene = response_id)
# join with chipseq scores
merged_results <- atac_TF |>
filter(gene %in% genes_qc) |>
left_join(sceptre_results_TF, by = "gene") |>
left_join(seurat_results_TF, by = "gene")
odds_ratios[TF, "SCEPTRE"] <- merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
odds_ratios[TF, "Seurat"] <- merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("estimate")
odds_ratios[TF, "SCEPTRE-pval"] <- merged_results |>
select(binary_score, sceptre_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
odds_ratios[TF, "Seurat-pval"] <- merged_results |>
select(binary_score, seurat_discovery) |>
table() |>
fisher.test() %>%
`$`("p.value")
odds_ratios[TF, "Num TF Targets"] <- sum(merged_results[["binary_score"]])
odds_ratios[TF, "Num Seurat Targets"] <- sum(merged_results[[
"seurat_discovery"]])
odds_ratios[TF, "Num SCEPTRE Targets"] <- sum(merged_results[[
"sceptre_discovery"]])
}
View(odds_ratios)
?hmisc::latex
?Hmisc::latex
odds_ratios |>
signif(3) |>
Hmisc::latex(booktabs = TRUE,
rowlabel="\\diagbox{Ground truth}{Method}",
file="",
caption = "Enrichment odds ratios, comparing to ChIP-seq target assignments with changing quantile threshold",
where = "!htbp")%>%
kable_styling(latex_options = "scale_down")
View(odds_ratios)
odds_ratios |>
signif(3) |>
kable(booktabs = TRUE,caption = "Enrichment odds ratios, comparing to ChIP-seq target assignments with changing quantile threshold")%>%
kable_styling(latex_options = "scale_down")
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE)
#pvalue quantile you want to filter by. 0.75 means that we are keeping the
#top 75 percent  of peaks sorted by pvalue
quant = 0.75
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point",
"peak_to_mid_dist")
atac_path = paste0(data_dir, "results/papalexi_analysis/",
"ATACseq_TF_targets_score_QC_",100*score_QC,".rds")
#pvalue quantile you want to filter by. 0.75 means that we are keeping the
#top 75 percent  of peaks sorted by pvalue
quant = 0.75
score_QC = 0.9
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point",
"peak_to_mid_dist")
atac_path = paste0(data_dir, "results/papalexi_analysis/",
"ATACseq_TF_targets_score_QC_",100*score_QC,".rds")
atac_target_genes = readRDS(atac_path)
# read in genes from database
database_genes <- rownames(atac_target_genes)[atac_target_genes[[TF]]==1]
View(atac_target_genes)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
pval = chipseq_data$pval,
peak_position = chipseq_data$pos_max_peak)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
pval = chipseq_data$pval,
peak_position = chipseq_data$pos_max_peak)
#hist(chipseq_data$pval)
alpha = quantile(chipseq_data$pval,1-quant)
chipseq_data = chipseq_data%>%filter(pval < alpha)
# get TSS for each gene
gene_names <- sceptre_results |> pull(response_id) |> unique() |> as.character()
# get TSS for each gene
gene_names <- rownames(atac_target_genes) |> pull(response_id) |> unique() |> as.character()
# get TSS for each gene
gene_names <- rownames(atac_target_genes) |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
chipseq_scores_binary <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
# get linear score for each gene
window_width_linear <- 5e4
chipseq_scores_linear <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_linear,
end = TSS_info$TSS+window_width_linear),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(linear_score = sum((window_width_linear - abs(TSS - peak_position))/
window_width_linear)) |>
as_tibble() |>
mutate(linear_score = ifelse(is.na(linear_score), 0, linear_score))
# join the two sets of chipseq scores, and add database information
chipseq_scores <- full_join(chipseq_scores_binary,
chipseq_scores_linear,
by = "gene") |>
mutate(in_database = gene %in% database_genes)
chipseq_scores |>
select(in_database, binary_score) |>
table() |>
Hmisc::latex(booktabs = TRUE,
rowlabel="\\diagbox{Database}{ChIP-seq}",
file="",
caption = "Comparing target genes identified based on database and based directly on ChIP-seq data (at least one peak within 5kb).",
where = "!htbp")
chipseq_scores |>
group_by(in_database) |>
summarise(round(mean(binary_score), 3)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Mean binary score"),
caption = paste0("Comparing ChIP-seq binary score to database.")) |>
kable_styling(position = "center", latex_options = "HOLD_position")
chipseq_scores |>
group_by(in_database) |>
summarise(round(median(linear_score), 3)) |>
kable(booktabs = TRUE,
linesep = "",
col.names = c("In database", "Median linear score"),
caption = paste0("Comparing ChIP-seq linear score to database.")) |>
kable_styling(position = "center", latex_options = "HOLD_position")
chipseq_scores |>
ggplot(aes(x = in_database, y = linear_score)) +
geom_violin(fill = "dodgerblue") +
labs(x = "In database", y = "Linear score")
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
chipseq.dir
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,"/data/chipseq/",irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
chipseq.dir
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
#data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,"/data/chipseq/",irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
chipseq.dir
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
paste0(data.dir,"/data/chipseq/",irf1)
data.dir
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
#data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,"/data/chipseq/",irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
#data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data_dir,"/data/chipseq/",irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
atac_path = paste0(data_dir, "results/papalexi_analysis/",
"ATACseq_TF_targets_score_QC_",100*score_QC,".rds")
atac_target_genes = readRDS(atac_path)
# read in genes from ATAC-seq
database_genes <- rownames(atac_target_genes)[atac_target_genes[[TF]]==1]
chipseq_data = GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos, end = chipseq_data$end_pos),
score = chipseq_data$score,
pval = chipseq_data$pval,
peak_position = chipseq_data$pos_max_peak)
#hist(chipseq_data$pval)
alpha = quantile(chipseq_data$pval,1-quant)
chipseq_data = chipseq_data%>%filter(pval < alpha)
View(chipseq_data)
#hist(chipseq_data$pval)
alpha = quantile(chipseq_data$pval,1-quant)
chipseq_data = chipseq_data%>%filter(pvalue < alpha)
# get TSS for each gene
gene_names <- rownames(atac_target_genes) |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
chipseq_scores_binary <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
# get linear score for each gene
window_width_linear <- 5e4
chipseq_scores_linear <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_linear,
end = TSS_info$TSS+window_width_linear),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(linear_score = sum((window_width_linear - abs(TSS - peak_position))/
window_width_linear)) |>
as_tibble() |>
mutate(linear_score = ifelse(is.na(linear_score), 0, linear_score))
knitr::opts_chunk$set(fig.align = 'center', echo = FALSE)
# load libraries
library(tidyverse)
library(plyranges)
library(genomation)
library(biomaRt)
library(GenomicRanges)
library(kableExtra)
# resolve namespace conflicts
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(base::intersect)
#pvalue quantile you want to filter by. 0.75 means that we are keeping the
#top 75 percent  of peaks sorted by pvalue
quant = 0.75
score_QC = 0.9
TF = "IRF1"
data_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# read in K562 ChIP-seq data
irf1_filename <- "GSM1057025_IRF1peak_B.txt"
chipseq_fp <- paste0(data_dir, "data/chipseq/", irf1_filename)
chipseq_data <- read.table(chipseq_fp)
colnames(chipseq_data) = c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height",
"rel_pos_max_peak_height","peak_size","mid_point",
"peak_to_mid_dist")
atac_path = paste0(data_dir, "results/papalexi_analysis/",
"ATACseq_TF_targets_score_QC_",100*score_QC,".rds")
atac_target_genes = readRDS(atac_path)
# read in genes from ATAC-seq
database_genes <- rownames(atac_target_genes)[atac_target_genes[[TF]]==1]
#hist(chipseq_data$pval)
alpha = quantile(chipseq_data$pval,1-quant)
chipseq_data = chipseq_data%>%filter(pval < alpha)
# get TSS for each gene
gene_names <- rownames(atac_target_genes) |> as.character()
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS)
# get binary score for each gene
window_width_binary <- 5e3
chipseq_scores_binary <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-window_width_binary,
end = TSS_info$TSS+window_width_binary),
gene = TSS_info$gene,
TSS = TSS_info$TSS) |>
join_overlap_left(chipseq_data) |>
group_by(gene) |>
summarise(binary_score = any(!is.na(score))) |>
as_tibble()
View(chipseq_data)
