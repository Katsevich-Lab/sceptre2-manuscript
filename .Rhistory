dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get results for those genes that are associated with IRF1 based on Chipseq
sceptre_IRF1 = subset(sceptre_IRF1_raw,response_id %in%overlap_genes)
seurat_IRF1 = seurat_IRF1_raw[rownames(seurat_IRF1_raw)%in%overlap_genes,]
#get number of true discoveries made by each method
sceptre_disc = unfactor(sceptre_IRF1[sceptre_IRF1$p_value < alpha,]$response_id)
seurat_disc = rownames(seurat_IRF1[seurat_IRF1$p_val < alpha,])
#get number of false and true discoveries made by each method
sceptre_true = sum(sceptre_disc%in%overlap_genes)
seurat_true = sum(seurat_disc%in%overlap_genes)
#get number of false and true discoveries made by each method
sceptre_false = sum(sceptre_disc%in%overlap_genes )
seurat_false = sum(seurat_disc%in%overlap_genes)
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#get TSS for each gene
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes",
dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get number of true discoveries made by each method
sceptre_disc = unfactor(sceptre_IRF1[sceptre_IRF1$p_value < alpha,]$response_id)
seurat_disc = rownames(seurat_IRF1[seurat_IRF1$p_val < alpha,])
#get number of false and true discoveries made by each method
sceptre_true = sum(sceptre_disc%in%overlap_genes)
seurat_true = sum(seurat_disc%in%overlap_genes)
#get number of false and true discoveries made by each method
sceptre_false = sum(sceptre_disc%in%overlap_genes )
seurat_false = sum(seurat_disc%in%overlap_genes)
#get number of false and true discoveries made by each method
sceptre_true = sum(sceptre_disc%in%overlap_genes)
seurat_true = sum(seurat_disc%in%overlap_genes)
#get number of false and true discoveries made by each method
sceptre_false = sum(sceptre_disc%in%overlap_genes == F)
seurat_false = sum(seurat_disc%in%overlap_genes == F)
#get number of false and true discoveries made by each method
sceptre_true = sum(sceptre_disc%in%overlap_genes)
seurat_true = sum(seurat_disc%in%overlap_genes)
#get number of false and true discoveries made by each method
sceptre_false = sum(sceptre_disc%in%overlap_genes == F)
seurat_false = sum(seurat_disc%in%overlap_genes == F)
#get total discoveries made by each method
sceptre_total = length(sceptre_disc)
seurat_total = length(seurat_disc)
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%overlap_genes == F)]
seurat_false = seurat_disc[(seurat_disc%in%overlap_genes == F)]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_unique = scetpre_true[(sceptre_true %in% seurat_true) ==F]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_unique = sceptre_true[(sceptre_true %in% seurat_true) ==F]
seurat_unique = seurat_true[(seurat_true %in% sceptre_true) ==F]
#get total overlap of false discoveries
overlap_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) ==F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) ==F]
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#get TSS for each gene
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes",
dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
sceptre_IRF1 = subset(sceptre,grna_group == "IRF1")
seurat_IRF1 = seurat[['IRF1']]
#get number of true discoveries made by each method
sceptre_disc = unfactor(sceptre_IRF1[sceptre_IRF1$p_value < alpha,]$response_id)
seurat_disc = rownames(seurat_IRF1[seurat_IRF1$p_val < alpha,])
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%overlap_genes == F)]
seurat_false = seurat_disc[(seurat_disc%in%overlap_genes == F)]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) ==F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) ==F]
#get total overlap of false discoveries
overlap_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) ==F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) ==F]
#get sceptre and seurat IRF1 results
PRTB = "IRF1"
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get number of true discoveries made by each method
sceptre_disc = unfactor(sceptre_prtb[sceptre_prtb$p_value < alpha,]$response_id)
seurat_disc = rownames(seurat_prtb[seurat_prtb$p_val < alpha,])
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%overlap_genes == F)]
seurat_false = seurat_disc[(seurat_disc%in%overlap_genes == F)]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) ==F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) ==F]
#get total overlap of false discoveries
overlap_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) ==F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) ==F]
#get sensitivity of each method
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
View(A)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
chipseq.dir = paste0(data.dir,
'GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak')
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
#get left join of promoters and chipseq peaks
direct_effects = plyranges::join_overlap_left(promoters,chipseq_data)
#get overlapped genes
overlap_genes = direct_effects$TF[is.na(direct_effects$score)==F]
false_genes = direct_effects$TF[is.na(direct_effects$score)==T]
print(paste0("The number of promoters that overlap with Chipseq peaks is ",
length(overlap_genes)))
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
PRTB = "IRF1"
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get number of true discoveries made by each method
sceptre_disc = unfactor(sceptre_prtb[sceptre_prtb$p_value < alpha,]$response_id)
seurat_disc = rownames(seurat_prtb[seurat_prtb$p_val < alpha,])
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%false_genes)]
seurat_false = seurat_disc[(seurat_disc%in%false_genes)]
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) ==F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) ==F]
#get total overlap of false discoveries
overlap_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) ==F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) ==F]
#get sensitivity of each method
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
#get specificity of each method
sceptre_specificity = 1-length(sceptre_false)/length(false_genes)
sceptre_specificity = 1-length(sceptre_false)/length(false_genes)
#get sensitivity of each method
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
#get specificity of each method
sceptre_specificity = 1-length(sceptre_false)/length(false_genes)
seurat_specificity = 1-length(seurat_false)/length(false_genes)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
library(enrichR)
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%false_genes)]
seurat_false = seurat_disc[(seurat_disc%in%false_genes)]
all_disc = matrix(NA,2,2)
rownames(all_disc) = c('Seurat','SCEPTRE')
colnames(all_disc) = c("Num. True Discovery","Num. False Discovery" )
all_disc[1,] = c(sceptre_true,sceptre_false)
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%false_genes)]
seurat_false = seurat_disc[(seurat_disc%in%false_genes)]
all_disc = matrix(NA,2,2)
rownames(all_disc) = c('Seurat','SCEPTRE')
colnames(all_disc) = c("Num. True Discovery","Num. False Discovery" )
all_disc[1,] = c(length(sceptre_true),length(sceptre_false))
all_disc[2,] = c(length(seurat_true),length(seurat_false))
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation False and True Discoveries"))
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
library(enrichR)
library(kableExtra)
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%false_genes)]
seurat_false = seurat_disc[(seurat_disc%in%false_genes)]
all_disc = matrix(NA,2,2)
rownames(all_disc) = c('Seurat','SCEPTRE')
colnames(all_disc) = c("Num. True Discovery","Num. False Discovery" )
all_disc[1,] = c(length(sceptre_true),length(sceptre_false))
all_disc[2,] = c(length(seurat_true),length(seurat_false))
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation False and True Discoveries"))
kable_styling(results_table,position = "center", latex_options = "scale_down")
#get number of false and true discoveries made by each method
sceptre_true = sceptre_disc[(sceptre_disc%in%overlap_genes)]
seurat_true = seurat_disc[(seurat_disc%in%overlap_genes)]
#get number of false and true discoveries made by each method
sceptre_false = sceptre_disc[(sceptre_disc%in%false_genes)]
seurat_false = seurat_disc[(seurat_disc%in%false_genes)]
all_disc = matrix(NA,2,2)
rownames(all_disc) = c('Seurat','SCEPTRE')
colnames(all_disc) = c("Num. True Discovery","Num. False Discovery" )
all_disc[1,] = c(length(sceptre_true),length(sceptre_false))
all_disc[2,] = c(length(seurat_true),length(seurat_false))
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation False and True Discoveries"))
kable_styling(results_table,position = "center")
#get total overlap of true discoveries
overlap_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) ==F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) ==F]
all_disc = matrix(NA,1,3)
rownames(all_disc) = c("Discoveries")
colnames(all_disc) = c("Unique to SCEPTRE","Unique to Seurat","Shared")
all_disc[1,] = c(length(sceptre_true_unique),length(seurat_true_unique),
length(overlap_true))
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation False and True Discoveries"))
kable_styling(results_table,position = "center", latex_options = "scale_down")
#get total overlap of false discoveries
overlap_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) ==F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) ==F]
all_disc = matrix(NA,1,3)
rownames(all_disc) = c("Discoveries")
colnames(all_disc) = c("Unique to SCEPTRE","Unique to Seurat","Shared")
all_disc[1,] = c(length(sceptre_false_unique),length(seurat_false_unique),
length(overlap_false))
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation False Discovery Overlap"))
kable_styling(results_table,position = "center")
#get sensitivity of each method
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
#get specificity of each method
sceptre_specificity = 1-length(sceptre_false)/length(false_genes)
seurat_specificity = 1-length(seurat_false)/length(false_genes)
all_disc = matrix(NA,2,2)
rownames(all_disc) = c("SCEPTRE","Seurat")
colnames(all_disc) =  c("Sensitivity","Specificity")
all_disc[1,] = c(sceptre_sensitivity,sceptre_specificity)
all_disc[2,] = c(seurat_sensitivity,seurat_specificity)
results_table = kable(all_disc,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE vs SEURAT:",PRTB,
" Perturbation Sensitivity and Specificity"))
kable_styling(results_table,position = "center")
View(chipseq_data)
plot(ecdf(chipseq_data$score))
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
library(enrichR)
library(kableExtra)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
