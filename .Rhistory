custom_theme
p2 <- DimPlot(
object = eccite,
group.by = 'Phase',
label = F, pt.size = 0.2,
reduction = "umap", repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
p3 <- DimPlot(
object = eccite,
group.by = 'crispr',
pt.size = 0.2,
reduction = "umap",
split.by = "crispr",
ncol = 1,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
((p1 / p2 + plot_layout(guides = 'auto')) | p3 )
# Calculate perturbation signature (PRTB).
eccite<- CalcPerturbSig(
object = eccite,
assay = "RNA",
slot = "data",
gd.class ="gene",
nt.cell.class = "NT",
reduction = "pca",
ndims = 40,
num.neighbors = 20,
split.by = "replicate",
new.assay.name = "PRTB")
# Prepare PRTB assay for dimensionality reduction:
# Normalize data, find variable features and center data.
DefaultAssay(object = eccite) <- 'PRTB'
# Use variable features from RNA assay.
VariableFeatures(object = eccite) <- VariableFeatures(object = eccite[["RNA"]])
eccite <- ScaleData(object = eccite, do.scale = F, do.center = T)
# Run PCA to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite, reduction.key = 'prtbpca', reduction.name = 'prtbpca')
# Run UMAP to visualize clustering in 2-D.
eccite <- RunUMAP(
object = eccite,
dims = 1:40,
reduction = 'prtbpca',
reduction.key = 'prtbumap',
reduction.name = 'prtbumap')
# Generate plots to check if clustering is driven by biological replicate ID,
# cell cycle phase or target gene class.
q1 <- DimPlot(
object = eccite,
group.by = 'replicate',
reduction = 'prtbumap',
pt.size = 0.2, cols = "Dark2", label = F, repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q2 <- DimPlot(
object = eccite,
group.by = 'Phase',
reduction = 'prtbumap',
pt.size = 0.2, label = F, repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q3 <- DimPlot(
object = eccite,
group.by = 'crispr',
reduction = 'prtbumap',
split.by = "crispr",
ncol = 1,
pt.size = 0.2,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
(q1 / q2 + plot_layout(guides = 'auto') | q3)
# Run mixscape.
eccite <- RunMixscape(
object = eccite,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
# Calculate percentage of KO cells for all target gene classes.
df <- prop.table(table(eccite$mixscape_class.global, eccite$NT),2)
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KO"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("NT", "NP", "KO"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2),
function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]
p1 <- ggplot(df3, aes(x = guide_number, y = value*100, fill= Var1)) +
geom_bar(stat= "identity") +
theme_classic()+
scale_fill_manual(values = c("grey49", "grey79","coral1")) +
ylab("% of cells") +
xlab("sgRNA")
p1 + theme(axis.text.x = element_text(size = 18, hjust = 1),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 16),
strip.text = element_text(size=16, face = "bold")) +
facet_wrap(vars(gene),ncol = 5, scales = "free") +
labs(fill = "mixscape class") +theme(legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
marker_all = FindMarkers(eccite,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
?FindAllMarkers
marker_all = FindMarkers(eccite,ident.1 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
marker_all = FindMarkers(eccite,ident.1 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
View(marker_all)
unique(idents(eccite))
grna = unique(Idents(eccite))
grna
grna = unfactor(unique(Idents(eccite)))
grna
substr("NT",1,nchar("NT")-3)
length(substr("NT",1,nchar("NT")-3))
nchar(substr("NT",1,nchar("NT")-3))
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
#Idents(ecite) = grna
#val = Idents(eccite)[which(Idents(eccite))]
#marker_all = FindMarkers(eccite,ident.1 = 'NT',
#assay = 'RNA',only.pos = F,base = exp(1),
#logfc.threshold = 0)
grna
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[counter] = marker_all
counter = counter + 1
}
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[counter] = marker_all
counter = counter + 1
}
View(val)
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[[counter]] = marker_all
counter = counter + 1
}
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
diff_genes[[counter]] = marker_all
counter = counter + 1
}
dir = "/Users/kmason/code/sceptre2-manuscript/writeups/papalexi_analysis/"
saveRDS(diff_genes ,paste0(dir,"seurat_all_perturbations_results.rds"))
library(sceptre3)
remove.packages("sceptre3")
devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
#get CUL3 mrna data. Remove genes 13565-13575 since they contain something that is causing code to crash
response_grna_group_pairs <- expand.grid(response_id = rownames(response_matrix)[-c(13565:13575)],
grna_group = unique_grna[-which(unique_grna %in% c('non-targeting','CD274'))]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
result_gene <- run_sceptre_lowmoi(response_matrix,
grna_matrix,
covariate_data_frame,
grna_group_data_frame,
formula_object,
calibration_check,
response_grna_group_pairs,
test_stat,
return_resampling_dist,
adaptive_permutation_test,
fit_skew_normal)
#save results
CODE_DIR <-.get_config_path("LOCAL_CODE_DIR")
papalexi_analysis_data_dir <- paste0(CODE_DIR, "/sceptre2-manuscript/writeups/papalexi_analysis/")
saveRDS(result_gene,paste0(papalexi_analysis_data_dir,"sceptre_full_mrna_results_with_effect_size.rds"))
usethis::create_github_token()
gitcreds::gitcreds_set()
install.packages("BiocManager")
BiocManager::install(c("GenomicRanges", "plyranges","biomart"))
BiocManager::install(c("biomaRt"))
getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
library(biomaRt)
BiocManager::install(c("biomaRt"))
library(biomaRt)
library(plyranges)
library(GenomicRanges)
getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
library(sceptre3)
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
library(biomaRt)
library(plyranges)
library(GenomicRanges)
#devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
library(biomaRt)
library(plyranges)
library(GenomicRanges)
#devtools::install_github("https://github.com/timothy-barry/sceptre3")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
remove.packages("ondisc")
devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
library(biomaRt)
library(plyranges)
library(GenomicRanges)
getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
ensembl <- useEnsembl(biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
View(A)
View(A)
ensembl <- useEnsembl(biomart = "genes", dataset = "hg19/GRCh37")
listDatasets()
listDatasets(biomart = 'genes')
listDatasets(mart, verbose = FALSE)
ensembl <- useEnsembl(biomart = "genes")
listDatasets(mart = ensembl)
B = listDatasets(mart = ensembl)
View(B)
ensembl <- useEnsembl(biomart = "genes", dataset = "GRCh37")
ensembl <- useEnsembl(host    = 'grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c('hgnc_symbol', 'chromosome_name', 'strand', 'transcription_start_site'),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
View(A)
B = gene_odm |> get_feature_ids()
B
View(A)
View(ensembl)
ensembl@attributes
View(ensembl@attributes)
View(ensembl)
View(A)
View(A)
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
TSS = ifelse(strand == 1, start_position, end_position)
View(A)
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
View(A)
TSS = ifelse(A,strand == 1, start_position, end_position)
TSS = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS[j] = A$start_position[j]
}else{
TSS[j] = A$end_position
}
}
warnings()
TSS = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS[j] = A$start_position[j]
}else{
TSS[j] = A$end_position[j]
}
}
A$TSS = TSS
View(A)
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = "genes", dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
TSS = rep(NA,nrow(A))
END = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
if(A$strand[j]==1){
TSS[j] = A$start_position[j]
END[j] = A$start_position[j]-500
}else{
TSS[j] = A$end_position[j]
END[j] = A$start_position[j]+500
}
}
A$TSS = TSS
A$END = END
View(A)
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
BiocManager::install( "consensusSeekeR")
BiocManager::install( "consensusSeekeR")
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(consensusSeekeR)
chipseq_data = readNarrowPeakFile("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak")
View(chipseq_data)
BiocManager::install( "genomation:")
BiocManager::install( "genomation")
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(consensusSeekeR)
#devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
chipseq_data = readNarrowPeakFile("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak")
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
chipseq_data = readNarrowPeak("/Users/kmason/Desktop/GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak", track.line=FALSE, zero.based=TRUE)
gr_chipseq <- GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$chromStart, end = chipseq_data$chromEnd),
score = chipseq_data$signalValue,
TF = chipseq_data$TF)
View(chipseq_data)
View(chipseq_data)
View(chipseq_data)
#devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#devtools::install_github("https://github.com/timothy-barry/ondisc")
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
library(sceptre3)
library(BH)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
remove.packages("ondisc")
