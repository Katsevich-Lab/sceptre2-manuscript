A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-1000
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+1000
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
#get TSS for each gene
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
sceptre$p_value_adj = sceptre$p_value
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value_adj[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val_adj = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
PRTB = 'IRF1'
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
alpha = 0.05
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#get true positive sets
sceptre_true = sceptre_sig[sceptre_sig %in% overlap_genes]
seurat_true = seurat_sig[seurat_sig %in% overlap_genes]
#get number of shared and unique true postives
shared_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) == F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) == F]
#get sensitivity
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
#get false positive sets
sceptre_false = sceptre_sig[sceptre_sig %in% null_genes]
seurat_false = seurat_sig[seurat_sig %in% null_genes]
#get number of shared and unique false postives
shared_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) == F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) == F]
#get specificity
sceptre_specificity = 1-length(sceptre_false)/length(null_genes)
seurat_specificity = 1-length(seurat_false)/length(null_genes)
#make table for true positives
true_pos = matrix(NA,1,4)
rownames(true_pos) = "True Positives"
colnames(true_pos) = c("Total Positive Genes","Unique to SCEPTRE",
"Unique to Seurat","Shared")
true_pos[1,] = c(length(overlap_genes),length(sceptre_true_unique),
length(seurat_true_unique),length(shared_true))
results_table = kable(true_pos,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE Vs Seurat:",PRTB," Perturbation True Positives"))
kable_styling(results_table,position = "center")
#volcano plot
ggplot(Pval,aes(x = seuratP,y = sceptreP)) + geom_point() +
ggtitle('Identity Plot of CUL3 Pvalues: SCEPTRE vs  Unfiltered Seurat') +
labs(y = 'Sceptre Pvalues',x = 'Seurat Pvalues')+
geom_abline(slope=1, intercept = 0,color = 'red')+
geom_vline(xintercept = log(0.05/14000,10),color = 'red')+
geom_hline(yintercept = log(0.05/14000,10), color = 'red')
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,stat1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
knitr::opts_chunk$set(echo = TRUE)
#load required packages. Sometimes need to redownload ondisc
library(biomaRt)
library(plyranges)
library(GenomicRanges)
library(genomation)
#devtools::install_github('timothy-barry/ondisc')
library(ondisc)
library(sceptre3)
library(BH)
library(varhandle)
library(kableExtra)
library(rjson)
library(ggplot2)
#read in papalexi data
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
#get TSS for each gene
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
A = getBM(attributes=c("hgnc_symbol", "chromosome_name", "start_position",
"end_position", "strand"),
filters=c('hgnc_symbol'),
value = gene_odm |> get_feature_ids(), mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y"))
#get start and end site depending on whether the strand is postive or negative
TSS_start = rep(NA,nrow(A))
TSS_end = rep(NA,nrow(A))
for(j in c(1:nrow(A))){
#if strand positive, use [start-500,start]
if(A$strand[j]==1){
TSS_end[j] = A$start_position[j]
TSS_start[j] = A$start_position[j]-500
}else{
#if strand negative use [end,end + 500]
TSS_start[j] = A$end_position[j]
TSS_end[j] = A$end_position[j]+500
}
}
#add to A matrix
A$TSS_start = TSS_start
A$TSS_end = TSS_end
#add chr to chromosome name
A$chromosome_name = paste0("chr",A$chromosome_name)
#use A to make a promoter granges object
promoters <- GRanges(
seqnames = A$chromosome_name,
ranges = IRanges(start = A$TSS_start, end = A$TSS_end),
TF = A$hgnc_symbol)
#read in chipseq data as granges object
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
stat1 = 'GSM935488_hg19_wgEncodeSydhTfbsK562Stat1Ifng6hStdPk.narrowPeak'
irf1 = "GSM935549_hg19_wgEncodeSydhTfbsK562Irf1Ifng6hStdPk.narrowPeak"
chipseq.dir = paste0(data.dir,irf1)
chipseq_data = readNarrowPeak(chipseq.dir, track.line=FALSE, zero.based=TRUE)
overlap_genes = c()
for(chr in paste0('chr',c(1:23,"X","Y"))){
bobby = subset(chipseq_data,seqnames@values == chr)
chucky = subset(promoters,seqnames@values == chr)
direct_effects = plyranges::join_overlap_left(chucky,bobby,
minoverlap = 1)
overlap_genes = c(overlap_genes,direct_effects$TF[is.na(direct_effects$score)==F])
print(length(overlap_genes))
}
null_genes = direct_effects$TF[-(direct_effects$TF%in%overlap_genes == T)]
#read in sceptre and seurat analysis data
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_path = paste0(data.dir,
'seurat_all_perturbations_results.rds')
#read in sceptre and seurat results
sceptre = readRDS(sceptre_path)
seurat = readRDS(seurat_path)
#adjust pvalues according to BH
sceptre$p_value_adj = sceptre$p_value
for(val in unique(sceptre$grna_group)){
ind = which(sceptre$grna_group == val)
sceptre$p_value_adj[ind] = p.adjust(sceptre$p_value[ind],method = "BH")
}
for(j in c(1:length(seurat))){
seurat[[j]]$p_val_adj = p.adjust(seurat[[j]]$p_val,method = "BH")
}
#get sceptre and seurat IRF1 results
PRTB = 'IRF1'
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
alpha = 0.05
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#get true positive sets
sceptre_true = sceptre_sig[sceptre_sig %in% overlap_genes]
seurat_true = seurat_sig[seurat_sig %in% overlap_genes]
#get number of shared and unique true postives
shared_true = sceptre_true[sceptre_true %in% seurat_true]
sceptre_true_unique = sceptre_true[(sceptre_true %in% seurat_true) == F]
seurat_true_unique = seurat_true[(seurat_true %in% sceptre_true) == F]
#get sensitivity
sceptre_sensitivity = length(sceptre_true)/length(overlap_genes)
seurat_sensitivity = length(seurat_true)/length(overlap_genes)
#get false positive sets
sceptre_false = sceptre_sig[sceptre_sig %in% null_genes]
seurat_false = seurat_sig[seurat_sig %in% null_genes]
#get number of shared and unique false postives
shared_false = sceptre_false[sceptre_false %in% seurat_false]
sceptre_false_unique = sceptre_false[(sceptre_false %in% seurat_false) == F]
seurat_false_unique = seurat_false[(seurat_false %in% sceptre_false) == F]
#get specificity
sceptre_specificity = 1-length(sceptre_false)/length(null_genes)
seurat_specificity = 1-length(seurat_false)/length(null_genes)
#make table for true positives
true_pos = matrix(NA,1,4)
rownames(true_pos) = "True Positives"
colnames(true_pos) = c("Total Positive Genes","Unique to SCEPTRE",
"Unique to Seurat","Shared")
true_pos[1,] = c(length(overlap_genes),length(sceptre_true_unique),
length(seurat_true_unique),length(shared_true))
results_table = kable(true_pos,booktabs = TRUE, linesep = "",
caption = paste0("SCEPTRE Vs Seurat:",PRTB," Perturbation True Positives"))
kable_styling(results_table,position = "center")
#volcano plot
ggplot(Pval,aes(x = seuratP,y = sceptreP)) + geom_point() +
ggtitle('Identity Plot of IRF1 Pvalues: SCEPTRE vs  Unfiltered Seurat') +
labs(y = 'Sceptre Pvalues',x = 'Seurat Pvalues')+
geom_abline(slope=1, intercept = 0,color = 'red')+
geom_vline(xintercept = log(0.05/14000,10),color = 'red')+
geom_hline(yintercept = log(0.05/14000,10), color = 'red')
#get sceptre and seurat IRF1 results
alpha = 0.05
perturbations = names(seurat)
sceptre_total_rej = 0
seurat_total_rej = 0
for(PRTB in perturbations){
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
sceptre_total_rej = sceptre_total_rej + length(sceptre_sig)
seurat_total_rej = seurat_total_rej + length(seurat_sig)
}
print(sceptre_total_rej)
print(seurat_total_rej)
#get sceptre and seurat IRF1 results
alpha = 0.05
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = sceptre_sig[(sceptre_sig %in% seurat_sig) == F]
seurat_sig_unique = seurat_sig[(seurat_sig %in% sceptre_sig) == F]
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
#get sceptre and seurat IRF1 results
alpha = 0.05
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
View(gene_summary)
#get sceptre and seurat IRF1 results
alpha = 0.05
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
colnames(gene_summary) = c("Perturbation","Unique to SCEPTRE",
"Unique to Seurat","Shared")
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
View(gene_summary)
#get sceptre and seurat IRF1 results
alpha = 0.05
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
colnames(gene_summary) = c("Perturbation","Unique to SCEPTRE",
"Unique to Seurat","Shared")
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
View(gene_summary)
View(seurat_prtb)
View(seurat_PRTB)
#get sceptre and seurat IRF1 results
alpha = 0.10
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
colnames(gene_summary) = c("Perturbation","Unique to SCEPTRE",
"Unique to Seurat","Shared")
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
View(gene_summary)
#get sceptre and seurat IRF1 results
alpha = 0.10
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
colnames(gene_summary) = c("Perturbation","Unique to SCEPTRE",
"Unique to Seurat","Shared")
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
View(gene_summary)
#get sceptre and seurat IRF1 results
alpha = 0.10
perturbations = names(seurat)
gene_summary = matrix(NA,length(perturbations),4)
colnames(gene_summary) = c("Perturbation","Unique to SCEPTRE",
"Unique to Seurat","Shared")
for(j in c(1:length(perturbations))){
PRTB = perturbations[j]
sceptre_prtb = subset(sceptre,grna_group == PRTB)
seurat_prtb = seurat[[PRTB]]
#get all significant genes from each method
sceptre_sig=unfactor(sceptre_prtb$response_id[sceptre_prtb$p_value_adj < alpha])
seurat_sig = rownames(seurat_prtb)[seurat_prtb$p_val_adj < alpha]
#add number of rejections
shared = sum(sceptre_sig %in% seurat_sig)
sceptre_sig_unique = length(sceptre_sig[(sceptre_sig %in% seurat_sig) == F])
seurat_sig_unique = length(seurat_sig[(seurat_sig %in% sceptre_sig) == F])
gene_summary[j,] = c(PRTB,sceptre_sig_unique,seurat_sig_unique,shared)
}
