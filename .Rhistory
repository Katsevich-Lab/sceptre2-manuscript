knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#get number of response genes analyzed per perturbation
ngene = nrow(sceptre)/3
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_stat3_path = paste0(data.dir,
'seurat_STAT3_results.rds')
seurat_nfkbia_path = paste0(data.dir,
'seurat_NFKBIA_results.rds')
seurat_etv7_path = paste0(data.dir,
'seurat_ETV7_results.rds')
sceptre = readRDS(sceptre_path)
seurat_stat3 = readRDS(seurat_stat3_path)
seurat_nfkbia = readRDS(seurat_nfkbia_path)
seurat_etv7 = readRDS(seurat_etv7_path)
#get significant genes
seurat_etv7_sig = rownames(subset(seurat_etv7,p_val_adj < 0.1))
seurat_stat3_sig = rownames(subset(seurat_stat3,p_val_adj < 0.1))
seurat_nfkbia_sig = rownames(subset(seurat_nfkbia,p_val_adj < 0.1))
#get number of response genes analyzed per perturbation
ngene = nrow(sceptre)/3
sceptre_stat3 = subset(sceptre,grna_group == "STAT5A")
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
sceptre_nfkbia = subset(sceptre,grna_group == "IRF7")
sceptre_nfkbia$p_value_adj = p.adjust(sceptre_nfkbia$p_value,method = "BH")
sceptre_nfkbia = subset(sceptre_nfkbia,p_value_adj < 0.1)
sceptre_etv7 = subset(sceptre,grna_group == "ATF2")
sceptre_etv7$p_value_adj = p.adjust(sceptre_etv7$p_value,method = "BH")
sceptre_etv7 = subset(sceptre_etv7,p_value_adj < 0.1)
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_stat3_path = paste0(data.dir,
'seurat_STAT3_results.rds')
seurat_nfkbia_path = paste0(data.dir,
'seurat_NFKBIA_results.rds')
seurat_etv7_path = paste0(data.dir,
'seurat_ETV7_results.rds')
sceptre = readRDS(sceptre_path)
seurat_stat3 = readRDS(seurat_stat3_path)
seurat_nfkbia = readRDS(seurat_nfkbia_path)
seurat_etv7 = readRDS(seurat_etv7_path)
#get significant genes
seurat_etv7_sig = rownames(subset(seurat_etv7,p_val_adj < 0.1))
seurat_stat3_sig = rownames(subset(seurat_stat3,p_val_adj < 0.1))
seurat_nfkbia_sig = rownames(subset(seurat_nfkbia,p_val_adj < 0.1))
#get number of response genes analyzed per perturbation
ngene = nrow(sceptre)/3
sceptre_stat3 = subset(sceptre,grna_group == "STAT5A")
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
sceptre_nfkbia = subset(sceptre,grna_group == "IRF7")
sceptre_nfkbia$p_value_adj = p.adjust(sceptre_nfkbia$p_value,method = "BH")
sceptre_nfkbia = subset(sceptre_nfkbia,p_value_adj < 0.1)
sceptre_etv7 = subset(sceptre,grna_group == "ATF2")
sceptre_etv7$p_value_adj = p.adjust(sceptre_etv7$p_value,method = "BH")
sceptre_etv7 = subset(sceptre_etv7,p_value_adj < 0.1)
View(seurat_etv7)
#get number of response genes analyzed per perturbation
grna = unique(sceptre$grna_group)
n = c()
for(val in grna){
sceptre_stat3 = subset(sceptre,grna_group == val)
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
n = c(n,nrow(sceptre_stat3))
}
n
gnra
grna
View(cbind(grna,n))
#get number of response genes analyzed per perturbation
grna = unfactor(unique(sceptre$grna_group))
n = c()
for(val in grna){
sceptre_stat3 = subset(sceptre,grna_group == val)
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
n = c(n,nrow(sceptre_stat3))
}
#get number of response genes analyzed per perturbation
grna = unfactor(unique(sceptre$grna_group))
n = c()
for(val in grna){
sceptre_stat3 = subset(sceptre,grna_group == val)
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
n = c(n,nrow(sceptre_stat3))
}
View(cbind(grna,n))
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_stat3_path = paste0(data.dir,
'seurat_STAT3_results.rds')
seurat_nfkbia_path = paste0(data.dir,
'seurat_NFKBIA_results.rds')
seurat_etv7_path = paste0(data.dir,
'seurat_ETV7_results.rds')
sceptre = readRDS(sceptre_path)
seurat_stat3 = readRDS(seurat_stat3_path)
seurat_nfkbia = readRDS(seurat_nfkbia_path)
seurat_etv7 = readRDS(seurat_etv7_path)
#get significant genes
seurat_etv7_sig = rownames(subset(seurat_etv7,p_val_adj < 0.1))
seurat_stat3_sig = rownames(subset(seurat_stat3,p_val_adj < 0.1))
seurat_nfkbia_sig = rownames(subset(seurat_nfkbia,p_val_adj < 0.1))
#get number of response genes analyzed per perturbation
grna = unfactor(unique(sceptre$grna_group))
n = c()
for(val in grna){
sceptre_stat3 = subset(sceptre,grna_group == val)
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
n = c(n,nrow(sceptre_stat3))
}
View(cbind(grna,n))
summary_sceptre = data.frame(grna = grna, num_significant = n)
results = kable(summary_sceptre,booktabs = TRUE, linesep = "",
caption = "SCEPTRE Pathway Enrichment Analysis With All Significant Genes")
kable_styling(results,position = "center", latex_options = "scale_down")
summary_sceptre = data.frame(grna = grna, num_significant = n)
results = kable(summary_sceptre,booktabs = TRUE, linesep = "",
caption = "SCEPTRE #Significant Genes vs Perturbation")
kable_styling(results,position = "center", latex_options = "scale_down")
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
#using absolute paths to download results since files exist on github
code_dir = .get_config_path("LOCAL_CODE_DIR")
data.dir = paste0(code_dir,"/sceptre2-manuscript/writeups/papalexi_analysis/")
sceptre_path = paste0(data.dir,
'sceptre_full_mrna_results_with_effect_size.rds')
seurat_stat3_path = paste0(data.dir,
'seurat_STAT3_results.rds')
seurat_nfkbia_path = paste0(data.dir,
'seurat_NFKBIA_results.rds')
seurat_etv7_path = paste0(data.dir,
'seurat_ETV7_results.rds')
sceptre = readRDS(sceptre_path)
seurat_stat3 = readRDS(seurat_stat3_path)
seurat_nfkbia = readRDS(seurat_nfkbia_path)
seurat_etv7 = readRDS(seurat_etv7_path)
#get significant genes
seurat_etv7_sig = rownames(subset(seurat_etv7,p_val_adj < 0.1))
seurat_stat3_sig = rownames(subset(seurat_stat3,p_val_adj < 0.1))
seurat_nfkbia_sig = rownames(subset(seurat_nfkbia,p_val_adj < 0.1))
#get number of response genes analyzed per perturbation
grna = unfactor(unique(sceptre$grna_group))
n = c()
for(val in grna){
sceptre_stat3 = subset(sceptre,grna_group == val)
sceptre_stat3$p_value_adj = p.adjust(sceptre_stat3$p_value,method = "BH")
sceptre_stat3 = subset(sceptre_stat3,p_value_adj < 0.1)
n = c(n,nrow(sceptre_stat3))
}
View(cbind(grna,n))
summary_sceptre = data.frame(grna = grna, num_significant = n)
results = kable(summary_sceptre,booktabs = TRUE, linesep = "",
caption = "SCEPTRE #Significant Genes vs Perturbation (FDR = 0.1)")
kable_styling(results,position = "center", latex_options = "scale_down")
summary_sceptre = data.frame(grna = grna, num_significant = n)
results = kable(summary_sceptre,booktabs = TRUE, linesep = "",
caption = "SCEPTRE #Significant Genes vs Perturbation (FDR = 0.1)")
kable_styling(results,position = "center", latex_options = "scale_down")
knitr::opts_chunk$set(echo = TRUE)
# Load packages.
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
library(mixtools)
library(stringr)
library(enrichR)
library(kableExtra)
library(varhandle)
# Download dataset using SeuratData.
options(timeout = 1000)
InstallData(ds = "thp1.eccite")
# Setup custom theme for plotting.
custom_theme <- theme(
plot.title = element_text(size=16, hjust = 0.5),
legend.key.size = unit(0.7, "cm"),
legend.text = element_text(size = 14))
# Load object.
eccite <- LoadData(ds = "thp1.eccite")
# Normalize protein.
eccite <- NormalizeData(
object = eccite,
assay = "ADT",
normalization.method = "CLR",
margin = 2)
# Prepare RNA assay for dimensionality reduction:
# Normalize data, find variable features and scale data.
DefaultAssay(object = eccite) <- 'RNA'
eccite <- NormalizeData(object = eccite) %>% FindVariableFeatures() %>% ScaleData()
# Run Principle Component Analysis (PCA) to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite)
# Run Uniform Manifold Approximation and Projection (UMAP) to visualize clustering in 2-D.
eccite <- RunUMAP(object = eccite, dims = 1:40)
# Generate plots to check if clustering is driven by biological replicate ID,
# cell cycle phase or target gene class.
p1 <- DimPlot(
object = eccite,
group.by = 'replicate',
label = F,
pt.size = 0.2,
reduction = "umap", cols = "Dark2", repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
xlab("UMAP 1") +
ylab("UMAP 2") +
custom_theme
p2 <- DimPlot(
object = eccite,
group.by = 'Phase',
label = F, pt.size = 0.2,
reduction = "umap", repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
p3 <- DimPlot(
object = eccite,
group.by = 'crispr',
pt.size = 0.2,
reduction = "umap",
split.by = "crispr",
ncol = 1,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
((p1 / p2 + plot_layout(guides = 'auto')) | p3 )
# Calculate perturbation signature (PRTB).
eccite<- CalcPerturbSig(
object = eccite,
assay = "RNA",
slot = "data",
gd.class ="gene",
nt.cell.class = "NT",
reduction = "pca",
ndims = 40,
num.neighbors = 20,
split.by = "replicate",
new.assay.name = "PRTB")
# Prepare PRTB assay for dimensionality reduction:
# Normalize data, find variable features and center data.
DefaultAssay(object = eccite) <- 'PRTB'
# Use variable features from RNA assay.
VariableFeatures(object = eccite) <- VariableFeatures(object = eccite[["RNA"]])
eccite <- ScaleData(object = eccite, do.scale = F, do.center = T)
# Run PCA to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite, reduction.key = 'prtbpca', reduction.name = 'prtbpca')
# Run UMAP to visualize clustering in 2-D.
eccite <- RunUMAP(
object = eccite,
dims = 1:40,
reduction = 'prtbpca',
reduction.key = 'prtbumap',
reduction.name = 'prtbumap')
# Generate plots to check if clustering is driven by biological replicate ID,
# cell cycle phase or target gene class.
q1 <- DimPlot(
object = eccite,
group.by = 'replicate',
reduction = 'prtbumap',
pt.size = 0.2, cols = "Dark2", label = F, repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q2 <- DimPlot(
object = eccite,
group.by = 'Phase',
reduction = 'prtbumap',
pt.size = 0.2, label = F, repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q3 <- DimPlot(
object = eccite,
group.by = 'crispr',
reduction = 'prtbumap',
split.by = "crispr",
ncol = 1,
pt.size = 0.2,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
# Visualize plots.
(q1 / q2 + plot_layout(guides = 'auto') | q3)
# Run mixscape.
eccite <- RunMixscape(
object = eccite,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
# Calculate percentage of KO cells for all target gene classes.
df <- prop.table(table(eccite$mixscape_class.global, eccite$NT),2)
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KO"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("NT", "NP", "KO"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2),
function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]
p1 <- ggplot(df3, aes(x = guide_number, y = value*100, fill= Var1)) +
geom_bar(stat= "identity") +
theme_classic()+
scale_fill_manual(values = c("grey49", "grey79","coral1")) +
ylab("% of cells") +
xlab("sgRNA")
p1 + theme(axis.text.x = element_text(size = 18, hjust = 1),
axis.text.y = element_text(size = 18),
axis.title = element_text(size = 16),
strip.text = element_text(size=16, face = "bold")) +
facet_wrap(vars(gene),ncol = 5, scales = "free") +
labs(fill = "mixscape class") +theme(legend.title = element_text(size = 14),
legend.text = element_text(size = 12))
marker_all = FindMarkers(eccite,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
?FindAllMarkers
marker_all = FindMarkers(eccite,ident.1 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
marker_all = FindMarkers(eccite,ident.1 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
View(marker_all)
unique(idents(eccite))
grna = unique(Idents(eccite))
grna
grna = unfactor(unique(Idents(eccite)))
grna
substr("NT",1,nchar("NT")-3)
length(substr("NT",1,nchar("NT")-3))
nchar(substr("NT",1,nchar("NT")-3))
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
#Idents(ecite) = grna
#val = Idents(eccite)[which(Idents(eccite))]
#marker_all = FindMarkers(eccite,ident.1 = 'NT',
#assay = 'RNA',only.pos = F,base = exp(1),
#logfc.threshold = 0)
grna
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[counter] = marker_all
counter = counter + 1
}
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[counter] = marker_all
counter = counter + 1
}
View(val)
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
val[[counter]] = marker_all
counter = counter + 1
}
eccite_copy = eccite
grna = unfactor((Idents(eccite)))
grna = substr(grna,1,nchar(grna)-3)
grna[nchar(grna)==0] = 'NT'
Idents(eccite_copy) = grna
prtb = unique(grna)[prtb != 'NT']
diff_genes <- vector(mode='list', length=length(prtb))
names(diff_genes) = prtb
counter = 1
for(val in prtb){
marker_all = FindMarkers(eccite_copy,ident.1 = val,ident.2 = 'NT',
assay = 'RNA',only.pos = F,base = exp(1),
logfc.threshold = 0)
diff_genes[[counter]] = marker_all
counter = counter + 1
}
dir = "/Users/kmason/code/sceptre2-manuscript/writeups/papalexi_analysis/"
saveRDS(diff_genes ,paste0(dir,"seurat_all_perturbations_results.rds"))
library(sceptre3)
remove.packages("sceptre3")
