remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
modality <- remaining_modalities[1]
modality
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
i
i - 1
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
i <- 1
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
gene_exp
head(gene_exp)
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
n_nonzero_cells
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
gene_exp
sum(gene_exp >= 1)
gene_exp
head(Df)
head(df)
paper
papers
paper <- papers[1]
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
paper
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset
datasets
paper
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
remaining_modalities
modality
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
curr_modality
x <- curr_modality[[seq(1, nrow(curr_modality)),]]
class(x)
x@x |> length()
nrow(x) * ncol(x)
length(mat@x)/(nrow(mat) * ncol(mat))
mat <- x
length(mat@x)/(nrow(mat) * ncol(mat))
paper
length(mat@x)/(nrow(mat) * ncol(mat))
data.frame(prop_nonzero = length(mat@x)/(nrow(mat) * ncol(mat)),
paper = paper, dataset = dataset)
###################################################################
# Second: compute the fraction of cells that is nonzero per dataset
###################################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
mat <- curr_modality[[seq(1, nrow(curr_modality)),]]
data.frame(prop_nonzero = length(mat@x)/(nrow(mat) * ncol(mat)),
paper = paper, dataset = dataset)
})
})
})
df
###################################################################
# Second: compute the fraction of cells that is nonzero per dataset
###################################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
mat <- curr_modality[[seq(1, nrow(curr_modality)),]]
data.frame(prop_nonzero = length(mat@x)/(nrow(mat) * ncol(mat)),
paper = paper, dataset = dataset)
})
})
}) |> unlist() |> data.table::rbindlist()
df
df |> unlist()
df
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
mat <- curr_modality[[seq(1, nrow(curr_modality)),]]
data.frame(prop_nonzero = length(mat@x)/(nrow(mat) * ncol(mat)),
paper = paper, dataset = dataset, modality = modality)
})
})
})
df
df
df |> unlist()
df
df |> data.table::rbindlist()
df
df |> unlist(recursive = FALSE)
df |> unlist(recursive = FALSE) |> unlist(recursive = FALSE)
df |> unlist(recursive = FALSE) |> unlist(recursive = FALSE) |> data.table::rbindlist()
###################################################################
# Second: compute the fraction of cells that is nonzero per dataset
###################################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
mat <- curr_modality[[seq(1, nrow(curr_modality)),]]
data.frame(prop_zero = 1 - length(mat@x)/(nrow(mat) * ncol(mat)),
paper = paper, dataset = dataset, modality = modality)
})
})
}) |> unlist(recursive = FALSE) |> unlist(recursive = FALSE) |> data.table::rbindlist()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "frac_entries_zero.rds")
head(df)
df
head(Df)
head(df)
to_save_fp
saveRDS(object = df, file = to_save_fp)
head(Df)
head(df)
df
saveRDS(object = df, file = to_save_fp)
rbinom(n = 1, size = 50, prob = 0.2)
rbinom(n = 100, size = 50, prob = 0.2)
rbinom(n = 100, size = 50, prob = 0.2) |> hist()
rbinom(n = 100, size = 50, prob = 0.2)
rbinom(n = 50, size = 50, prob = 0.2)
rbinom(n = 1, size = 50, prob = 0.2)
x <- rbinom(n = 1, size = 50, prob = 0.2)
qbinom(p = 0.9, size = 50, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 51, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 52, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 53, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 60, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 50, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 52, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 51, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 50, prob = 0.2, lower.tail = FALSE)
qbinom(p = 0.9, size = 51, prob = 0.2, lower.tail = FALSE)
sparsity_levels <- c(0.8, 0.3, 0.01)
fraction_pairs_survive_qc <- seq(from = 0.5, to = 0.95, length.out = 30)
fraction_pairs_survive_qc
fraction_pairs_survive_qc <- seq(from = 0.5, to = 0.95, length.out = 35)
fraction_pairs_survive_qc
sparsity_levels <- c(0.8, 0.3, 0.01)
fraction_pairs_surviving_qc <- seq(from = 0.5, to = 0.95, length.out = 35)
sparsity_levels
fraction_pairs_surviving_qc
N_NONZERO_TRT_THRESH <- 7
sparsity_levels <- c(0.8, 0.3, 0.01)
fraction_pairs_pass_qc <- seq(from = 0.5, to = 0.95, length.out = 35)
df <- expand.grid(sparsity_level = sparsity_levels,
fraction_pairs_surviving_qc = fraction_pairs_pass_qc)
df
head(fraction_pairs_pass_qc)
head(df)
sparsity_levels <- c(0.8, 0.3, 0.01)
fraction_pairs_pass_qc <- seq(from = 0.5, to = 0.95, length.out = 35)
N_NONZERO_TRT_THRESH <- 7
df <- expand.grid(sparsity_level = sparsity_levels,
fraction_pairs_surviving_qc = fraction_pairs_pass_qc)
head(drf)
head(df)
n_cells_required <- integer(nrow(df))
n_cells_required
sparsity_levels <- c(0.8, 0.3, 0.01)
percents_pass <- seq(from = 0.5, to = 0.95, length.out = 35)
N_NONZERO_TRT_THRESH <- 7
sparsity_levels <- c(0.8, 0.3, 0.01)
fractions_pass <- seq(from = 0.5, to = 0.95, length.out = 35)
N_NONZERO_TRT_THRESH <- 7
df <- expand.grid(sparsity_level = sparsity_levels,
fraction_pairs_surviving_qc = fraction_pairs_pass_qc)
n_cells_required <- integer(nrow(df))
sparsity_level
sparsity_levels
fractions_pass
sparsity_level <- sparsity_levelsp1
sparsity_level <- sparsity_levels[1]
fraction_pass <- fractions_pass[1]
sparsity_level
fraction_pass
counter <- 1L
sparsity_level
fraction_pass
sparsity_level
qbinom(p = fraction_pass, size = curr_n_cells, prob = 1 - sparsity_level, lower.tail = FALSE)
# determine number of cells s.t. probability the pair passes QC exceeds fraction_pass
curr_n_cells <- 1L
qbinom(p = fraction_pass, size = curr_n_cells, prob = 1 - sparsity_level, lower.tail = FALSE)
# determine number of cells s.t. probability the pair passes QC exceeds fraction_pass
curr_n_cells <- 1L
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
pass_qc
# determine number of cells s.t. probability the pair passes QC exceeds fraction_pass
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
curr_n_cells
curr_n_cells
sparsity_level
fraction_pass
sparsity_levels
fractions_pass
sparsity_levels
fractions_pass
sparsity_levels
fractions_pass
curr_n_cells <- 1L
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
curr_n_cells
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, curr_n_cells = curr_n_cells)
sparsity_levels <- c(0.8, 0.3, 0.01)
fractions_pass <- seq(from = 0.5, to = 0.95, length.out = 35)
sparsity_levels <- c(0.8, 0.3, 0.01)
fractions_pass <- seq(from = 0.5, to = 0.95, length.out = 35)
N_NONZERO_TRT_THRESH <- 7
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, curr_n_cells = curr_n_cells)
})
})
df
head(dt)
head(df)
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE)
df
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist()
df
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE)
df
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist(recursive = FALSE)
df
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist(recursive = FALSE) |> data.table::rbindlist()
df
sparsity_levels <- c(0.8, 0.3, 0.01)
fractions_pass <- seq(from = 0.5, to = 0.99, by = 0.01)
fractions_pass
sparsity_levels
sparsity_levels <- c(0.8, 0.3, 0.01)
fractions_pass <- seq(from = 0.5, to = 0.99, by = 0.01)
N_NONZERO_TRT_THRESH <- 7
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist(recursive = FALSE) |> data.table::rbindlist()
df
head(df)
df |> dplyr::filter(fraction_pass == .99)
df |> dplyr::filter(fraction_pass == .98)
df |> dplyr::filter(fraction_pass == .97)
df |> dplyr::filter(fraction_pass == .98)
df |> dplyr::filter(fraction_pass == .9)
head(df)
df
library(ggplot2)
head(Df)
head(df)
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level))
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line()
head(sparsity_level)
head(df)
library(tidyverse)
head(Df)
head(df)
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass, n_cells = curr_n_cells)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist(recursive = FALSE) |>
data.table::rbindlist() |>
mutate(sparsity_level = factor(sparsity_level))
head(df)
df$sparsity_level
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line()
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line() + theme_bw()
qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= N_NONZERO_TRT_THRESH
sparsity_level
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_point() + theme_bw()
qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE)
head(df)
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells)) +
geom_point() + theme_bw() + facet_grid(.~sparsity_level)
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_point() + theme_bw()
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line() + theme_bw() +
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line() + theme_bw()
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line() + geom_point() + theme_bw()
# make plot
ggplot(data = df, mapping = aes(x = fraction_pass, y = n_cells, col = sparsity_level)) +
geom_line() + theme_bw()
# set file paths, load results, source helpers
source(paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"))
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.research_config")
