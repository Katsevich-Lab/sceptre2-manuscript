labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
comp_df <- res_proc |>
dplyr::select(undercover_grna, Dataset = dataset_rename, Method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(Dataset, Method) |>
dplyr::summarize(m_clock_time = mean(clock_time)/60, m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"),
labels = c("Time (m)", "RAM (GB)"))) |>
dplyr::mutate(value = ifelse(value < 1, 1.05, value))
my_fct_order <- comp_df |>
dplyr::filter(Method == "Schraivogel Method", metric == "RAM (GB)") |>
dplyr::arrange(value) |>
dplyr::pull(Dataset)
comp_df <- comp_df |>
dplyr::mutate(Dataset = factor(x = Dataset, levels = my_fct_order, labels = my_fct_order)) |>
dplyr::filter(Dataset != "Liscovitch Method")
p_undercover_comp <- ggplot(data = comp_df, mapping = aes(x = Method, y = value, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
facet_wrap(.~metric, scales = "free_y") +
ylab("") + xlab("Method") +
theme_bw() +
scale_y_continuous(trans='log2')
# save plots
ggsave(filename = paste0(fig_dir, "undercov_grna_trans_grp2.png"),
plot = p_undercover_stat_trans, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
head(res_proc)
# other error metrics: number of rejected pairs after Bonf correction
res_proc |> dplyr::group_by(dataset, method)
# other error metrics: number of rejected pairs after Bonf correction
alpha <- 0.1
alpha
alpha/length(p_value)
# other error metrics: number of rejected pairs after Bonf correction
alpha <- 0.1
res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n()))
res_proc
res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n()))
bonf_correct <- res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n()))
bonf_correct
bonf_correct
bonf_correct <- res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n())) |>
dplyr::summmarize(n_reject = sum(reject))
bonf_correct <- res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n())) |>
dplyr::summarize(n_reject = sum(reject))
bonf_correct
View(bonf_correct)
bonf_correct |> dplyr::print(n = 100)
bonf_correct |> dplyr::show(n = 100)
bonf_correct |> dplyr::print()
bonf_correct
bonf_correct |> as.data.frame()
ggsave(filename = paste0(fig_dir, "undercov_grna_untrans_grp2.png"),
plot = p_undercover_stat_untrans, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
p_undercover_stat_untrans <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10, size = 0.8) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
ggsave(filename = paste0(fig_dir, "undercov_grna_untrans_grp2.png"),
plot = p_undercover_stat_untrans, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
undercover_res
undercover_res
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_2.rds")
undercover_res <- readRDS(undercover_res_fp)
undercover_res
undercover_res <- readRDS(undercover_res_fp) |> dplyr::select(-clock_time, -max_ram)
undercover_res
undercover_res |> dplyr::select(method == "permutation_test")
undercover_res |> dplyr::filter(method == "permutation_test")
perm_res <- undercover_res |> dplyr::filter(method == "permutation_test")
perm_res
tail(perm_res)
perm_res |> dplyr::filter(dataset == "frangieh_ifn_gamma_gene", method = "permutation_test")
perm_res |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene")
perm_res |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene") |>
dplyr::pull(p_value)
perm_res |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene") |>
dplyr::pull(p_value) |> hist()
perm_res$dataset |> table()
perm_res |>
dplyr::filter(dataset == "frangieh_co_culture_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "frangieh_control_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr11_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr8_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "schraivogel_ground_truth_perturbseq_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "schraivogel_ground_truth_tapseq_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "simulated_experiment_1_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "schraivogel_ground_truth_tapseq_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "frangieh_co_culture_gene") |>
dplyr::pull(p_value) |> hist()
perm_res |>
dplyr::filter(dataset == "frangieh_co_culture_gene") |>
dplyr::pull(p_value) |> min()
1/1000
1/10001
1/10000
1/100001
perm_res |>
dplyr::filter(dataset == "frangieh_co_culture_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "frangieh_control_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr11_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr8_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_ground_truth_perturbseq_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_ground_truth_tapseq_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "simulated_experiment_1_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr11_gene") |>
dplyr::pull(p_value) |> min()
perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr11_gene") |>
dplyr::pull(p_value)
p_vals <- perm_res |>
dplyr::filter(dataset == "schraivogel_enhancer_screen_chr11_gene") |>
dplyr::pull(p_value)
p_vals
min(p_vals)
sum(p_vals == min(p_vals))
perm_res$dataset |> table()
p_vals <- perm_res |>
dplyr::filter(dataset == "simulated_experiment_1_gene") |>
dplyr::pull(p_value)
p_vals
p_vals == min(p_vals)
sum(p_vals == min(p_vals))
p_vals <- perm_res |>
dplyr::filter(dataset == "simulated_experiment_1_gene") |>
dplyr::pull(p_value)
hist(p_vals)
perm_res$dataset |> table()
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein")
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value)
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value)
p_vals
perm_res <- undercover_res |> dplyr::filter(method == "permutation_test")
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value)
p_vals
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_2.rds")
undercover_res <- readRDS(undercover_res_fp) |> dplyr::select(-clock_time, -max_ram)
perm_res <- undercover_res |> dplyr::filter(method == "permutation_test")
perm_res
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_protein") |>
dplyr::pull(p_value)
p_vals
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::pull(p_value)
p_vals
head(p_vals)
min(p_vals)
order(p_Vals)
order(p_vals)
sort(p_vals)
sort(p_vals) |> head(1009)
perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene")
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene",
p_value == 0.000999001)
p_vals
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::arrange(p_value)
p_vals
head(p_vals)
args
dataset_name <- ""papalexi/eccite_screen/gene""
dataset_name <- "papalexi/eccite_screen/gene"
undercover_ntc_name_in <- "NTg3,NTg9"
method_name <- "permutation_test"
grna_modality <- "assignment"
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- grna_odm |> get_feature_covariates()
grna_feature_covariates[undercover_ntc_name, "target"] <- "undercover"
if (!("non-targeting" %in% grna_feature_covariates$target)) {
stop("After performing label swap, `non-targeting` is no longer string in the `target` column.")
}
grna_odm_swapped <- grna_odm |> mutate_feature_covariates(target = grna_feature_covariates$target)
grna_odm_swapped
# obtain the (response, grna) pairs to analyze
response_grna_group_pairs <- data.frame(response_id = get_feature_ids(response_odm),
grna_group = "undercover")
# verify that "method" is a function within the lowmoi package
if (!exists(x = method_name, where = "package:lowmoi", mode = "function")) {
stop(paste0("The method `", method_name, "` is not present in the `lowmoi` package. Either add this method to the package or update the `data_method_pair_file.groovy` file."))
}
# verify that the formal arguments of "method" are correct
formal_args <- names(formals(method_name))
if (!all(c("response_odm", "grna_odm", "response_grna_group_pairs") %in% formal_args)) {
stop(paste0("The formal arguments of `", method_name, "` must include `response_odm`, `grna_odm`, and `response_grna_group_pairs`."))
}
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
args
optional_args <- NULL
to_pass_list <- list(response_odm = response_odm, grna_odm = grna_odm_swapped, response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
method_name
to_pass_list
load_all("~/research_code/lowmoi/")
response_odm <- to_pass_list[[1]]
grna_odm <- to_pass_list[[2]]
response_grna_group_pairs <- to_pass_list[[3]]
n_rep = 1000
progress = TRUE
response_odm
grna_odm
response_grna_group_pairs
response_grna_group_pairs <- dplyr::filter(response_id == "CCDC88A")
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_2.rds")
undercover_res <- readRDS(undercover_res_fp)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/")
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::arrange(p_value)
head(p_vals)
response_grna_group_pairs
p_vals <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::arrange(p_value)
p_vals_df <- perm_res |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene") |>
dplyr::arrange(p_value)
head(p_vals_df)
response_odm
grna_odm
response_grna_group_pairs
response_grna_group_pairs |> dplyr::filter(response_id == "PSMD14")
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(response_id == "PSMD14")
response_odm
grna_odm
grna_odm |> ondisc::get_feature_covariates() |> head()
grna_odm |> ondisc::get_feature_covariates()
# convert n_rep to integer type (if necessary)
if (is.character(n_rep)) n_rep <- as.integer(n_rep)
if (is.character(progress)) progress <- as.logical(progress)
# obtain the library sizes
lib_sizes <- get_library_sizes(response_odm)
# define the permutation test function
two_sample_test <- function(target_cells, control_cells, target_cell_indices, control_cell_indices) {
target_cell_sizes <- lib_sizes[target_cell_indices]
control_cell_sizes <- lib_sizes[control_cell_indices]
# create data frame for permutation
df <- data.frame(exp = c(target_cells, control_cells),
pert_indicator = c(rep(1, length(target_cells)), rep(0, length(control_cells))),
lib_size = (c(target_cell_sizes, control_cell_sizes)))
# compute beta on ground truth data
beta_star <- compute_log_fold_change(df)
# compute permuted test statistics
beta_null <- replicate(n = n_rep, expr = {
df$pert_indicator <- sample(df$pert_indicator)
compute_log_fold_change(df)
})
# compute the p-value via call to fit skew t (in sceptre)
p_val <- sceptre:::fit_skew_t(beta_null, beta_star, "both")$out_p
return(p_val)
}
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
p_vals_df |> head()
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
load_all("~/research_code/lowmoi/")
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
# run the permutation test
res <- abstract_two_sample_test(response_odm, grna_odm, response_grna_group_pairs, two_sample_test, progress)
res
res
response_odm
grna_odm
response_grna_group_pairs
two_sample_test
progress
abstract_two_sample_test
abstract_two_sample_test
res
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_2.rds")
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_2.rds")
undercover_res <- readRDS(undercover_res_fp)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/")
# combine Schraivogel enh8 and enh11
undercover_res$dataset <- undercover_res$dataset |>
forcats::fct_recode(schraivogel_enhancer_screen = "schraivogel_enhancer_screen_chr11_gene",
schraivogel_enhancer_screen = "schraivogel_enhancer_screen_chr8_gene")
# load packages
library(ggplot2)
library(katlabutils)
# i) confirm number of p-values coincides across methods for a given dataset
undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::summarize(n_pvals_coincide = all(diff(count) == 0)) |>
dplyr::pull(n_pvals_coincide) |> all()
# i) confirm there are no NAs
all(undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = sum(is.na(p_value))) |>
dplyr::pull(count) == 0)
############################
# 2. Create the p-value plot
############################
res_proc <- undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::mutate(n_pairs = dplyr::n(),
dataset_rename = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = dataset)),
dataset_rename_w_pairs = paste0(dataset_rename, " (", n_pairs[1], " pairs)"),
Method = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = method)))
# other error metrics: number of rejected pairs after Bonf correction
alpha <- 0.1
# other error metrics: number of rejected pairs after Bonf correction
alpha <- 0.1
# other error metrics: number of rejected pairs after Bonf correction
alpha <- 0.1
bonf_correct <- res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n())) |>
dplyr::summarize(n_reject = sum(reject))
bonf_correct
bonf_correct <- res_proc |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(reject = (p_value < alpha/dplyr::n())) |>
dplyr::summarize(n_reject = sum(reject)) |>
dplyr::ungroup()
bonf_correct
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(x = method, y = n_reject)) +
ggplot2::geom_bar() +
facet_wrap(~dataset) +
theme_bw()
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(y = n_reject, colour = method)) +
ggplot2::geom_bar() +
facet_wrap(~dataset) +
theme_bw()
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(y = n_reject, colour = method)) +
ggplot2::geom_col() +
facet_wrap(~dataset) +
theme_bw()
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(x = n_reject, colour = method)) +
ggplot2::geom_col() +
facet_wrap(~dataset) +
theme_bw()
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(x = method, y = n_reject)) +
ggplot2::geom_col() +
facet_wrap(~dataset) +
theme_bw()
bonf_correct |>
ggplot2::ggplot(ggplot2::aes(x = method, y = n_reject)) +
ggplot2::geom_col() +
facet_wrap(~dataset) +
ggplot2::scale_y_log10() +
theme_bw()
bonf_correct
bonf_correct |> as.data.frame()
bonf_correct |> dplyr::filter(method == "seurate_de")
bonf_correct |> dplyr::filter(method == "seurat_de")
res_proc |> head()
p_undercover_stat_untrans <- ggplot(data = res_proc |> dplyr::filter(method == "permutation_test"), mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10, size = 0.8) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat_untrans
