length(grps)
grps
grps
length(Grps)
length(grps)
lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+"))
lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
9
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
9
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
frac_undercover
frac_undercover <- 0.1
frac_undercover
frac_undercover <- 0.05
frac_undercover <- 0.1
frac_undercover <- 0.2
frac_undercover <- 0.6
frac_undercover <- 0.5
frac_undercover <-1
frac_undercover <- 1
grouped
grouped <- TRUE
grouped
one_ntc <- TRUE
grna_modality
grna_modality <- "assignment"
frac_undercover <- as.numeric(args[4])
grouped
one_ntc
grouped <- TRUE
datasets
grouped
one_ntc
# Get CL args
args <- commandArgs(trailingOnly = TRUE)
args
args <- c("false", "assignment", "FALSE", "0.2", "frangieh/co_culture/gene", "frangieh/control/gene", "frangieh/ifn_gamma/gene", "papalexi/eccite_screen/gene", "papalexi/eccite_screen/protein")
args
one_ntc <- as.logical(args[1])
one_ntc
grna_modality <- args[2]
grna_modality
is_grouped <- as.logical(args[3])
is_grouped
frac_undercover <- as.numeric(args[4]) # IGNORED IF grouped = FALSE
frac_undercover
class(frac_undercover)
datasets <- args[seq(5, length(args))]
datasets
one_ntc
grna_modality
is_grouped
frac_undercover
sceptre2_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_offsite_dir
out <- NULL
dataset_name
datasets
dataset_name <- datasets[1]
dataset_name
grna_dataset_name <- lowmoi::get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_feature_covariates <- lowmoi::load_dataset_modality(grna_dataset_name) |> get_feature_covariates()
grna_dataset_name
gRNA_feature_covariates
gRNA_feature_covariates |> head()
# some basic correctness checks
if (!("target_type" %in% colnames(gRNA_feature_covariates))) {
stop("The column `target_type` must be present in the feature covariates data frame of the gRNA ondisc matrix.")
}
if (!("non-targeting" %in% gRNA_feature_covariates$target_type)) {
stop("The `target_type` column of the gRNA feature covariates data frame must have at least one entry `non-targeting`.")
}
out
dataset_name
datasets
grna_dataset_name <- lowmoi::get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_feature_covariates <- lowmoi::load_dataset_modality(grna_dataset_name) |> get_feature_covariates()
grna_dataset_name
gRNA_feature_covariates
# some basic correctness checks
if (!("target_type" %in% colnames(gRNA_feature_covariates))) {
stop("The column `target_type` must be present in the feature covariates data frame of the gRNA ondisc matrix.")
}
if (!("non-targeting" %in% gRNA_feature_covariates$target_type)) {
stop("The `target_type` column of the gRNA feature covariates data frame must have at least one entry `non-targeting`.")
}
# get NTC names
ntc_names <- gRNA_feature_covariates |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
ntc_names
ntc_names
ntc_group_names <- ntc_names
ntc_group_names
n_groups <- length(ntc_names)
n_groups
grps <- NULL
ntc_group_names <- ntc_names
ntc_group_names
length(ntc_group_names)
set.seed(4)
n_groups <- length(ntc_names)
n_groups
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
frac_undercover * n_groups
group_size <- round(frac_undercover * n_groups)
group_size
n_groups
gruop_size
group_size
grps <- NULL
ntc_group_names <- lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
ntc_group_names
set.seed(4)
n_groups <- length(ntc_names)
group_size <- round(frac_undercover * n_groups)
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
ntc_group_names <- lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
ntc_group_names
head(ntc_group_names)
ntc_group_names
dataset_name
out <- c(out, paste(dataset_name, ntc_group_names))
out
out
head(out)
args <- c("frangieh/control/gene", "NO-SITE-107+NO-SITE-304+NO-SITE-386+NO-SITE-544+NO-SITE-547+NO-SITE-716+NO-SITE-836+ONE-NON-GENE-SITE-231+ONE-NON-GENE-SITE-409+ONE-NON-GENE-SITE-594+ONE-NON-GENE-SITE-598+ONE-NON-GENE-SITE-640+ONE-NON-GENE-SITE-658+ONE-NON-GENE-SITE-736+ONE-NON-GENE-SITE-859", "mimosca", "assignment", "n_rep=50")
args
args
dataset_name <- args[1]
undercover_ntc_name <- args[2]
method_name <- args[3]
grna_modality <- args[4]
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
grna_modality
length(args)
args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and gRNA expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
gRNA_odm <- load_dataset_modality(grna_dataset_name)
gRNA_odm
response_odm
gRNA_odm |> get_feature_covariates()
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
# perform the label swap
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
gRNA_feature_covariates
head(gRNA_feature_covariates)
# perform the label swap
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
head(gRNA_feature_covariates)
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
tab_target_types
new_label <- (tab_target_types[names(tab_target_types) != "non-targeting"] |> names())[1]
new_label
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
# perform the label swap
strsplit(undercover_ntc_name, "+")
# perform the label swap
strsplit(x = undercover_ntc_name, split = "+", fixed = TRUE)
# perform the label swap
strsplit(x = undercover_ntc_name, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name_in <- args[2]
undercover_ntc_name_in
undercover_ntc_name_in
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name
undercover_ntc_name_in <- undercover_ntc_name_in[1]
undercover_ntc_name_in
undercover_ntc_name_in <- "NO-SITE-107"
undercover_ntc_name_in
undercover_ntc_name_in
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name
head(undercover_ntc_name)
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
args <- c("frangieh/control/gene", "NO-SITE-107+NO-SITE-304+NO-SITE-386+NO-SITE-544+NO-SITE-547+NO-SITE-716+NO-SITE-836+ONE-NON-GENE-SITE-231+ONE-NON-GENE-SITE-409+ONE-NON-GENE-SITE-594+ONE-NON-GENE-SITE-598+ONE-NON-GENE-SITE-640+ONE-NON-GENE-SITE-658+ONE-NON-GENE-SITE-736+ONE-NON-GENE-SITE-859", "mimosca", "assignment", "n_rep=50")
args
dataset_name <- args[1]
dataset_name <- args[1]
undercover_ntc_name_in <- args[2]
method_name <- args[3]
grna_modality <- args[4]
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
dataset_name
undercover_ntc_name_in
method_name <- args[3]
method_name
grna_modality <- args[4]
grna_modality
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and gRNA expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
gRNA_odm
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
head(undercover_ntc_name)
undercover_ntc_name
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
head(gRNA_feature_covariates)
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
tab_target_types
new_label <- (tab_target_types[names(tab_target_types) != "non-targeting"] |> names())[1]
new_label
undercover_ntc_name
head(gRNA_feature_covariates)
gRNA_feature_covariates
tail(gRNA_feature_covariates)
gRNA_feature_covariates[undercover_ntc_name, "target_type"] <- new_label
gRNA_feature_covariates |> dplyr::filter(target == "gene")
gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
x <- gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
undercover_ntc_name
x[undercover_ntc_name,]
gRNA_odm_swapped <- gRNA_odm |> mutate_feature_covariates(target_type = gRNA_feature_covariates$target_type)
gRNA_odm_swapped
get_feature_ids(response_odm) |> head()
undercover_ntc_name
response_gRNA_group_pairs <- data.frame(response_id = get_feature_ids(response_odm),
gRNA_group = undercover_ntc_name_in)
head(response_gRNA_group_pairs)
head(response_gRNA_group_pairs)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
papers
# set params
N_CELLS_PER_GRNA_THRESH <- 10
FRAC_EXPRESSED_TRHESH <- 0.005
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
# 1) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + batch + phase + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
nb_regression_formula_objs <- list(frangieh = formula(~ offset(log(n_umis)) + log(n_nonzero) + phase + batch),
schraivogel = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch),
papalexi = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch + phase + p_mito),
liscovitch = formula(~ offset(log(n_fragments))),
simulated = formula(~ offset(log(n_umis)) + log(n_nonzero)))
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# This script performs cell-wise QC.
# We (i) restrict attention to cells that received a single gRNA (as determined by the original authors) and
# (ii) filter for cells that passed other QC metrics implemented by the original authors (stored in the "passed_qc" column).
# set params
N_CELLS_PER_GRNA_THRESH <- 10
FRAC_EXPRESSED_TRHESH <- 0.005
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
# 1) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + batch + phase + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
nb_regression_formula_objs <- list(frangieh = formula(~ offset(log(n_umis)) + log(n_nonzero) + phase + batch),
schraivogel = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch),
papalexi = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch + phase + p_mito),
liscovitch = formula(~ offset(log(n_fragments))),
simulated = formula(~ offset(log(n_umis)) + log(n_nonzero)))
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# This script performs cell-wise QC.
# We (i) restrict attention to cells that received a single gRNA (as determined by the original authors) and
# (ii) filter for cells that passed other QC metrics implemented by the original authors (stored in the "passed_qc" column).
# set params
N_CELLS_PER_GRNA_THRESH <- 10
FRAC_EXPRESSED_TRHESH <- 0.005
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
# 1) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + batch + phase + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
nb_regression_formula_objs <- list(frangieh = formula(~ offset(log(n_umis)) + log(n_nonzero) + phase + batch),
schraivogel = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch),
papalexi = formula(~ offset(log(n_umis)) + log(n_nonzero) + batch + phase + p_mito),
liscovitch = formula(~ offset(log(n_fragments))),
simulated = formula(~ offset(log(n_umis)) + log(n_nonzero)))
# 2) loop over datasets, loading all modalities
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# load the dataset into a multimodal ODM
print(paste0("paper: ", paper, " dataset: ", dataset))
mm_odm <- read_multimodal_odm(paper, dataset)
# i. perform cell QC; restrict attention to 1 gRNA/cell and "passed_qc" cells (if applicable)
global_cell_covariates <- mm_odm |> get_cell_covariates()
cell_logical_v <- global_cell_covariates$grna_assignment_n_nonzero == 1
passed_qc_v <- grepl(pattern = "passed_qc", x = colnames(global_cell_covariates))
if (any(passed_qc_v)) {
passed_qc <- global_cell_covariates[, which(passed_qc_v)[1]]
cell_logical_v <- cell_logical_v & passed_qc
}
mm_odm_sub <- mm_odm[,cell_logical_v]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality: keep features expressed in N_CELLS_PER_GRNA_THRESH cells. Also, add a "gRNA_assigned" column to the cell covariate matrix.
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
grna_assign_mat <- lowmoi::load_whole_odm(grna_assign_modality)
gRNA_assignments <- apply(X = grna_assign_mat,
MARGIN = 2,
FUN = function(col) names(which.max(col))) |> unname()
grna_assign_modality <- grna_assign_modality |>
mutate_cell_covariates(assigned_gRNA = gRNA_assignments)
n_cells_per_gRNA <- Matrix::rowSums(grna_assign_mat)
grnas_to_keep <- n_cells_per_gRNA >= N_CELLS_PER_GRNA_THRESH
mm_odm_sub@modalities[["grna_assignment"]] <- grna_assign_modality[grnas_to_keep,]
# grna expression modality (if applicable): keep the same features as above
if ("grna_expression" %in% modalities) {
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
mm_odm_sub@modalities[["grna_expression"]] <- grna_expression_modality[grnas_to_keep,]
}
# response modalities: keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
exp_mat <- lowmoi::load_whole_odm(modality_odm)
frac_expressed <- Matrix::rowSums(exp_mat >= 1)/ncol(exp_mat)
feats_to_keep <- frac_expressed > FRAC_EXPRESSED_TRHESH
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_gRNA = gsub(pattern = "_", replacement = "-", x = assigned_gRNA, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Finally, write the modified multimodal odm
save_multimodal_odm(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
}
}
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
papers
library(ondisc)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- c("gasperini")
FRAC_EXPRESSED_TRHESH <- 0.005
N_CELLS_PER_GRNA_THRESH <- 10
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
paper <- papers[1]
paper
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
datasets
dataset <- datasets[1]
print(paste0("paper: ", paper, " dataset: ", dataset))
datasets
dataset
x <- matrix(rnorm(10000 * 10000), nrow = 10000, ncol = 10000)
x <- matrix(rnorm(100000 * 10000), nrow = 10000, ncol = 10000)
x <- matrix(rnorm(100000 * 10000), nrow = 100000, ncol = 10000)
dim(X)
dim(x)
