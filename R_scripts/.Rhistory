datasets
dataset <- datasets[1]
dataset
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
N_GENES <- 20
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 20
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_seq")
data.frame(theta = thetas, p = fit_ps)
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
dataset <- "papalexi/eccite_seq"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 20
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
head(res)
tail(res)
tail(res, 100)
library(katlabutils)
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8)
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res
res |>
filter(dataset == "papalexi/eccite_screen")
res |>
filter(dataset == "papalexi/eccite_screen") |>
pull(p)
res |>
filter(dataset == "papalexi/eccite_screen") |>
pull(p) |> hist()
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 500
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 20000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
dim(gene_expression_mat)
gene_expression_mat[1,]
gene_expression_mat[2,]
mean(gene_expression_mat == 0)
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
head(mus)
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
head(mus)
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
table(grna_assignments)
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 15000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
table(grna_assignments)
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
table(grna_assignments)
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(grna_expression_mat >= 1) == 1)
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
dim(grna_expression_mat)
dim(gene_expression_mat)
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(grna_expression_mat >= 1) == 1)
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(grna_expression_mat >= 1) == 1)
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
gene_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
gene_expression_mat
dim(gene_expression_mat)
gene_expression_mat[1:5,1:5]
colnames(gene_expression_mat) |> head()
data.frame(row.names(gene_expression_mat)) |> head()
to_save_fp_gene
to_save_fp_gene
paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
gene_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
to_save_fp_grna <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
grna_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_expression_mat,
barcodes = colnames(grna_expression_mat),
features_df = data.frame(rownames(grna_expression_mat)),
odm_fp = to_save_fp_grna)
# append target and target type to the grna odm
grna_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the grna odm
grna_odm <- grna_odm |>
mutate_feature_covariates(grna_tbl)
save_odm(odm = grna_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_orig.rds"))
# finally, create the matrix of grna assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
grna_ids = grna_ids,
grna_assignment_list = as.list(grna_ids[grna_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata_orig.rds"),
features_metadata_df = grna_tbl)
