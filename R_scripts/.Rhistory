gRNA_feature_covariates |> head()
gRNA_feature_covariates
gRNA_feature_covariates |> tail()
gRNA_feature_covariates |> tail(40)
grna_dataset_name <- lowmoi::get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_feature_covariates <- lowmoi::load_dataset_modality(grna_dataset_name) |> get_feature_covariates()
gRNA_feature_covariates
nrow(gRNA_feature_covariates)
gRNA_feature_covariates
# some basic correctness checks
if (!("target_type" %in% colnames(gRNA_feature_covariates))) {
stop("The column `target_type` must be present in the feature covariates data frame of the gRNA ondisc matrix.")
}
if (!("non-targeting" %in% gRNA_feature_covariates$target_type)) {
stop("The `target_type` column of the gRNA feature covariates data frame must have at least one entry `non-targeting`.")
}
# get NTC names
ntc_names <- gRNA_feature_covariates |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
ntc_names
ntc_names
head(ntc_names)
# now, group NTCs into groups of size group_size
sample(ntc_names, size = 20, replace = FALSE)
n_groups <- 40
group_size <- 30
n_groups
group_size
# now, group NTCs into n_groups groups of size group_size.
sample(ntc_names, size = 20, replace = FALSE)
n_groups
group_size.
group_size
n_groups
# now, group NTCs into n_groups groups of size group_size.
replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE),
simplify = FALSE)
# now, group NTCs into n_groups groups of size group_size.
replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE)
group_size2
group_size <- 2
# now, group NTCs into n_groups groups of size group_size.
replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE)
grps <- replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE)
length(grps)
unique(grps)
grps
length(grps)
# take unique
unique(grps)
group_size
ntc_names
n_groups <- 1000
grps <- replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE)
unique(grps)
length/(unique(grps))
length(unique(grps))
ntc_names
n_groups
grps
# take unique
length(grps)
grps <- replicate(n = n_groups,
expr = sample(ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE) |> unique()
grps
length(grps)
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
grps |> head()
grps
grps <- replicate(n = n_groups,
expr = sample(x = ntc_names, size = group_size, replace = FALSE) |> sort(),
simplify = FALSE) |> unique()
head(grps)
head(grps)
length(grps)
head(grps)
length(grps)
length(grps)
length(grps)
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
length(Grps)
length(grps)
grps <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = group_size - length(grps),
replace = FALSE) |> sort(),
simplify = FALSE) |> unique()
grps
n_groups
break()
if (length(grps) == n_groups) break()
length(grps)
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
group_size - length(grps)
n_groups - length(grps)
samp <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = n_groups - length(grps),
replace = FALSE) |> sort(),
simplify = FALSE) |> unique()
n_groups - length(grps)
group_size
samp <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(),
simplify = FALSE) |> unique()
samp <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
samp
length(samp)
length(samp)
grps
grps <- c(samp, grps)
length(grps)
grps
grps <- c(samp, grps) |> unique()
length(grps)
length(grps) == n_groups
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
repeat {
samp <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
length(grps)
b_groups
n_groups
length(grps) == n_groups
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
samp <- replicate(n = n_groups,
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
samp
length(samp)
grps <- c(samp, grps) |> unique()
grps
length(grps)
length(grps)
n_groups
n_groups
n_groups - length(grps)
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
grps
length(grps)
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
length(samp)
grps <- c(samp, grps) |> unique()
length(grps)
p
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
length(samp)
grps <- c(samp, grps) |> unique()
length(grps)
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
length(samp)
grps <- c(samp, grps) |> unique()
length(grps)
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
samp
grps <- c(samp, grps) |> unique()
length(grps)
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
grps
length(grps)
ntc_names
length(ntc_names)
# now, group NTCs into n_groups groups of size group_size.
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
grps
length(grpes)
length(grps)
grps
grps
length(Grps)
length(grps)
lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+"))
lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
9
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
9
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
source("~/research_code/undercover-gRNA-pipeline/bin/get_dataset_ntc_tuples.R")
frac_undercover
frac_undercover <- 0.1
frac_undercover
frac_undercover <- 0.05
frac_undercover <- 0.1
frac_undercover <- 0.2
frac_undercover <- 0.6
frac_undercover <- 0.5
frac_undercover <-1
frac_undercover <- 1
grouped
grouped <- TRUE
grouped
one_ntc <- TRUE
grna_modality
grna_modality <- "assignment"
frac_undercover <- as.numeric(args[4])
grouped
one_ntc
grouped <- TRUE
datasets
grouped
one_ntc
# Get CL args
args <- commandArgs(trailingOnly = TRUE)
args
args <- c("false", "assignment", "FALSE", "0.2", "frangieh/co_culture/gene", "frangieh/control/gene", "frangieh/ifn_gamma/gene", "papalexi/eccite_screen/gene", "papalexi/eccite_screen/protein")
args
one_ntc <- as.logical(args[1])
one_ntc
grna_modality <- args[2]
grna_modality
is_grouped <- as.logical(args[3])
is_grouped
frac_undercover <- as.numeric(args[4]) # IGNORED IF grouped = FALSE
frac_undercover
class(frac_undercover)
datasets <- args[seq(5, length(args))]
datasets
one_ntc
grna_modality
is_grouped
frac_undercover
sceptre2_offsite_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_offsite_dir
out <- NULL
dataset_name
datasets
dataset_name <- datasets[1]
dataset_name
grna_dataset_name <- lowmoi::get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_feature_covariates <- lowmoi::load_dataset_modality(grna_dataset_name) |> get_feature_covariates()
grna_dataset_name
gRNA_feature_covariates
gRNA_feature_covariates |> head()
# some basic correctness checks
if (!("target_type" %in% colnames(gRNA_feature_covariates))) {
stop("The column `target_type` must be present in the feature covariates data frame of the gRNA ondisc matrix.")
}
if (!("non-targeting" %in% gRNA_feature_covariates$target_type)) {
stop("The `target_type` column of the gRNA feature covariates data frame must have at least one entry `non-targeting`.")
}
out
dataset_name
datasets
grna_dataset_name <- lowmoi::get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_feature_covariates <- lowmoi::load_dataset_modality(grna_dataset_name) |> get_feature_covariates()
grna_dataset_name
gRNA_feature_covariates
# some basic correctness checks
if (!("target_type" %in% colnames(gRNA_feature_covariates))) {
stop("The column `target_type` must be present in the feature covariates data frame of the gRNA ondisc matrix.")
}
if (!("non-targeting" %in% gRNA_feature_covariates$target_type)) {
stop("The `target_type` column of the gRNA feature covariates data frame must have at least one entry `non-targeting`.")
}
# get NTC names
ntc_names <- gRNA_feature_covariates |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
ntc_names
ntc_names
ntc_group_names <- ntc_names
ntc_group_names
n_groups <- length(ntc_names)
n_groups
grps <- NULL
ntc_group_names <- ntc_names
ntc_group_names
length(ntc_group_names)
set.seed(4)
n_groups <- length(ntc_names)
n_groups
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
frac_undercover * n_groups
group_size <- round(frac_undercover * n_groups)
group_size
n_groups
gruop_size
group_size
grps <- NULL
ntc_group_names <- lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
ntc_group_names
set.seed(4)
n_groups <- length(ntc_names)
group_size <- round(frac_undercover * n_groups)
grps <- NULL
repeat {
samp <- replicate(n = n_groups - length(grps),
expr = sample(x = ntc_names,
size = group_size,
replace = FALSE) |> sort(), simplify = FALSE)
grps <- c(samp, grps) |> unique()
if (length(grps) == n_groups) break()
}
ntc_group_names <- lapply(X = grps, FUN = function(grp) paste0(grp, collapse = "+")) |> unlist()
ntc_group_names
head(ntc_group_names)
ntc_group_names
dataset_name
out <- c(out, paste(dataset_name, ntc_group_names))
out
out
head(out)
args <- c("frangieh/control/gene", "NO-SITE-107+NO-SITE-304+NO-SITE-386+NO-SITE-544+NO-SITE-547+NO-SITE-716+NO-SITE-836+ONE-NON-GENE-SITE-231+ONE-NON-GENE-SITE-409+ONE-NON-GENE-SITE-594+ONE-NON-GENE-SITE-598+ONE-NON-GENE-SITE-640+ONE-NON-GENE-SITE-658+ONE-NON-GENE-SITE-736+ONE-NON-GENE-SITE-859", "mimosca", "assignment", "n_rep=50")
args
args
dataset_name <- args[1]
undercover_ntc_name <- args[2]
method_name <- args[3]
grna_modality <- args[4]
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
grna_modality
length(args)
args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and gRNA expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
gRNA_odm <- load_dataset_modality(grna_dataset_name)
gRNA_odm
response_odm
gRNA_odm |> get_feature_covariates()
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
# perform the label swap
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
gRNA_feature_covariates
head(gRNA_feature_covariates)
# perform the label swap
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
head(gRNA_feature_covariates)
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
tab_target_types
new_label <- (tab_target_types[names(tab_target_types) != "non-targeting"] |> names())[1]
new_label
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
# perform the label swap
strsplit(undercover_ntc_name, "+")
# perform the label swap
strsplit(x = undercover_ntc_name, split = "+", fixed = TRUE)
# perform the label swap
strsplit(x = undercover_ntc_name, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name_in <- args[2]
undercover_ntc_name_in
undercover_ntc_name_in
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name
undercover_ntc_name_in <- undercover_ntc_name_in[1]
undercover_ntc_name_in
undercover_ntc_name_in <- "NO-SITE-107"
undercover_ntc_name_in
undercover_ntc_name_in
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
undercover_ntc_name
head(undercover_ntc_name)
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
undercover_ntc_name
args <- c("frangieh/control/gene", "NO-SITE-107+NO-SITE-304+NO-SITE-386+NO-SITE-544+NO-SITE-547+NO-SITE-716+NO-SITE-836+ONE-NON-GENE-SITE-231+ONE-NON-GENE-SITE-409+ONE-NON-GENE-SITE-594+ONE-NON-GENE-SITE-598+ONE-NON-GENE-SITE-640+ONE-NON-GENE-SITE-658+ONE-NON-GENE-SITE-736+ONE-NON-GENE-SITE-859", "mimosca", "assignment", "n_rep=50")
args
dataset_name <- args[1]
dataset_name <- args[1]
undercover_ntc_name_in <- args[2]
method_name <- args[3]
grna_modality <- args[4]
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
dataset_name
undercover_ntc_name_in
method_name <- args[3]
method_name
grna_modality <- args[4]
grna_modality
if (length(args) >= 5) {
optional_args <- args[seq(5, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and gRNA expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_gRNA_dataset_name(dataset_name, grna_modality)
gRNA_odm <- load_dataset_modality(grna_dataset_name)
response_odm
grna_dataset_name
gRNA_odm
# perform the label swap
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = "+", fixed = TRUE) |>
unlist()
head(undercover_ntc_name)
undercover_ntc_name
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
head(gRNA_feature_covariates)
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
tab_target_types
new_label <- (tab_target_types[names(tab_target_types) != "non-targeting"] |> names())[1]
new_label
undercover_ntc_name
head(gRNA_feature_covariates)
gRNA_feature_covariates
tail(gRNA_feature_covariates)
gRNA_feature_covariates[undercover_ntc_name, "target_type"] <- new_label
gRNA_feature_covariates |> dplyr::filter(target == "gene")
gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
x <- gRNA_feature_covariates |> dplyr::filter(target_type == "gene")
undercover_ntc_name
x[undercover_ntc_name,]
gRNA_odm_swapped <- gRNA_odm |> mutate_feature_covariates(target_type = gRNA_feature_covariates$target_type)
gRNA_odm_swapped
get_feature_ids(response_odm) |> head()
undercover_ntc_name
response_gRNA_group_pairs <- data.frame(response_id = get_feature_ids(response_odm),
gRNA_group = undercover_ntc_name_in)
head(response_gRNA_group_pairs)
head(response_gRNA_group_pairs)
