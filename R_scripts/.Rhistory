col_names = chipseq_colnames,
show_col_types = FALSE
) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "STAT1")
# read IRF1 ChIP-seq data
irf1_chipseq_data <- read_table(
irf1_chipseq_fp,
col_names = chipseq_colnames,
show_col_types = FALSE
) |>
suppressWarnings() |>
# change NA p-values to 1
mutate(pval = ifelse(is.na(pval), 1, pval)) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "IRF1")
# combine the two into one data frame for convenience
chipseq_data <- bind_rows(stat1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF),
irf1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF))
# convert to GRanges object
chipseq_GR <- GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos,
end = chipseq_data$end_pos),
score = chipseq_data$score,
TF = chipseq_data$TF)
# read in method results
method_results <- readRDS(method_results_fp)
# get names of genes from Frangieh results
gene_names <- method_results |>
filter(dataset_rename == "Papalexi Eccite Screen Gene") |>
pull(response_id) |>
unique() |>
as.character()
# pull gene annotation info from ENSEMBL
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS) |>
group_by(gene) |>
# remove genes with multiple associated chromosomes
filter(length(unique(chr)) == 1) |>
# for genes with multiple TSSs on same chromosome, average TSS positions
group_by(gene, chr) |>
summarise(TSS = round(mean(TSS)), .groups = "drop")
###########################################################
# load libraries and resolve conflicts
###########################################################
library(GenomicRanges)
library(dplyr)
library(reshape2)
library(plyranges)
library(readr)
library(biomaRt)
library(data.table)
library(conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(reshape2::melt)
###########################################################
# set analysis parameters
###########################################################
CHIPSEQ_THRESH <- 0.75
PROMOTER_WINDOW_WIDTH <- 5e3
###########################################################
# set filepaths
###########################################################
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
stat1_chipseq_filename <- "GSM1057011_STAT1peak_B.txt"
irf1_chipseq_filename <- "GSM1057025_IRF1peak_B.txt"
stat1_chipseq_fp <- paste0(sceptre2_dir, "/data/chipseq/", stat1_chipseq_filename)
source("~/.Rprofile")
###########################################################
# set analysis parameters
###########################################################
CHIPSEQ_THRESH <- 0.75
PROMOTER_WINDOW_WIDTH <- 5e3
###########################################################
# set filepaths
###########################################################
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
stat1_chipseq_filename <- "GSM1057011_STAT1peak_B.txt"
irf1_chipseq_filename <- "GSM1057025_IRF1peak_B.txt"
stat1_chipseq_fp <- paste0(sceptre2_dir, "/data/chipseq/", stat1_chipseq_filename)
irf1_chipseq_fp <- paste0(sceptre2_dir, "/data/chipseq/", irf1_chipseq_filename)
method_results_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/discovery_results_0423_processed.rds"
)
output_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/TF_targets_papalexi_chipseq.rds"
)
# ChIP-seq column names
chipseq_colnames <- c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height", "rel_pos_max_peak_height",
"peak_size","mid_point", "peak_to_mid_dist")
# read STAT1 ChIP-seq data
stat1_chipseq_data <- read_table(
stat1_chipseq_fp,
col_names = chipseq_colnames,
show_col_types = FALSE
) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "STAT1")
# read IRF1 ChIP-seq data
irf1_chipseq_data <- read_table(
irf1_chipseq_fp,
col_names = chipseq_colnames,
show_col_types = FALSE
) |>
suppressWarnings() |>
# change NA p-values to 1
mutate(pval = ifelse(is.na(pval), 1, pval)) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "IRF1")
# combine the two into one data frame for convenience
chipseq_data <- bind_rows(stat1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF),
irf1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF))
# convert to GRanges object
chipseq_GR <- GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos,
end = chipseq_data$end_pos),
score = chipseq_data$score,
TF = chipseq_data$TF)
# read in method results
method_results <- readRDS(method_results_fp)
# get names of genes from Frangieh results
gene_names <- method_results |>
filter(dataset_rename == "Papalexi Eccite Screen Gene") |>
pull(response_id) |>
unique() |>
as.character()
# pull gene annotation info from ENSEMBL
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS) |>
group_by(gene) |>
# remove genes with multiple associated chromosomes
filter(length(unique(chr)) == 1) |>
# for genes with multiple TSSs on same chromosome, average TSS positions
group_by(gene, chr) |>
summarise(TSS = round(mean(TSS)), .groups = "drop")
TSS_info
ensembl
getBM(attributes=c("external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl)
getBM(attributes=c("external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl)
gene_names
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
source("~/.Rprofile")
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# discovery result
discovery_res <- readRDS(paste0(sceptre2_results_dir, "discovery_analyses/discovery_results_0423.rds"))
discovery_res_processed <- suppressWarnings(process_pc_result(discovery_res, sample_size_df))
head(discovery_res_processed)
discovery_res_processed$dataset_rename |> unique()
saveRDS(discovery_res_processed, paste0(sceptre2_results_dir, "discovery_analyses/discovery_results_0423_processed.rds"))
saveRDS(discovery_res_processed, paste0(sceptre2_results_dir, "discovery_analyses/discovery_results_0423_processed.rds"))
discovery_res_processed
sceptre2_results_dir
library(GenomicRanges)
library(dplyr)
library(reshape2)
library(plyranges)
library(readr)
library(biomaRt)
library(data.table)
library(conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::rename)
conflicts_prefer(dplyr::filter)
conflicted::conflicts_prefer(reshape2::melt)
###########################################################
# set analysis parameters
###########################################################
CHIPSEQ_THRESH <- 0.75
PROMOTER_WINDOW_WIDTH <- 5e3
###########################################################
# set filepaths
###########################################################
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
stat1_chipseq_filename <- "GSM1057011_STAT1peak_B.txt"
irf1_chipseq_filename <- "GSM1057025_IRF1peak_B.txt"
stat1_chipseq_fp <- paste0(sceptre2_dir, "/data/chipseq/", stat1_chipseq_filename)
irf1_chipseq_fp <- paste0(sceptre2_dir, "/data/chipseq/", irf1_chipseq_filename)
method_results_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/discovery_results_0423_processed.rds"
)
output_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/TF_targets_papalexi_chipseq.rds"
)
#######################################################################
# read in and process ChIP-seq data
#######################################################################
# ChIP-seq column names
chipseq_colnames <- c("chrom",'start_pos','end_pos',"pval","score",
"pos_max_peak","max_peak_height", "rel_pos_max_peak_height",
"peak_size","mid_point", "peak_to_mid_dist")
# read STAT1 ChIP-seq data
stat1_chipseq_data <- read_table(
stat1_chipseq_fp,
col_names = chipseq_colnames,
show_col_types = FALSE
) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "STAT1")
# read IRF1 ChIP-seq data
irf1_chipseq_data <- read_table(
irf1_chipseq_fp,
col_names = chipseq_colnames,
show_col_types = FALSE
) |>
suppressWarnings() |>
# change NA p-values to 1
mutate(pval = ifelse(is.na(pval), 1, pval)) |>
filter(score > quantile(score, CHIPSEQ_THRESH)) |>
mutate(TF = "IRF1")
# combine the two into one data frame for convenience
chipseq_data <- bind_rows(stat1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF),
irf1_chipseq_data |>
select(chrom, start_pos, end_pos, score, TF))
# convert to GRanges object
chipseq_GR <- GRanges(
seqnames = chipseq_data$chrom,
ranges = IRanges(start = chipseq_data$start_pos,
end = chipseq_data$end_pos),
score = chipseq_data$score,
TF = chipseq_data$TF)
###########################################################
# get TSS region for each gene
###########################################################
# read in method results
method_results <- readRDS(method_results_fp)
# get names of genes from Frangieh results
gene_names <- method_results |>
filter(dataset_rename == "Papalexi (Gene)") |>
pull(response_id) |>
unique() |>
as.character()
# pull gene annotation info from ENSEMBL
ensembl <- useEnsembl(host = 'https://grch37.ensembl.org',
biomart = 'ENSEMBL_MART_ENSEMBL',
dataset = "hsapiens_gene_ensembl")
TSS_info <-getBM(attributes=c("external_gene_name",
"chromosome_name",
"start_position",
"end_position",
"strand"),
filters=c('external_gene_name'),
value = gene_names, mart=ensembl) |>
filter(chromosome_name %in% c(1:22, "X", "Y")) |>
mutate(TSS = ifelse(strand == 1, start_position, end_position),
chromosome_name = paste0("chr", chromosome_name)) |>
rename(gene = external_gene_name, chr = chromosome_name) |>
select(gene, chr, TSS) |>
group_by(gene) |>
# remove genes with multiple associated chromosomes
filter(length(unique(chr)) == 1) |>
# for genes with multiple TSSs on same chromosome, average TSS positions
group_by(gene, chr) |>
summarise(TSS = round(mean(TSS)), .groups = "drop")
# save as GRanges object
TSS_GR <- GRanges(
seqnames = TSS_info$chr,
ranges = IRanges(start = TSS_info$TSS-PROMOTER_WINDOW_WIDTH,
end = TSS_info$TSS+PROMOTER_WINDOW_WIDTH),
gene = TSS_info$gene,
TSS = TSS_info$TSS)
# set up matrix to store results
TFs <- chipseq_data |> pull(TF) |> unique()
target_info <- matrix(FALSE,
nrow = length(TSS_GR$gene),
ncol = length(TFs),
dimnames = list(gene =  TSS_GR$gene, TF = TFs))
# loop over TFs
for(TF in TFs){
cat(sprintf("Working on %s...\n", TF))
# find target genes as those where TSS region overlaps with TF binding site
target_genes <- TSS_GR |>
filter_by_overlaps(chipseq_GR |> plyranges::filter(TF == !!TF)) |>
as.data.frame() |>
pull(gene)
# set corresponding entries of output matrix to TRUE
target_info[target_genes, TF] <- TRUE
}
# tidy and save
target_info |>
melt(value.name = "target") |>
as_tibble() |>
saveRDS(output_fp)
output_fp
target_info |>
melt(value.name = "target") |>
as_tibble()
source("~/.Rprofile")
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
# analysis parameteres
N_NONZERO_CNTRL_THRESH <- 7
N_NONZERO_TRT_THRESH <- 7
q <- 0.1
#add file path of figure here
figure_file_path = ""
# read the results
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
method_results_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/discovery_results_0423_processed.rds"
)
TF_targets_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/TF_targets_papalexi_chipseq.rds"
)
method_results <- readRDS(method_results_fp) |> as_tibble()
TF_targets <- readRDS(TF_targets_fp) |> unique()
# join method results with TF targets, apply BH at level q
method_results <- method_results |>
filter(dataset_rename == "Papalexi (Gene)",
n_control >= N_NONZERO_CNTRL_THRESH,
n_treatment >= N_NONZERO_TRT_THRESH) |>
rename(gene = response_id, TF = grna_group) |>
inner_join(TF_targets, by = c("gene", "TF")) |>
group_by(TF, Method) |>
#  group_by(Method) |>
mutate(rejection = p.adjust(p_value, method = "fdr") <= q) |>
ungroup()
method_results
# version of Fisher test that returns NA (rather than throwing an error)
# in degenerate cases
my.fisher.test <- function(x, y){
if(length(unique(x)) == 1 | length(unique(y)) == 1){
list(p.value = NA, estimate = NA)
} else{
fisher.test(x, y, alternative = "greater")
}
}
results <- method_results |>
group_by(TF, Method) |>
summarise(num_rejections = sum(rejection),
odds_ratio = my.fisher.test(target, rejection)$estimate,
pvalue = my.fisher.test(target, rejection)$p.value,
fdp = sum(rejection & !target)/max(1, sum(rejection)),
power = sum(rejection & target)/sum(target),
.groups = "drop") |>
bind_rows(TF_targets |>
group_by(TF) |>
summarise(num_rejections = sum(target)) |>
mutate(Method = "Truth", odds_ratio = NA, pvalue = NA))
my_cols <- c("Weissman Method" = "purple3",
"Weissman Meth." = "purple3",
"KS test" = "purple3",
"Schraivogel Method" = "aquamarine4",
"Schraivogel Meth." = "aquamarine4",
"MAST" = "aquamarine4",
"Mimosca" = "palevioletred3",
"MIMOSCA" = "palevioletred3",
"Liscovitch Method" = "navy",
"Liscovitch Meth." = "navy",
"t-test" = "navy",
"Seurat De" = "dodgerblue3",
"Seurat De (w/ strict QC)" = "dodgerblue4",
"Seurat De (w/o strict QC)" = "dodgerblue",
"NB Reg (w/o covariates)" = "darkgoldenrod3",
"NB Reg (w/ covariates)" = "darkgoldenrod4",
"NB Regression" = "goldenrod3",
"SCEPTRE" = "firebrick3",
"Sceptre" = "firebrick3",
"SCEPTRE (w/o covariates)" = "dodgerblue",
"Truth" = "slategray4")
my_methods <- c("Liscovitch Method", "Schraivogel Method", "Mimosca", "Weissman Method", "Seurat De", "Sceptre", "Truth")
my_values <- my_cols[names(my_cols) %in% my_methods]
results <- results |>
mutate(Method = factor(Method, levels = my_methods))
results
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1, oma = c(0, 0, 0, 0))
options(repr.plot.width = 70, repr.plot.height = 12)
plot_grid(plot_grid(p_rejections + theme(legend.position = "none"),
p_fdp,
p_power,
p_odds_ratios,
p_pvalues,
nrow = 1),
get_legend(p_rejections),
ncol = 1,
axis = "tlrb",
rel_heights = c(1, 0.2))
p_rejections <- results |>
mutate(Method = factor(Method, levels = my_methods)) |>
ggplot(aes(x = num_rejections, y = TF, fill = Method)) +
geom_col(position = "dodge", color = "black") +
scale_x_continuous(trans = "log10", breaks = c(1, 10, 100, 1000)) +
scale_fill_manual(values = my_values) +
theme(legend.position = "bottom",
legend.title = element_blank(),legend.text = element_text(size = 18)) +
labs(x = "Number of rejections",
y = "TF")
p_fdp <- results |>
ggplot(aes(x = fdp, y = TF, fill = Method)) +
geom_col(position = "dodge", color = "black") +
geom_vline(xintercept = 0.05, linetype = "dashed") +
scale_x_continuous(limits = c(0,1)) +
scale_fill_manual(values = my_values) +
theme(legend.position = "none") +
labs(x = "FDP",
y = NULL)
p_power <- results |>
ggplot(aes(x = power, y = TF, fill = Method)) +
geom_col(position = "dodge", color = "black") +
scale_fill_manual(values = my_values) +
theme(legend.position = "") +
labs(x = "Power",
y = NULL)
p_odds_ratios <- results |>
ggplot(aes(x = odds_ratio, y = TF, fill = Method)) +
geom_col(position = "dodge", color = "black") +
geom_vline(xintercept = 1, linetype = "dashed") +
scale_x_continuous(breaks = c(0, 1, 2, 3, 4)) +
scale_fill_manual(values = my_values) +
theme(legend.position = "none") +
labs(x = "Odds ratio",
y = NULL)
p_pvalues <- results |>
ggplot(aes(x = pvalue, y = TF, fill = Method)) +
geom_col(position = "dodge", color = "black") +
geom_vline(xintercept = 0.05, linetype = "dashed") +
scale_x_continuous(trans = katlabutils::revlog_trans(),
breaks = c(1e-20, 1e-40, 1e-60)) +
scale_fill_manual(values = my_values) +
theme(legend.position = "") +
labs(x = "p-value",
y = NULL)
p_rejections
p_fdp
p_power
p_pvalues
results
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(conflicted)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::filter)
# analysis parameteres
N_NONZERO_CNTRL_THRESH <- 7
N_NONZERO_TRT_THRESH <- 7
q <- 0.1
#add file path of figure here
figure_file_path = ""
# read the results
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
method_results_fp <- paste0(
sceptre2_dir,
"results/discovery_analyses/discovery_results_0423_processed.rds"
)
source("~/.Rprofile")
