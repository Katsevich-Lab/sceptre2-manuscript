odm_list <- list()
modality
modality <- modality_vectp1
modality <- modality_vect[1]
odm_dir <- paste0(dataset_dir, "/", modality, "/")
odm_dor
odm_dir
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
gRNA_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_orig.rds"))
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata_orig.rds"),
features_metadata_df = gRNA_tbl)
GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_orig.rds"))
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata_orig.rds"),
features_metadata_df = gRNA_tbl)
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/results.rds")
undercover_res_fp
undercover_res <- readRDS(undercover_res_fp)
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/result.rds ")
undercover_res <- readRDS(undercover_res_fp)
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/result.rds")
undercover_res <- readRDS(undercover_res_fp)
head(undercover_res)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/")
# combine Schraivogel enh8 and enh11
undercover_res$dataset <- undercover_res$dataset |>
forcats::fct_recode(schraivogel_enhancer_screen = "schraivogel_enhancer_screen_chr11_gene",
schraivogel_enhancer_screen = "schraivogel_enhancer_screen_chr8_gene")
# load packages
library(ggplot2)
library(katlabutils)
# first, check the number of p-values for each dataset-method pair; confirm number of p-values coincides across methods for a given dataset
undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::summarize(n_pvals_coincide = all(diff(count) == 0))
undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = sum(is.na(p_value)))
# i) confirm number of p-values coincides across methods for a given dataset
undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::summarize(n_pvals_coincide = all(diff(count) == 0))
# i) confirm there are no NAs
undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(count = sum(is.na(p_value)))
# for each dataset, plot the p-values of each method
res_proc <- undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::mutate(n_pairs = dplyr::n(),
dataset_rename = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = dataset)),
dataset_rename_w_pairs = paste0(dataset_rename, " (", n_pairs[1], " pairs)"),
Method = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = method)))
############################
# 2. Create the p-value plot
############################
res_proc <- undercover_res |>
dplyr::group_by(dataset, method) |>
dplyr::mutate(n_pairs = dplyr::n(),
dataset_rename = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = dataset)),
dataset_rename_w_pairs = paste0(dataset_rename, " (", n_pairs[1], " pairs)"),
Method = stringr::str_to_title(gsub(pattern = "_",replacement = " ", x = method)))
# first, the p-value plot
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
comp_df <- res_proc |>
dplyr::select(undercover_gRNA, Dataset = dataset_rename, Method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(Dataset, Method) |>
dplyr::summarize(m_clock_time = mean(clock_time)/60, m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"),
labels = c("Time (m)", "RAM (GB)"))) |>
dplyr::mutate(value = ifelse(value < 1, 1.05, value))
my_fct_order <- comp_df |>
dplyr::filter(Method == "Schraivogel Method", metric == "RAM (GB)") |>
dplyr::arrange(value) |>
dplyr::pull(Dataset)
comp_df <- comp_df |>
dplyr::mutate(Dataset = factor(x = Dataset, levels = my_fct_order, labels = my_fct_order))
p_undercover_comp <- ggplot(data = comp_df, mapping = aes(x = Method, y = value, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
facet_wrap(.~metric, scales = "free_y") +
ylab("") + xlab("Method") +
theme_bw() +
scale_y_continuous(trans='log2')
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
scale_x_continuous(trans = revlog_trans()) +
scale_x_continuous(trans = revlog_trans()) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
scale_x_continuous(trans = revlog_trans()) +
scale_y_continuous(trans = revlog_trans()) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
scale_x_continuous(trans = revlog_trans()) +
scale_y_continuous(trans = revlog_trans()) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
comp_df <- res_proc |>
dplyr::select(undercover_gRNA, Dataset = dataset_rename, Method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(Dataset, Method) |>
dplyr::summarize(m_clock_time = mean(clock_time)/60, m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"),
labels = c("Time (m)", "RAM (GB)"))) |>
dplyr::mutate(value = ifelse(value < 1, 1.05, value))
my_fct_order <- comp_df |>
dplyr::filter(Method == "Schraivogel Method", metric == "RAM (GB)") |>
dplyr::arrange(value) |>
dplyr::pull(Dataset)
comp_df <- comp_df |>
dplyr::mutate(Dataset = factor(x = Dataset, levels = my_fct_order, labels = my_fct_order))
p_undercover_comp <- ggplot(data = comp_df, mapping = aes(x = Method, y = value, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
facet_wrap(.~metric, scales = "free_y") +
ylab("") + xlab("Method") +
theme_bw() +
scale_y_continuous(trans='log2')
p_undercover_comp
comp_df
View(comp_df)
View(comp_df)
comp_df <- comp_df |>
dplyr::mutate(Dataset = factor(x = Dataset, levels = my_fct_order, labels = my_fct_order)) |>
dplyr::filter(Dataset != "Liscovitch Method")
p_undercover_comp <- ggplot(data = comp_df, mapping = aes(x = Method, y = value, fill = Dataset)) +
geom_bar(stat = "identity", position = "dodge", col = "black") +
facet_wrap(.~metric, scales = "free_y") +
ylab("") + xlab("Method") +
theme_bw() +
scale_y_continuous(trans='log2')
p_undercover_comp
ggsave(filename = paste0(fig_dir, "undercov_grna_stat.png"),
plot = p_undercover_stat, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
ggsave(filename = paste0(fig_dir, "undercov_grna_comp.pdf"),
plot = p_undercover_comp, device = "pdf", scale = 0.8, width = 11, height = 4, dpi = 330)
res_proc
head(res_proc)
res_proc |> dplyr::filter(method == "mimosca")
res_proc |> dplyr::filter(method == "mimosca") |>
ggplot(mapping = aes(x = p_value))
res_proc |> dplyr::filter(method == "mimosca") |>
ggplot(mapping = aes(x = p_value)) +
geom_histogram() +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35))
res_proc |> dplyr::filter(method == "mimosca") |>
ggplot(mapping = aes(x = p_value)) +
geom_histogram(bins = 15) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res_proc |> dplyr::filter(method == "mimosca") |>
ggplot(mapping = aes(x = p_value)) +
geom_histogram(bins = 15, col = "black", fill = "white") +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res_proc |> dplyr::filter(method == "mimosca") |>
ggplot(mapping = aes(x = p_value)) +
geom_histogram(bins = 15, col = "black", fill = "white") +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank()) + xlim(c(0,1))
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(base = 2)) +
scale_y_continuous(trans = revlog_trans(base = 2)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
#scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
#scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = rev()) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
log(10, base = 1)
log(10, base = 0)
log(10, base = Inf)
log(10, base = 0)
log(10, base = 1)
log(10, base = 0.5)
log(10, base = 2)
p_undercover_stat_trans <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat_untrans <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse(trans = revlog_trans(base = 10)) +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat_untrans <- ggplot(data = res_proc, mapping = aes(y = p_value, color = Method)) +
geom_vline(xintercept = 0.01) +
stat_qq_points(ymin = 1e-10) +
facet_wrap(~dataset_rename_w_pairs, scales = "free", labeller = label_wrap_gen(35)) +
geom_abline() +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
theme_bw() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
p_undercover_stat_untrans
ggsave(filename = paste0(fig_dir, "undercov_grna_trans.png"),
plot = p_undercover_stat_trans, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
ggsave(filename = paste0(fig_dir, "undercov_grna_untrans.png"),
plot = p_undercover_stat_untrans, device = "png", scale = 1, width = 11, height = 6, dpi = 330)
ggsave(filename = paste0(fig_dir, "undercov_grna_comp.pdf"),
plot = p_undercover_comp, device = "pdf", scale = 0.8, width = 12, height = 5, dpi = 330)
ggsave(filename = paste0(fig_dir, "undercov_grna_comp.pdf"),
plot = p_undercover_comp, device = "pdf", scale = 0.8, width = 14, height = 5, dpi = 330)
