if (!all(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df[!pass_qc,]
out_counter <- out_counter + 1L
}
curr_df <- curr_df[pass_qc,]
}
head(expression_vector_nt)
length(expression_vector_nt)
sum(expression_vector_nt >= 1)
nrow(covariate_matrix)
nrow(covariate_matrix_nt)
# 6. perform the expression on technical factor regression
response_precomp <- perform_response_precomputation(expressions = expression_vector_nt,
covariate_matrix = covariate_matrix_nt)
response_precomp
# 7. obtain precomputation peices for NT cells
pieces_precomp <- compute_precomputation_pieces(expression_vector_nt,
covariate_matrix_nt,
response_precomp$fitted_coefs,
response_precomp$theta,
full_test_stat)
pieces_precomp[[1]]
pieces_precomp[[2]]
# 8. update the args to pass with grna_groups, expression_vector, response_precomp, pieces_precomp
args_to_pass$grna_groups <- as.character(curr_df$grna_group)
args_to_pass$pieces_precomp <- pieces_precomp
args_to_pass$expression_vector_nt <- expression_vector_nt
if (!calibration_check) {
args_to_pass$expression_vector <- expression_vector
args_to_pass$response_precomp <- response_precomp
}
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
curr_response_result[[1]]$p
curr_response_result[[2]]$p
lapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p) == 0
which(sapply(curr_response_result, function(l) l$p) == 0)
low_level_association_funct
args_to_pass$pieces_precomp$mu |> head()
low_level_association_funct
names(args_to_pass)
curr_response_result |> length()
which(sapply(curr_response_result, function(l) l$p) == 0)
synthetic_idxs
B1
B2
B3
fit_skew_normal
return_resampling_dist
indiv_nt_grna_idxs |> length()
grna_groups <- args_to_pass$grna_groups
expression_vector_nt |> head()
head(expression_vector)
response_precomp$precomp_str
result_list_inner <- vector(mode = "list", length = length(grna_groups))
seq_along(grna_groups)
i <- 35
grna_group <- grna_groups[i]
grna_group
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
grna_group <- grna_groups[i]
grna_group_idxs <- args_to_pass$grna_group_idxs
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
expression_vector_trt
head(covariate_matrix_trt)
# 1. compute the pieces
pieces_trt <- compute_precomputation_pieces(expression_vector_trt, covariate_matrix_trt, response_precomp$fitted_coefs, response_precomp$theta, FALSE)
grna_group <- grna_groups[i]
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
# 1. compute the precomputation pieces for the treatment cells
pieces_trt <- compute_precomputation_pieces(expression_vector_trt, covariate_matrix_trt, response_precomp$fitted_coefs, response_precomp$theta, TRUE)
pieces_trt$mu |> head()
pieces_trt$wZ[1:5,1:5]
# 2. compute the shared weighted covariate matrix
Zt_wZ <- pieces_trt$Zt_wZ + pieces_precomp$Zt_wZ
# 3. compute the D matrix
D <- compute_D_matrix(Zt_wZ = Zt_wZ, wZ = rbind(pieces_precomp$wZ, pieces_trt$wZ))
# 4. create the combined mu, y, and a vectors
y <- c(expression_vector_nt, expression_vector_trt)
mu <- c(pieces_precomp$mu, pieces_trt$mu)
a <- c(pieces_precomp$a, pieces_trt$a)
w <- c(pieces_precomp$w, pieces_trt$w)
# 5. call low-level estimation and testing function
n_cntrl <- length(expression_vector_nt)
n_trt <- length(expression_vector_trt)
result <- run_low_level_test_full_v2(y = y,
mu = mu,
a = a,
w = w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result
head(y)
tail(y)
head(expression_vector_nt)
head(expression_vector_trt)
mean(expression_vector_nt)
mean(expression_vector_trt)
mu <- c(pieces_precomp$mu, pieces_trt$mu)
mean(pieces_precomp$mu)
mean(pieces_trt$mu)
load_all()
# load libraries and resolve conflicts
library(ondisc)
library(sceptre)
library(readr)
library(dplyr)
library(conflicted)
conflicted::conflicts_prefer(dplyr::filter)
# set up directories
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCHRAIVOGEL_DATA_DIR <-.get_config_path("LOCAL_SCHRAIVOGEL_2020_DATA_DIR")
schraivogel_chr8_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR,
"data/schraivogel/enhancer_screen_chr8/")
# gene info
gene_odm_fp <- paste0(schraivogel_chr8_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(schraivogel_chr8_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(schraivogel_chr8_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(schraivogel_chr8_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# get Schraivogel results for chromosome 8 pairs
replace_periods <- function(str){
stringr::str_replace(stringr::str_replace(str, "[.]", ":"), "[.]", "-")
}
add_suffixes <- function(str){
ifelse(str %in% c("CCNE2", "CPQ", "DSCC1", "FAM83A", "LRRCC1",
"OXR1", "PHF20L1", "RIPK2", "STK3", "UBR5"),
paste0(str, "-TSS"),
ifelse(str %in% c("GATA1", "HS2", "MYC", "ZFPM2"),
paste0(str, "-enh"),
str))
}
schraivogel_results_fp <- paste0(LOCAL_SCHRAIVOGEL_DATA_DIR,
"raw/ftp/diff_expr_screen_nGenesCovar.csv")
schraivogel_results <- read_csv(schraivogel_results_fp) |>
filter(sample == "8iScreen1",
gene %in% get_feature_ids(gene_odm)) |> # genes that passed our QC
mutate(grna_group = add_suffixes(replace_periods(perturbation))) |>
rename(response_id = gene) |>
select(response_id, grna_group, pvalue, logFC)
# set arguments for SCEPTRE
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- ~log(n_umis) + log(n_nonzero) + batch
calibration_check <- FALSE
response_grna_group_pairs <- schraivogel_results |> select(response_id, grna_group)
nrow(response_grna_group_pairs)
head(response_grna_group_pairs)
# run SCEPTRE
result_sceptre <- run_sceptre_lowmoi(
response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = FALSE,
test_stat = "exact_full",
)
19
52 * 7
4/(52 * 7) * 100
load_dataset_modality
lowmoi::load_dataset_modality
args
dataset
dataset <- "schraivogel/enhancer_screen_chr11/gene"
offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
offsite_dir
args
dataset
offsite_dir
modality_dir <- paste0(offsite_dir, "data/", dataset)
modality_dir
dataset <- args[1] # "schraivogel/enhancer_screen_chr11", "papalexi/eccite_screen", "frangieh/control"
offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
dataset_dir <- paste0(offsite_dir, "data/", dataset)
dataset_dir
dir.exists(dataset_dir)
library(ondisc)
lowmoi::load_dataset_modality
lowmoi::load_dataset_modality(data_fp = paste0(dataset_dir, "gene"))
dataset
lowmoi::load_dataset_modality(data_fp = dataset)
dataset
dataset <- "schraivogel/enhancer_screen_chr11"
dataset
dataset_dir <- paste0(offsite_dir, "data/", dataset)
lowmoi::load_dataset_modality(data_fp = paste0(dataset, "gene"))
lowmoi::load_dataset_modality(data_fp = paste0(dataset, "/gene"))
lowmoi::load_dataset_modality(data_fp = paste0(dataset, "/grna_assignment"))
gene_odm <- lowmoi::load_dataset_modality(data_fp = paste0(dataset, "/gene"))
grna_odm <- lowmoi::load_dataset_modality(data_fp = paste0(dataset, "/grna_assignment"))
dataset <- args[1] # "schraivogel/enhancer_screen_chr11/gene", "papalexi/eccite_screen/gene", "frangieh/control/gene"
dataset <- "schraivogel/enhancer_screen_chr11/gene"
offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
offsite_dir
library(ondisc)
lowmoi::load_dataset_modality
dataset
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "schraivogel/enhancer_screen_chr11/gene", "papalexi/eccite_screen/gene", "frangieh/control/gene"
offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
dataset_name
dataset_name <- "schraivogel/enhancer_screen_chr11/gene"
offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
offsite_dir
response_odm <- load_dataset_modality(dataset_name)
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
grna_odm
response_odm
response_ids <- ondisc::get_feature_ids(response_odm)
head(response_ids)
tail(response_ids)
response_ids <- ondisc::get_feature_ids(response_odm)
response_ids
grna_group_data_frame <- grna_odm |> get_feature_covariates()
head(grna_group_data_frame)
grna_group_data_frame <- data.frame(grna_id = rownames(grna_group_data_frame),
grna_group = grna_group_data_frame$target)
grna_group_data_frame
head(grna_group_data_frame)
tail(grna_group_data_frame)
grna_group_data_frame
10
head(grna_group_data_frame)
grna_group_data_frame <- data.frame(grna_id = rownames(grna_group_data_frame),
grna_group = grna_group_data_frame$target)
grna_groups <-  grna_group_data_frame |>
dplyr::filter(grna_group != "non-targeting") |>
dplyr::pull(grna_group) |> unique() |> factor()
response_ids <- ondisc::get_feature_ids(response_odm)
grna_group_data_frame <- grna_odm |> get_feature_covariates()
grna_group_data_frame <- data.frame(grna_id = rownames(grna_group_data_frame),
grna_group = grna_group_data_frame$target)
grna_groups <-  grna_group_data_frame |>
dplyr::filter(grna_group != "non-targeting") |>
dplyr::pull(grna_group) |> unique() |> factor()
expand.grid(response_id = response_ids, grna_group = grna_groups)
dataset_name
out <- expand.grid(response_id = response_ids, grna_group = grna_groups)
nrow(dataset_name)
nrow(out)
library(readr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
library(conflicted)
conflicted::conflicts_prefer(dplyr::filter)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
output_dir <- paste0(sceptre2_dir, "results/schraivogel_analysis/")
result_sceptre <- readRDS(
paste0(output_dir, "sceptre_schraivogel_chr_8_results.rds")
)
result_schraivogel <- readRDS(
paste0(output_dir, "schraivogel_schraivogel_chr_8_results.rds")
)
result_schraivogel
nrow(result_schraivogel)
dataset_name <- "schraivogel/enhancer_screen_chr8/gene"
dataset_name
library(ondisc)
library(lowmoi)
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
response_odm
response_ids <- ondisc::get_feature_ids(response_odm)
grna_group_data_frame <- grna_odm |> get_feature_covariates()
grna_group_data_frame <- data.frame(grna_id = rownames(grna_group_data_frame),
grna_group = grna_group_data_frame$target)
grna_groups <-  grna_group_data_frame |>
dplyr::filter(grna_group != "non-targeting") |>
dplyr::pull(grna_group) |> unique() |> factor()
g <-   expand.grid(response_id = response_ids, grna_group = grna_groups)
nrow(g)
LOCAL_SCEPTRE2_DATA_DIR
args <- commandArgs(trailingOnly = TRUE)
dataset_name <- args[1] # "schraivogel/enhancer_screen_chr11/gene", "schraivogel/enhancer_screen_chr8/gene", "papalexi/eccite_screen/gene", "frangieh/control/gene"
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCEPTRE2_DATA_DIR
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
head(sample_size_df)
dataset_name
"schraivogel/enhancer_screen_chr11/gene" -> dataset_name
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds")) |>
dplyr::filter(dataset_concat == dataset_name)
head(sample_size_df)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds")) |>
dplyr::filter(dataset_concat == dataset_name) |>
dplyr::group_by(target) |>
dplyr::summarize(n_cells = n_cells)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds")) |>
dplyr::filter(dataset_concat == dataset_name) |>
dplyr::group_by(target) |>
dplyr::summarize(n_cells_tot = sum(n_cells))
sample_size_df
head(sample_size_df)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
head(sample_size_df)
ex_feat <- sample_size_df$feature_id[1]
ex_feat
dplyr::filter(dataset_concat == dataset_name)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
dplyr::filter(dataset_concat == dataset_name)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds")) |>
dplyr::filter(dataset_concat == dataset_name)
head(sample_size_df)
ex_feat <- unique(sample_size_df$feature_id)[1]
ex_feat
ex_feat <- as.character(unique(sample_size_df$feature_id)[1])
ex_feat
sample_size_df |>
dplyr::filter(feature_id == ex_feat)
sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells))
x <- sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells))
head(x)
tail(x)
head(x)
x |> dplyr::arrange(count)
0.1/70000
dataset_name <- "schraivogel/enhancer_screen_chr8/gene"
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
library(ondisc)
library(lowmoi)
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
response_grna_group_pairs <- generate_all_pairs(response_odm, grna_odm)
sample_size_df <- readRDS(paste0(LOCAL_SCEPTRE2_DATA_DIR,
"results/dataset_sample_sizes/n_nonzero_cells_per_grna.rds")) |>
dplyr::filter(dataset_concat == dataset_name)
ex_feat <- as.character(unique(sample_size_df$feature_id)[1])
x <- sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells)) |>
dplyr::filter(count >= 7)
xx
x
x |> dplyr::arrange(count)
dataset_name
x
tailx
tail(x)
head(x)
x |> dplyr::arrange(count)
x |> dplyr::arrange(count) |> tail()
x |> dplyr::arrange(count) |> head()
sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells))
sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells)) |> dplyr::arrange(count)
sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells))
sample_size_df |>
dplyr::filter(feature_id == ex_feat) |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_cells)) |>
dplyr::arrange(count)
grna_odm
grna_odm |> get_feature_covariates() |> head()
grna_odm |> get_feature_covariates() |> dplyr::arrange(n_nonzero)
grna_odm
# find the gRNA groups that have infected sufficiently many cells
grna_odm |>
ondisc::get_feature_covariates() |> head()
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
head()
# find the gRNA groups that have infected sufficiently many cells
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
summarize(count = sum(n_nonzero))
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero))
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::arrange(count)
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::arrange(count) |>
dplyr::filter(count >= 3)
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::arrange(count) |>
dplyr::filter(count >= 3) |>
dplyr::pull(target)
grna_groups_to_keep <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::arrange(count) |>
dplyr::filter(count >= 3) |>
dplyr::pull(target)
head(grna_groups_to_keep)
tail(grna_groups_to_keep)
grna_groups_to_keep
length(grna_groups_to_keep)
grna_odm <- grna_odm[grna_groups_to_keep,]
grna_groups_to_keep
grna_groups_to_keep
generate_all_pairs
grna_groups_to_keep <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::arrange(count) |>
dplyr::filter(count >= 3) |>
dplyr::pull(target)
grna_groups_to_keep
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
grna_groups_to_keep
expand.grid(response_id = grna_groups_to_keep,
grna_group = ondisc::get_feature_ids(response_odm)) |> head()
expand.grid(response_id = grna_groups_to_keep,
grna_group = ondisc::get_feature_ids(response_odm)) |> tail()
expand.grid(response_id = grna_groups_to_keep,
grna_group = ondisc::get_feature_ids(response_odm)) |> nrow()
response_grna_group_pairs <- expand.grid(response_id = grna_groups_to_keep,
grna_group = ondisc::get_feature_ids(response_odm))
args
dataset_name
"papalexi/eccite_screen/gene" -> dataset_name
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCEPTRE2_DATA_DIR
library(ondisc)
library(lowmoi)
# load the response ODM and gRNA ODM
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
# generate the pairs to analyze
grna_groups_to_keep <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |>
dplyr::filter(count >= 3) |>
dplyr::pull(target)
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
response_grna_group_pairs <- expand.grid(response_id = grna_groups_to_keep,
grna_group = ondisc::get_feature_ids(response_odm))
head(response_grna_group_pairs)
tail(response_grna_group_pairs)
head(response_grna_group_pairs)
grna_groups_to_keep <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero))
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero))
grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::group_by(target) |>
dplyr::summarize(count = sum(n_nonzero)) |> dplyr::arrange(count)
