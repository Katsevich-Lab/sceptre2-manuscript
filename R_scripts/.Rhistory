gene_modality |> ondisc::get_feature_ids())
ungroup_pairs_all <- grna_feature_df |>
dplyr::filter(known_effect %in% targets)
# first, grouped pairs
pc_pairs <- ungroup_pairs_all |>
dplyr::select(grna_group = target, response_id = known_effect) |>
dplyr::distinct() |>
na.omit()
rownames(pc_pairs) <- NULL
# next, ungrouped pairs
ungroup_pc_pairs <- data.frame(grna_id = row.names(ungroup_pairs_all),
response_id = ungroup_pairs_all$known_effect)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
# finally, do the papalexi protein data
if (paper == "papalexi") {
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
protein_modality <- mm_odm_sub_proc |> get_modality("protein")
x <- grna_assignment_modality |>
get_feature_covariates() |>
dplyr::filter(!is.na(known_protein_effect),
n_nonzero > 0)
pos_control_ungroup <- data.frame(grna_group = row.names(x),
response_id = x$known_protein_effect)
pos_control_group <- x |>
dplyr::select(target, known_protein_effect) |>
dplyr::distinct() |>
dplyr::rename("grna_group" = "target", "response_id" = "known_protein_effect")
row.names(pos_control_group) <- NULL
saveRDS(pos_control_group,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_grouped.rds"))
saveRDS(pos_control_ungroup,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_single.rds"))
}
}
}
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
pc_res_processed <- process_pc_result(pc_res, sample_size_df)
head(pc_res)
tail(pc_res)
head(sample_size_df)
head(sample_size_df_pc)
sample_size_df_pc <- sample_size_df
head(sample_size_df_pc)
sample_size_df_pc$dataset |> unique()
head(sample_size_df)
sample_size_df$dataset_concat |> unique()
head(sample_size_df_pc)
control_sample_size_df <- sample_size_df_pc |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset_concat) |>
summarize(n_control = sum(n_nonzero_cells))
head(sample_size_df_pc)
unique(pc_res$response_id)
head(pc_res)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
#######################################################
# FIRST: compute number of nonzero cells cells per gene
#######################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells,
n_cells = n_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
y <- dplyr::left_join(x, grna_target_df, by = "grna_id") |>
dplyr::mutate(grna_group = factor(target))
}) |> data.table::rbindlist() |>
dplyr::mutate(paper = factor(paper))
}) |> data.table::rbindlist()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
dataset_concat <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
dataset_concat <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
df <- df |> dplyr::mutate(dataset_concat = dataset_concat)
df <- readRDS(to_save_fp)
head(df)
df <- readRDS(to_save_fp)
head(df)
head(df)
df$modality <- NULL
df$dataset <- NULL
df$paper <- NULL
head(df)
dplyr::rename
0
9
head(df)
df <- df |> dplyr::rename(grna_group = target, dataset = dataset_concat)
head(df)
to_save_fp
saveRDS(object = df, file = to_save_fp)
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
head(sample_size_df)
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
head(pc_res)
head(sample_size_df)
sample_size_df$grna_group |> unique()
any(sample_size_df$grna_group == "non-targeting")
head(pc_res)
head(sample_size_df)
control_sample_size_df <- sample_size_df_pc |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset_concat) |>
summarize(n_control = sum(n_nonzero_cells))
control_sample_size_df <- sample_size_df |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset_concat) |>
summarize(n_control = sum(n_nonzero_cells))
head(sample_size_df)
head(pc_res)
head(sample_size_df)
head(pc_res)
sample_size_df_pc <- sample_size_df |>
filter(feature_id %in% unique(pc_res$response_id),
dataset_concat %in% unique(pc_res$dataset))
sample_size_df_pc <- sample_size_df |>
filter(feature_id %in% unique(pc_res$response_id),
dataset %in% unique(pc_res$dataset))
head(sample_size_df_pc)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
# modify the data frame slightly
df <- readRDS(to_save_fp)
head(df)
df <- df |> dplyr::rename(grna_group = target, dataset = dataset_concat, response_id = feature_id)
head(df)
df <- df |> dplyr::rename(response_id = feature_id)
head(Df)
head(df)
saveRDS(object = df, file = to_save_fp)
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
pc_res_processed <- process_pc_result(pc_res, sample_size_df)
head(pc_res)
head(sample_size_df)
sample_size_df_pc <- sample_size_df |>
filter(feature_id %in% unique(pc_res$response_id),
dataset %in% unique(pc_res$dataset)) |>
control_sample_size_df <- sample_size_df |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset_concat) |>
summarize(n_control = sum(n_nonzero_cells))
head(sample_size_df)
sample_size_df_pc <- sample_size_df |>
filter(response_id %in% unique(pc_res$response_id),
dataset %in% unique(pc_res$dataset))
head(sample_size_df_pc)
control_sample_size_df <- sample_size_df |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset_concat) |>
summarize(n_control = sum(n_nonzero_cells))
control_sample_size_df <- sample_size_df |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset) |>
summarize(n_control = sum(n_nonzero_cells))
head(control_sample_size_df)
control_sample_size_df$dataset |> unique()
to_join <- sample_size_df_pc |>
group_by(grna_group, response_id, dataset) |>
summarize(n_treatment = sum(n_nonzero_cells)) |>
select(response_id, grna_group, n_treatment, dataset)
head(to_join)
head(pc_res)
pc_res_w_ss <- left_join(x = pc_res,
y = to_join,
by = c("grna_group", "response_id", "dataset")) |>
left_join(y = control_sample_size_df, by = c("response_id", "dataset"))
pc_res_w_ss
load_all("~/research_code/lowmoi")
load_all("~/research_code/lowmoi")
head(pc_res_w_ss)
pc_res_w_ss |> replace_slash_w_underscore()
pc_res_w_ss <- left_join(x = pc_res,
y = to_join,
by = c("grna_group", "response_id", "dataset")) |>
left_join(y = control_sample_size_df, by = c("response_id", "dataset")) |>
replace_slash_w_underscore()
head(pc_res_w_ss)
combine_schraivogel_enhancer_screens
pc_res_w_ss <- pc_res_w_ss |> combine_schraivogel_enhancer_screens()
head(pc_res_w_ss)
pc_res_w_ss$dataset |> unique()
pc_res_w_ss <- pc_res_w_ss |> update_dataset_and_method_names()
head(pc_res_w_ss)
head(pc_res_w_ss)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
#######################################################
# FIRST: compute number of nonzero cells cells per gene
#######################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells,
n_cells = n_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
y <- dplyr::left_join(x, grna_target_df, by = "grna_id") |>
dplyr::mutate(grna_group = factor(target))
}) |> data.table::rbindlist() |>
dplyr::mutate(paper = factor(paper))
}) |> data.table::rbindlist()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
dataset_concat <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
df <- df |> dplyr::mutate(dataset_concat = dataset_concat)
# saveRDS(object = df, file = to_save_fp)
# modify the data frame slightly
df <- readRDS(to_save_fp)
df$modality <- NULL
df$dataset <- NULL
df$paper <- NULL
df <- df |> dplyr::rename(grna_group = target, dataset = dataset_concat, response_id = feature_id)
head(df)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
#######################################################
# FIRST: compute number of nonzero cells cells per gene
#######################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells,
n_cells = n_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
y <- dplyr::left_join(x, grna_target_df, by = "grna_id") |>
dplyr::mutate(grna_group = factor(target))
}) |> data.table::rbindlist() |>
dplyr::mutate(paper = factor(paper))
}) |> data.table::rbindlist()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
dataset <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
df <- df |> dplyr::mutate(dataset = dataset)
df$modality <- NULL
df$dataset <- NULL
df$paper <- NULL
df <- df |> dplyr::rename(grna_group = target, response_id = feature_id)
head(df)
df <- df |> dplyr::rename(response_id = feature_id)
head(df)
df_old <- readRDS("to_save_fp")
df_old <- readRDS(to_save_fp)
head(df_old)
head(df)
head(df)
# for each dataset, comptue the following:
# i) for each gRNA, the number of cells receiving that gRNA, as well as the number of cells with nonzero gene expression
# i) furthermore, the type of each gRNA
# Thus, we seek to create a data frame with the following columns:
# i) dataset,
# ii) gRNA,
# iii) gene
# iii) n cells with gRNA
# iv) n with gRNA with nonzero gene expression
# v) gRNA type
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
#######################################################
# FIRST: compute number of nonzero cells cells per gene
#######################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells,
n_cells = n_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
y <- dplyr::left_join(x, grna_target_df, by = "grna_id") |>
dplyr::mutate(grna_group = factor(target))
}) |> data.table::rbindlist() |>
dplyr::mutate(paper = factor(paper))
}) |> data.table::rbindlist()
to_save_fp <- paste0(sceptre2_sample_sizes_dir, "n_nonzero_cells_per_grna.rds")
head(df)
dataset <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
head(dataset)
df <- df |> dplyr::mutate(dataset = dataset)
head(df)
full_dataset <- paste0(df$paper, "/", df$dataset, "/", df$modality) |> factor()
head(full_dataset)
df$dataset <- full_dataset
df$modality <- NULL
df$paper <- NULL
head(df)
df <- df |> dplyr::rename(response_id = feature_id)
head(df)
saveRDS(object = df, file = to_save_fp)
