MARGIN = 2,
FUN = function(col) names(which.max(col))) |> unname()
grna_assign_modality <- grna_assign_modality |>
mutate_cell_covariates(assigned_grna = assigned_grna)
if (paper == "schraivogel") {
grna_assign_modality <- grna_assign_modality |>
mutate_feature_covariates(target = ifelse(is.na(known_effect), target, known_effect),
known_effect = NULL)
}
# grna expression modality (if applicable): keep the same features as above
if ("grna_expression" %in% modalities) {
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
if (paper == "schraivogel") {
grna_expression_modality <- grna_expression_modality |>
mutate_feature_covariates(target = known_effect, known_effect = NULL)
}
}
# response modalities: keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_grna = gsub(pattern = "_", replacement = "-", x = assigned_grna, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
if (dataset %in% c("enhancer_screen_chr11", "enhancer_screen_chr8") && paper == "schraivogel") { # special case: dataset is schraivogel/enhancer_screen_chr11 or schraivogel/enhancer_screen_chr8
modality_odm@misc[["mimosca_formula"]] <- formula(~ n_nonzero + n_umis + 0)
modality_odm@misc[["nb_regression_formula"]] <- "~ offset(log(n_umis)) + log(n_nonzero)"
modality_odm@misc[["sceptre_formula"]] <- formula(~ log(response_n_umis) + log(response_n_nonzero))
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
}
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
grna_groups_to_keep <- unique(grna_feature_df$target)
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
trans_pairs <- expand.grid(response_id = feats_to_keep,
grna_group = grna_groups_to_keep) |>
dplyr::arrange(grna_group)
saveRDS(object = trans_pairs, file = paste0(paper_dir, dataset, "/", modality, "/trans_pairs_grouped.rds"))
if (paper == "frangieh" && dataset == "control" && modality == "gene") {
stop("Frangieh control gene")
tf_pairs <- trans_pairs |>
dplyr::filter(grna_group %in% c("E2F1", "FOS", "IRF3", "IRF4", "KLF4", "MYC", "SMAD3",
"SMAD4", "SOX4", "STAT1", "STAT3", "TFAP2A", "TP53"))
saveRDS(object = tf_pairs, file = paste0(paper_dir, dataset, "/", modality, "/tf_pairs_grouped.rds"))
}
if (paper == "papalexi" && dataset == "eccite_screen" && modality == "gene") {
tf_pairs <- trans_pairs |>
dplyr::filter(grna_group %in% c("ATF2", "ETV7", "IRF1", "IRF7", "MYC", "NFKBIA", "POU2F2",
"SMAD4", "SPI1", "STAT1", "STAT2", "STAT3", "STAT5A"))
saveRDS(object = tf_pairs, file = paste0(paper_dir, dataset, "/", modality, "/tf_pairs_grouped.rds"))
}
}
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
# vii. write the positive control pairs (at the level of the paper-dataset)
if (paper %in% c("frangieh", "papalexi")) {
# grouped pairs
targets <- intersect(grna_feature_df |> dplyr::pull(target),
gene_modality |> ondisc::get_feature_ids())
pc_pairs <- data.frame(grna_group = targets, response_id = targets)
# ungrouped pairs
ungroup_map <- data.frame(grna_id = row.names(grna_feature_df),
grna_group = grna_feature_df$target)
ungroup_pc_pairs <- dplyr::left_join(ungroup_map, pc_pairs, by = "grna_group") |>
na.omit() |>
dplyr::select(grna_id, response_id)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
if (paper == "schraivogel") {
targets <- intersect(grna_feature_df |> dplyr::pull(known_effect),
gene_modality |> ondisc::get_feature_ids())
ungroup_pairs_all <- grna_feature_df |>
dplyr::filter(known_effect %in% targets)
# first, grouped pairs
pc_pairs <- ungroup_pairs_all |>
dplyr::select(grna_group = target, response_id = known_effect) |>
dplyr::distinct() |>
na.omit()
rownames(pc_pairs) <- NULL
# next, ungrouped pairs
ungroup_pc_pairs <- data.frame(grna_id = row.names(ungroup_pairs_all),
response_id = ungroup_pairs_all$known_effect)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
# finally, do the papalexi protein data
if (paper == "papalexi") {
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
protein_modality <- mm_odm_sub_proc |> get_modality("protein")
x <- grna_assignment_modality |>
get_feature_covariates() |>
dplyr::filter(!is.na(known_protein_effect),
n_nonzero > 0)
pos_control_ungroup <- data.frame(grna_group = row.names(x),
response_id = x$known_protein_effect)
pos_control_group <- x |>
dplyr::select(target, known_protein_effect) |>
dplyr::distinct() |>
dplyr::rename("grna_group" = "target", "response_id" = "known_protein_effect")
row.names(pos_control_group) <- NULL
saveRDS(pos_control_group,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_grouped.rds"))
saveRDS(pos_control_ungroup,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_single.rds"))
}
}
}
tf_pairs <- trans_pairs |>
dplyr::filter(grna_group %in% c("E2F1", "FOS", "IRF3", "IRF4", "KLF4", "MYC", "SMAD3",
"SMAD4", "SOX4", "STAT1", "STAT3", "TFAP2A", "TP53"))
tf_pairs |> head(5)
head(grna_feature_df)
grna_assignment_modality
grna_feature_df
grna_groups_to_keep
heaD(grna_groups_to_keep)
head(grna_groups_to_keep)
grna_groups_to_keep
head(grna_groups_to_keep)
head(grna_feature_df)
rownames(grna_feature_df)
head(grna_groups_to_keep)
grna_feature_df
grna_groups_to_keep
head(grna_feature_df)
grna_groups_to_keep != "non-targeting"
5 * 30
150 * 12
args <- "false tf_pairs_grouped.rds frangieh/control/gene papalexi/eccite_screen/gene" |> .split_args()
args
trial <- as.logical(args[1])
pairs_to_analyze_file <- args[2]
datasets <- args[seq(3, length(args))] |> unique()
trial
pairs_to_analyze_file
datasets
# loop over datasets, outputting the positive control pairs
out <- NULL
i <0 1L
i <- 1L
dataset_name <- datasets[i]
dataset_name
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_to_analyze_file))
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
trial <- as.logical(args[1])
pairs_to_analyze_file <- args[2]
datasets <- args[seq(3, length(args))] |> unique()
# loop over datasets, outputting the positive control pairs
out <- NULL
out
out
dataset_name <- datasets[i]
dataset_name
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_to_analyze_file))
heaD(df)
head(df)
args <- "frangieh/control/gene 1 seurat_de assignment tf_pairs_grouped.rds false" |> .split_args()
args
dataset_name
dataset_name <- args[1]
dataset_name
dataset_name
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
if (length(args) >= 7) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality
pairs_fils
pairs_file
trial
length(args)
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
response_grna_group_pairs
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
args <- "frangieh/control/gene 2 seurat_de assignment tf_pairs_grouped.rds false true" |> .split_args()
args
dataset_name <- args[1]
dataset_name
idx <- as.integer(args[2])
idx
method_name <- args[3]
method_name
grna_modality <- args[4]
grna_modality
pairs_file <- args[5]
pairs_file
trial <- as.logical(args[6])
trial
grouped <- as.logical(args[7])
grouped
grna_odm
grna_odm |> get_feature_covariates() |> head()
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_feature_df
rownames(grna_feature_df)
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target)
head(grna_map_df)
head(grna_feature_df)
head(grna_feature_df)
head(grna_map_df)
response_grna_group_pairs
head(response_grna_group_pairs)
head(grna_map_df)
head(response_grna_group_pairs)
head(response_grna_group_pairs)
head(grna_map_df)
head(response_grna_group_pairs)
to_analyze <- dplyr::left_join(x = response_grna_group_pairs,
y = grna_map_df, by = "grna_group")
head(response_grna_group_pairs)
head(grna_map_df)
to_analyze <- dplyr::left_join(x = grna_map_df,
y = response_grna_group_pairs, by = "grna_group")
head(grna_map_df)
head(grna_feature_df)
response_grna_group_pairs
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
grna_map_df
grna_map_df
?dplyr::left_join
to_analyze <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group")
head(to_analyze)
tail(to_analyze)
head(to_analyze)
to_analyze <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many")
to_analyze
grna_odm |> get_feature_covariates() |> head()
head(grna_map_df)
tail(grna_map_df)
heaD(grna_map_df)
head(grna_map_df)
head(to_analyze)
head(response_grna_group_pairs)
to_analyze <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group)
head(to_analyze)
to_analyze <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
to_analyze
head(to_analyze)
head(to_analyze)
grna_odm
grna_odm |> get_feature_covariates() |> head()
head(grna_feature_df)
grna_feature_df$target
head(grna_feature_df)
head(rownames(grna_feature_df))
to_analyze
head(to_analyze)
head(grna_feature_df)
ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
head(grna_feature_df)
grna_feature_df
grna_feature_df |> tail()
grna_feature_df
grna_odm@feature_covariates <- grna_feature_df
grna_odm@feature_covariates |> head()
args <- "papalexi/eccite_screen/gene 9 schraivogel_method assignment tf_pairs_grouped.rds false true" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
method_name <- "sceptre"
grna_modality
pairs_file
trial
grouped
grouped <- FALSE
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
args <- "papalexi/eccite_screen/gene 9 schraivogel_method assignment tf_pairs_grouped.rds false true" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
grouped <- as.logical(args[7])
if (length(args) >= 8) {
optional_args <- args[seq(8, length(args))]
} else {
optional_args <- NULL
}
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
}
!grouped
grna_feature_df <- grna_odm |> get_feature_covariates()
grna_map_df <- data.frame(grna_id = rownames(grna_feature_df),
grna_group = grna_feature_df$target) |>
dplyr::filter(grna_group %in% response_grna_group_pairs$grna_group)
grna_map_df
# update the pairs to analyze
response_grna_group_pairs <- dplyr::inner_join(x = response_grna_group_pairs,
y = grna_map_df,
by = "grna_group",
relationship = "many-to-many") |>
dplyr::select(response_id, grna_group = grna_id)
head(response_grna_group_pairs)
# update the gRNA groupings, putting each gRNA into a group of size 1
grna_feature_df$target <- ifelse(grna_feature_df$target == "non-targeting",
grna_feature_df$target,
rownames(grna_feature_df))
grna_odm@feature_covariates <- grna_feature_df
grna_odm@feature_covariates |> head()
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
result_df <- do.call(what = method_name, args = to_pass_list)
method_name
method_name <- "sceptre"
result_df <- do.call(what = method_name, args = to_pass_list)
head(result_df)
dataset
dataset_name
result_df |> head(30)
result_df |> head(40)
hist(result_df$p_value)
head(result_df)
head(result_df)
if (!identical(sort(colnames(result_df)), c("grna_group", "p_value", "response_id"))) {
stop(paste0("The output of `", method_name, "` must be a data frame with columns `response_id`, `grna_group`, and `p_value`."))
}
# add columns indicating the undercover grna, dataset name, and method name
out <- result_df |>
dplyr::mutate(dataset = dataset_name, method = method_name) |>
dplyr::mutate_at(.vars = c("response_id", "grna_group", "dataset", "method"), .funs = factor)
head(out)
