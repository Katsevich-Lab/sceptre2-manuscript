fit_nb <- glm(formula = expression ~ 1,
family = MASS::neg.bin(theta))
fit_nb
# log_lik <- logLik(fit_nb)[[1]]/length(expression)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
fit_p
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 500
dataset <- "papalexi/eccite_screen"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
# arrange(desc(n_nonzero)) |>
# slice(1:10000) |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
gene_id <- gene_ids[1]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm(formula = expression ~ . + 0,
family = MASS::neg.bin(0.1 * theta),
data = as.data.frame(model_mat))
fit_nb$theta <- theta
r <- qresid(fit_nb)
qqnorm(r, las=1)
abline(a = 0, b = 1, col = "blue")
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
head(mus)
head(expression_tilde)
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
fit_nb
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
r <- qresid(fit_nb)
qqnorm(r, las=1)
abline(a = 0, b = 1, col = "blue")
fit_nb$aic
fit_nb$aic
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
fit_nb$aic
m
m
m
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
fit_nb$aic
dataset
gene_id
gene_id <- gene_ids[2]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
real_data_aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
synthetic_aic
gene_id <- gene_ids[3]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
real_data_aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
synthetic_aic
fit_nb$theta <- theta
gene_id <- gene_idss[5]
gene_id <- gene_ids[5]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
synthetic_aic
real_data_aic
gene_ids
res <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
c(synthetic_aic = synthetic_aic, real_data_aic = real_data_aic)
}) |> t()
head(res)
colMeans(res)
res <- res |> dplyr::filter(res synthetic_aic < 1000)
res <- res |> dplyr::filter(synthetic_aic < 1000)
res <- res |> dplyr::filter(synthetic_aic < 1000)
class(res)
res <- as.data.frame(res)
res <- res |> dplyr::filter(synthetic_aic < 1000)
head(res)
colMeans(res)
plot(res)
abline(a = 0, b = 1, col = "blue")
res <- res |> dplyr::filter(synthetic_aic < 1000, real_data_aic < 1000)
plot(res)
abline(a = 0, b = 1, col = "blue")
abline(a = 0, b = 1, col = "blue", pch = 19)
plot(res, pch = 19)
plot(res, pch = 19, cex = 0,5)
plot(res, pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "blue", pch = 19)
head(res)
mean(res$synthetic_aic < res$real_data_aic)
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
theta
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
synthetic_aic
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(10* theta))
synthetic_aic <- fit_nb$aic
synthetic_aic
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(0.1 * theta))
synthetic_aic <- fit_nb$aic
synthetic_aic
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
synthetic_aic
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 500
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
# datasets <- c("frangieh/ifn_gamma",
#               "frangieh/co_culture",
#               "frangieh/control",
#               "papalexi/eccite_screen")
dataset <- "papalexi/eccite_screen"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
# arrange(desc(n_nonzero)) |>
# slice(1:10000) |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
gene_ids
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 2000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
# datasets <- c("frangieh/ifn_gamma",
#               "frangieh/co_culture",
#               "frangieh/control",
#               "papalexi/eccite_screen")
dataset <- "papalexi/eccite_screen"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
# arrange(desc(n_nonzero)) |>
# slice(1:10000) |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
res <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
c(synthetic_aic = synthetic_aic, real_data_aic = real_data_aic)
}) |> t()
colMeans(res)
head(Res)
head(res)
plot(res)
abline(a = 0, b = 1, col = "blue")
seq_along(gene_ids)
i
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 10000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
# datasets <- c("frangieh/ifn_gamma",
#               "frangieh/co_culture",
#               "frangieh/control",
#               "papalexi/eccite_screen")
dataset <- "papalexi/eccite_screen"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
# arrange(desc(n_nonzero)) |>
# slice(1:10000) |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
res <- sapply(seq_along(gene_ids), FUN = function(i) {
if (i %% 20 == 0) print(i)
expression <- as.numeric(response_odm_ntc[[i,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(10 * theta))
fitted_coefs <- coef(fit_nb)
k <- length(fitted_coefs)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
fit_nb$theta <- theta
c(synthetic_aic = synthetic_aic, real_data_aic = real_data_aic)
}) |> t()
plot(res, pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "blue")
res[,1] |> head()
res <- as.data.frame(res)
head(res)
head(Res)
head(res)
mean(res$synthetic_aic < res$real_data_aic)
head(res)
mean(res$synthetic_aic >= 10000)
mean(res$synthetic_aic >= 10000) * 100
mean(res$synthetic_aic >= 5000) * 100
mean(res$synthetic_aic >= 7000) * 100
mean(res$synthetic_aic >= 8000) * 100
mean(res$synthetic_aic >= 9000) * 100
head(res)
result_dir
result_dir
paste0(result_dir, "extra_analyses/")
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 10000
##############################################
# GOODNESS OF FIT ASSESSMENT FOR NB REGRESSION
##############################################
dataset <- "papalexi/eccite_screen"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
res <- sapply(seq_along(gene_ids), FUN = function(i) {
if (i %% 20 == 0) print(i)
expression <- as.numeric(response_odm_ntc[[i,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(theta))
fitted_coefs <- coef(fit_nb)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
c(synthetic_aic = synthetic_aic, real_data_aic = real_data_aic)
}) |> t() |> as.data.frame()
fp <- paste0(result_dir, "extra_analyses/nb_aic_comparison.rds")
plot(res, pch = 19, cex = 0.5)
abline(a = 0, b = 1, col = "blue")
mean(res[,1] > res[,2])
head(res)
mean(res[,1] < res[,2])
head(res)
plot(res)
res |> class()
res <- res |> dplyr::filter(synthetic_aic < 5000)
plot(Res)
plot(res)
abline(a = 0, b = 1, col = "blue")
library(katlabutils)
library(tidyverse)
library(ondisc)
library(statmod)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 10000
##############################################
# GOODNESS OF FIT ASSESSMENT FOR NB REGRESSION
##############################################
dataset <- "frangieh/ifn_gamma"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
row.names() |>
sample(N_GENES)
covariate_matrix <- response_odm_ntc |> get_cell_covariates()
my_formula_str <- response_odm_ntc@misc$nb_regression_formula
model_mat <- model.matrix(object = formula(my_formula_str), data = covariate_matrix)
res <- sapply(seq_along(gene_ids), FUN = function(i) {
if (i %% 20 == 0) print(i)
expression <- as.numeric(response_odm_ntc[[i,]])
# real data fit
theta <- sceptre:::perform_response_precomputation(expressions = expression,
covariate_matrix = model_mat,
regression_method = "poisson")$theta
fit_nb <- glm.fit(y = expression,
x = model_mat,
family = MASS::neg.bin(theta))
fitted_coefs <- coef(fit_nb)
real_data_aic <- fit_nb$aic
# generate synthetic data
mus <- exp(as.numeric(model_mat %*% fitted_coefs))
expression_tilde <- sapply(mus, function(mu) MASS::rnegbin(n = 1, mu = mu, theta = theta))
fit_nb <- glm.fit(y = expression_tilde,
x = model_mat,
family = MASS::neg.bin(theta))
synthetic_aic <- fit_nb$aic
c(synthetic_aic = synthetic_aic, real_data_aic = real_data_aic)
}) |> t() |> as.data.frame()
plot(Res)
plot(res)
abline(a = 0, b = 1, col = "blue")
colMeans(res)
mean(res[,1] < res[,2])
saveRDS(object = res, file = fp)
fp <- paste0(result_dir, "extra_analyses/nb_aic_comparison.rds")
saveRDS(object = res, file = fp)
