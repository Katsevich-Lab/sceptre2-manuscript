rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_qc.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
head(gRNA_tbl)
tail(gRNA_tbl)
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna/metadata_qc.rds"))
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_qc.rds"))
gRNA_odm
gRNA_odm[[1,]]
gRNA_odm[[9,]]
gRNA_odm[[100,]]
gRNA_odm[[5,]]
gRNA_odm[[,1]]
gRNA_assignments
head(gRNA_ids)
gRNA_ids
gRNA_ids[gRNA_assignments]
sceptre2_dir
gRNA_tbl
head(cell_barcodes)
head(gRNA_ids)
as.list(gRNA_ids[gRNA_assignments])
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata.rds"),
features_metadata_df = gRNA_tbl)
gRNA_odm_fp <- paste0(sim_data_dir, "gRNA/matrix.odm")
knitr::opts_chunk$set(echo = TRUE)
library(ondisc)
sim_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/simulated/experiment_1/")
gene_odm_fp <- paste0(sim_data_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(sim_data_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_odm
gRNA_odm_fp <- paste0(sim_data_dir, "gRNA/matrix.odm")
gRNA_metadata_fp <- paste0(sim_data_dir, "gRNA/metadata.rds")
gRNA_odm <- read_odm(odm_fp = gRNA_odm_fp, metadata_fp = gRNA_metadata_fp)
gRNA_odm_fp <- paste0(sim_data_dir, "grna_expression/matrix.odm")
gRNA_metadata_fp <- paste0(sim_data_dir, "grna_expression/metadata.rds")
gRNA_expression_odm_fp <- paste0(sim_data_dir, "grna_expression/matrix.odm")
gRNA_expression_metadata_fp <- paste0(sim_data_dir, "grna_expression/metadata.rds")
gRNA_expression_odm <- read_odm(odm_fp = gRNA_odm_fp, metadata_fp = gRNA_metadata_fp)
gRNA_expression_odm
# Next, the assignment ODM
gRNA_expression_odm_fp <- paste0(sim_data_dir, "grna_assignment/matrix.odm")
gRNA_expression_metadata_fp <- paste0(sim_data_dir, "grna_assignment/metadata.rds")
gRNA_expression_odm <- read_odm(odm_fp = gRNA_odm_fp, metadata_fp = gRNA_metadata_fp)
gRNA_expression_odm
knitr::opts_chunk$set(echo = TRUE)
library(ondisc)
sim_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/simulated/experiment_1/")
gene_odm_fp <- paste0(sim_data_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(sim_data_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_odm
# First, the expression ODM
gRNA_expression_odm_fp <- paste0(sim_data_dir, "grna_expression/matrix.odm")
gRNA_expression_metadata_fp <- paste0(sim_data_dir, "grna_expression/metadata.rds")
gRNA_expression_odm <- read_odm(odm_fp = gRNA_odm_fp, metadata_fp = gRNA_metadata_fp)
gRNA_expression_odm
# Next, the assignment ODM
gRNA_assignment_odm_fp <- paste0(sim_data_dir, "grna_assignment/matrix.odm")
gRNA_assignment_metadata_fp <- paste0(sim_data_dir, "grna_assignment/metadata.rds")
gRNA_assignment_odm <- read_odm(odm_fp = gRNA_assignment_odm_fp, metadata_fp = gRNA_assignment_metadata_fp)
gRNA_assignment_odm
library(ondisc)
sceptre2_offsite_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
sceptre2_offsite_dir
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
papers
paper <- papers[1]
paper
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
datasets
datasets <- list.files(paper_dir)
datasets
dataset <- datasets[1]
dataset
paper
dataset
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
mm_odm
for (paper in papers) {
datasets <- list.files(paper_dir)
for (dataset in datasets) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
for (paper in papers) {
datasets <- list.files(paper_dir)
print(paper)
for (dataset in datasets) {
print(dataset)
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
for (paper in papers) {
datasets <- list.files(paper_dir)
print(paper)
for (dataset in datasets) {
print(dataset)
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
for (paper in papers) {
datasets <- list.files(paper_dir)
print(paper)
for (dataset in datasets) {
print(dataset)
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
for (paper in papers) {
datasets <- list.files(paper_dir)
print(paper)
for (dataset in datasets) {
print(dataset)
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
for (paper in papers) {
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("Paper: ", paper, " Dataset: ", dataset))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
paper_dir
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("Paper: ", paper, " Dataset: ", dataset))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
gRNA_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata.rds"))
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata.rds"),
features_metadata_df = gRNA_tbl)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("Paper: ", paper, " Dataset: ", dataset))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(sceptre2_offsite_dir, "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("Paper: ", paper, " Dataset: ", dataset))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# 0) General save and read multimodal_odm functions
# save
save_multimodal_odm <- function(multimodal_odm, paper, dataset, metadata_file_name, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_list <- multimodal_odm@modalities |> names()
for (modality in modality_list) {
save_odm(odm = get_modality(multimodal_odm, modality),
metadata_fp = paste0(dataset_dir, "/", modality, "/", metadata_file_name))
}
}
# read
read_multimodal_odm <- function(paper, dataset, sceptre2_data_dir = paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")) {
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
odm_list <- list()
for (modality in modality_vect) {
odm_dir <- paste0(dataset_dir, "/", modality, "/")
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
odm_list <- c(odm_list, curr_odm)
}
names(odm_list) <- modality_vect
ret <- multimodal_ondisc_matrix(odm_list)
return(ret)
}
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
print(paste0("Paper: ", paper, " Dataset: ", dataset))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
}
}
paper
dataset
# load the dataset into a multimodal ODM
mm_odm <- read_multimodal_odm(paper, dataset)
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
dataset_dir
modality_list <- multimodal_odm@modalities |> names()
dataset_dir <- paste0(sceptre2_data_dir, paper, "/", dataset)
modality_vect <- list.files(dataset_dir)
modality_vect
odm_list <- list()
modality
modality <- modality_vectp1
modality <- modality_vect[1]
odm_dir <- paste0(dataset_dir, "/", modality, "/")
odm_dor
odm_dir
curr_odm <- read_odm(odm_fp = paste0(odm_dir, "matrix.odm"),
metadata_fp = paste0(odm_dir, "metadata_orig.rds"))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
gRNA_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)), paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_orig.rds"))
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata_orig.rds"),
features_metadata_df = gRNA_tbl)
GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
# frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
# gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_orig.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_tbl <- data.frame(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene-1", N_GRNAS - N_NTC_GRNAS)))
# update the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(gRNA_tbl)
save_odm(odm = gRNA_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_expression/metadata_orig.rds"))
# finally, create the matrix of gRNA assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
gRNA_ids = gRNA_ids,
gRNA_assignment_list = as.list(gRNA_ids[gRNA_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/grna_assignment/metadata_orig.rds"),
features_metadata_df = gRNA_tbl)
