datasets
# This script performs PCA on the TAP-seq and perturb-seq datasets. It then (i)
# adds the top PC to the mattrix of cell-specific covariates and (ii) updates
# the formula object of the gene odm to include the top PC.
library(ondisc)
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/")
paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
dataset_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
dataset_fp
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
dataset_fp <- dataset_fps[1]
dataset_fp
dataset_fp
dataset_fp
paste0(dataset_fp, "/gene")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets, "/gene")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
gene_metadata <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm <- paste0(dataset_fp, "/gene/matrix.odm")
gene_metadata
gene_odm
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_metadata_fp, gene_odm_fp)
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
odm
mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
mat
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) + 1)
rm(gene_mat)
gene_mat_norm
dim(gene_mat_norm)
# perform pca
pca_fit <- prcomp(x = gene_mat_norm, center = TRUE, scale. = TRUE)
pca_fit
pc_1 <- pca_fit$x[,1]
head(pc_1)
hsit(pc_1)
names(pc_1) <- NULL
head(pc_1)
# This script performs PCA on the TAP-seq and perturb-seq datasets. It then (i)
# adds the top PC to the mattrix of cell-specific covariates and (ii) updates
# the formula object of the gene odm to include the top PC.
library(ondisc)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
dataset_fp
# This script performs PCA on the TAP-seq and perturb-seq datasets. It then (i)
# adds the top PC to the mattrix of cell-specific covariates and (ii) updates
# the formula object of the gene odm to include the top PC.
library(ondisc)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
# load odm into memory
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
# obtain library sizes and normalize the expression matrix
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) + 1)
rm(gene_mat)
gene_mat
gene_mat_norm
dim(gene_mat_norm)
dataset_fp <- dataset_fps[2]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
# load odm into memory
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
dim(gene_mat)
dim(dataset_fp)
dim(gene_mat)
ncol(gene_mat)
lib_sizes <- rowSums(gene_mat)
head(lib_sizes)
gene_expressions <- colSums(gene_mat)
head(gene_expressions)
tail(gene_expressions)
sort(gene_expressions) |> head()
sort(gene_expressions, decreasing = TRUE) |> head()
sort(gene_expressions, decreasing = TRUE)[1:50]
sort(gene_expressions, decreasing = TRUE)[1:500]
top_genes <- names(sort(gene_expressions, decreasing = TRUE)[1:500])
head(top_genes)
head(top_genes)
gene_mat <- gene_mat[,top_genes]
head(gene_mat)
dim(gene_mat)
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) + 1)
head(gene_mat_norm)
rm(gene_mat)
head(gene_mat_norm)
tail(gene_mat_norm)
# perform pca
pca_fit <- prcomp(x = gene_mat_norm, center = TRUE, scale. = TRUE)
head(pca_fit)
pca_fit$sdev |> head()
pca_fit$sdev |> plot()
# This script performs PCA on the TAP-seq and perturb-seq datasets. It then (i)
# adds the top PC to the mattrix of cell-specific covariates and (ii) updates
# the formula object of the gene odm to include the top PC.
library(ondisc)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
pca_fit
summary(pca_fit)
library(Seurat)
head(gene_mat)
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj
obj <- NormalizeData(obj)
head(obj)
obj
obj@assays$RNA@counts |> head()
obj@assays$RNA@data
obj <- FindVariableFeatures(object = obj, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(pbmc), 10)
top10 <- head(VariableFeatures(obj), 10)
top10
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(pbmc, features = VariableFeatures(object = obj))
obj <- RunPCA(obj, features = VariableFeatures(object = obj))
obj@reductions$pca@cell.embeddings |> head()
obj@reductions$pca@feature.loadings |> head()
obj@reductions$pca@jackstraw
ElbowPlot(obj)
DimPlot
DimPlot(obj, reduction = "pca")
plot(obj@reductions$pca@cell.embeddings[,1:2])
plot(obj@reductions$pca@feature.loadings.projected[,1:2])
obj@reductions$pca@feature.loadings.projected |> head
obj@reductions$pca@feature.loadings.projected |> head()
obj@reductions$pca@feature.loadings |> head()
obj@reductions$pca@feature.loadings[,1:2] |> plot()
ElbowPlot(obj)
# ElbowPlot(obj)
top_pcs <- obj@reductions$pca@cell.embeddings[,1:2]
head(top_pcs)
tail(top_pcs)
hist(top_pcs[,1]) |> hist()
top_pcs[,1] |> hist()
top_pcs[,2] |> hist()
head(top_pcs)
tail(top_pcs)
head(top_pcs)
row.names(top_pcs) <- NULL
head(top_pcs)
top_pcs[,1] |> hist
top_pcs[,1] |> hist()
ElbowPlot(obj)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
dataset_fp
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
gene_metadata_fp
gene_odm_fp
odm
# load odm into memory
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
gene_mat
dim(gene_mat)
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
dim(obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj))
dim(gene_mat)
# load odm into memory
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = all.genes)
ElbowPlot(obj)
obj@reductions$pca@cell.embeddings[,1]
pc_1 <- obj@reductions$pca@cell.embeddings[,1]
hist(pc_1)
pc_1 <- obj@reductions$pca@feature.loadings[,1]
hist(pc_1)
pc_1 <- obj@reductions$pca@feature.loadings.projected[,1]
hist(pc_1)
pc_1 <- obj@reductions$pca
obj@reductions$pca@stdev |> head()
obj@reductions$pca@cell.embeddings |> head()
obj@reductions$pca@cell.embeddings[,1]
obj@reductions$pca@cell.embeddings[,1] |> hist()
obj@reductions$pca@cell.embeddings[,1]
obj@reductions$pca@assay.used
obj@reductions$pca@key
obj@meta.data |> head()
length(pc_1)
# load odm into memory
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = gene_mat)
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
head(all.genes)
tail(all.genes)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = all.genes)
obj
pc_1 <- obj@reductions$pca
length(pc_1)
# load odm into memory
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = t(gene_mat))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
head(all.genes)
# load odm into memory
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = all.genes)
obj@reductions$pca@cell.embeddings[,1]
obj@reductions$pca@feature.loadings[,1] |> length()
obj@reductions$pca@feature.loadings[,2]
obj@reductions$pca
obj@reductions$pca@cell.embeddings[1,]
obj@reductions$pca@cell.embeddings[1,] |> length()
obj@reductions$pca@cell.embeddings[,1] |> length()
obj@reductions$pca@cell.embeddings[,1] |> length()
obj@reductions$pca@cell.embeddings[,1] |> hist()
x <- obj@reductions$pca@cell.embeddings[,1]
length(x)
hist(x)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
# load odm into memory
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
length(all.genes)
obj <- RunPCA(obj, features = all.genes)
obj
obj@reductions
obj <- RunPCA(obj, features = all.genes)
# Using prcomp
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(mm_odm@modalities$gene)))
# Using prcomp
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) + 1)
# perform PCA
pca_fit <- prcomp(x = gene_mat_norm, center = TRUE, scale. = TRUE)
pca_fit$sdev |> head()
obj@reductions$pca@stdev |> head()
head(X)
head(X)
obj@reductions$pca@cell.embeddings[,1] |> length()
pca_fit$rotation[,1] |> head()
pca_fit$rotation[,1] |> hist()
obj@reductions$pca@cell.embeddings[,1] |> hist()
obj@reductions$pca@feature.loadings[,1] |> hist()
pca_fit$rotation[,1] |> hist()
pca_fit$center
pca_fit$x[,1]
pca_fit$x[,1] |> hist()
pca_fit$[,1] |> hist()
obj@reductions$pca@feature.loadings[,1] |> hist()
obj@reductions$pca@cell.embeddings[,1] |> hist()
pca_fit$x[,1] |> hist()
VizDimLoadings(obj, dims = 1:2, reduction = "pca")
obj@reductions$pca@cell.embeddings[,1] |> hist()
pca_fit$x[,1] |> hist()
?prcomp
obj@reductions$pca@cell.embeddings[,1] |> hist()
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1] |> hist()
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1] |> hist()
pc1_prcomp <- pca_fit$x[,1] |> hist()
hist(pc1_seurat)
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1] |> hist()
hsit(pc1_seurat)
hist(pc1_seurat)
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]
pc1_prcomp <- pca_fit$x[,1] |> hist()
hist(pc1_prcomp)
obj@reductions$pca@cell.embeddings[,1]
pc1_prcomp <- pca_fit$x[,1]
hist(pc1_seurat)
hist(pc1_prcomp)
plot(pc1_seurat, pc1_prcomp)
pc1_seurat <- log(obj@reductions$pca@cell.embeddings[,1])
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]
hist(pc1_seurat)
plot(pc1_seurat, pc1_prcomp)
obj@assays$RNA@counts[1:5, 1:4]
obj@assays$RNA@counts[1:5, 1:5]
obj@assays$RNA@scale.data
obj@assays$RNA@scale.data[1:5,1:5]
obj@assays$RNA@scale.data[1:5,1:5]
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) + 1)
gene_mat_norm[1:5, 1:5]
obj@assays$RNA@data[1:5,1:5]
gene_mat_norm <- 10000 * log((gene_mat/lib_sizes) + 1)
gene_mat_norm[1:5, 1:5]
gene_mat_norm <- 1000 * log((gene_mat/lib_sizes) + 1)
gene_mat_norm[1:5, 1:5]
head(lib_sizes)
length(lib_sizes)
lib_sizes <- rowSums(gene_mat)
head(lib_sizes)
tail(lib_sizes)
scale_factor
# Using prcomp
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) * 10000 + 1)
gene_mat_norm[1:5, 1:5]
obj@assays$RNA@scale.data[1:5,1:5]
obj@assays$RNA@data[1:5,1:5]
obj@assays$RNA@data[1:5,1:5] |> t()
t(obj@assays$RNA@data[1:5,1:5])
obj@assays$RNA@data[1:5,1:5] |> as.matrix() |> t()
gene_mat_norm[1:5, 1:5]
dim(gene_mat_norm)
gene_mat_norm <- scale(gene_mat_norm)
gene_mat_norm[1:5, 1:5]
obj@assays$RNA@scale.data[1:5,1:5] |> as.matrix() |> t()
library(ondisc)
library(Seurat)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj@assays$RNA@scale.data[1:5,1:5] |> as.matrix() |> t()
obj <- RunPCA(obj, features = all.genes)
x <- obj@reductions$pca@stdev |> head()
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]
ene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) * 10000 + 1)
gene_mat_norm <- scale(gene_mat_norm)
pca_fit <- prcomp(x = gene_mat_norm, center = FALSE, scale. = FALSE)
gene_mat <- t(as.matrix(lowmoi::load_whole_odm(odm)))
lib_sizes <- rowSums(gene_mat)
gene_mat_norm <- log((gene_mat/lib_sizes) * 10000 + 1)
gene_mat_norm <- scale(gene_mat_norm)
pca_fit <- prcomp(x = gene_mat_norm, center = FALSE, scale. = FALSE)
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]
pc1_prcomp <- pca_fit$x[,1]
head(pc1_seurat)
head(pc1_prcomp)
hist(pc1_seurat, pc1_prcomp)
plot(pc1_seurat, pc1_prcomp)
plot(pc1_seurat, -pc1_prcomp)
hist(pc1_prcomp)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
library(ondisc)
library(Seurat)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
# create seurat object
obj <- CreateSeuratObject(counts = as.matrix(lowmoi::load_whole_odm(odm)))
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = all.genes)
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]
head(pc1_seurat)
hist(pc1_seurat)
pc1_seurat <- obj@reductions$pca@cell.embeddings[,1]* -1
head(pc1_seurat)
names(pc1_seurat) <- FALSE
hist(pc1_seurat)
sds <- obj@reductions$pca@stdev
head(sds)
sds/sum(sds)
100 * sds/sum(sds)
sum(100 * sds/sum(sds))
plot(sds)
var_exp <- sds^2/sum(sds^2)
head(var_exp)
plot(var_exp)
# add leading pc as covariate
odm
# add leading pc as covariate
odm |> get_cell_covariates() |> head()
# add leading pc as covariate
odm <- odm |> mutate_cell_covariates(pc_1 = pc1_seurat)
odm |> get_cell_covariates() |> heaD()
odm |> get_cell_covariates() |> head()
odm@misc$mimosca_formula
update(odm@misc$mimosca_formula, ~ . + pc_1)
odm@misc$mimosca_formula <- update(odm@misc$mimosca_formula, ~ . + pc_1)
odm@misc$nb_regression_formula
odm@misc$nb_regression_formula <- update(odm@misc$nb_regression_formula, ~ . + pc_1)
update(odm@misc$nb_regression_formula, ~ . + pc_1)
odm@misc$nb_regression_formula
paste0(odm@misc$nb_regression_formula,  "+ pc_1")
paste0(odm@misc$nb_regression_formula,  " + pc_1")
odm@misc$sceptre_formula
paste0(odm@misc$sceptre_formula, ~ . + pc_1)
odm@misc$sceptre_formula
update(odm@misc$sceptre_formula, ~ . + pc_1)
gene_metadata_fp
gene_odm_fp
dataset_fp
gene_metadata_fp
odm
gene_metadata_fp
save_odm(odm = odm, metadata_fp = gene_metadata_fp)
odm
library(ondisc)
library(Seurat)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
########################
# 1. PCA on TAP-seq data
########################
dataset_fp <- dataset_fps[1]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
odm
odm |> get_cell_covariates() |> head()
odm |> get_cell_covariates() |> head() |> pull(pc_1) |> hist()
odm |> get_cell_covariates() |> dplyr::pull(pc_1) |> hist()
library(ondisc)
library(Seurat)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
#######################
# 2. PCA on perturb-seq
#######################
dataset_fp <- dataset_fps[1]
#######################
# 2. PCA on perturb-seq
#######################
dataset_fp <- dataset_fps[2]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
odm
obj <- CreateSeuratObject(counts = gene_mat)
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- ScaleData(obj, features = all.genes)
pbmc <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
# create seurat object
obj <- CreateSeuratObject(counts = gene_mat)
obj <- NormalizeData(obj)
# the formula object of the gene odm to include the top PC.
library(ondisc)
library(Seurat)
datasets <- c("ground_truth_tapseq", "ground_truth_perturbseq")
dataset_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/schraivogel/", datasets)
#######################
# 2. PCA on perturb-seq
#######################
dataset_fp <- dataset_fps[2]
gene_metadata_fp <- paste0(dataset_fp, "/gene/metadata_qc.rds")
gene_odm_fp <- paste0(dataset_fp, "/gene/matrix.odm")
odm <- read_odm(gene_odm_fp, gene_metadata_fp)
gene_mat <- as.matrix(lowmoi::load_whole_odm(odm))
# create seurat object
obj <- CreateSeuratObject(counts = gene_mat)
obj <- NormalizeData(obj)
all.genes <- rownames(obj)
obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
obj
obj <- ScaleData(obj, features = all.genes)
obj <- RunPCA(obj, features = all.genes)
