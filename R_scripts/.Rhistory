get_feature_covariates() |>
dplyr::arrange(n_nonzero)
response_odm_ntc |>
get_feature_covariates() |>
dplyr::arrange(n_nonzero) |> head()
?arrange
response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |> head()
highly_exp_genes <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
highly_exp_genes
head(highly_exp_genes)
# perform the sample split
set.seed(4)
response_odm_ntc
n_ntc_cells <- ncol(response_odm_ntc)
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula_str
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
my_formula
gene_ids <- get_feature_ids(response_odm)
jheaD(gene_ids)
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
head(cell_covariates_ntc_s1)
nrow(cell_covariates_ntc_s1)
nrow(cell_covariates_ntc_s2)
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:20) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
thetas
print(gene_id)
gene_id <- gene_ids[1]
print(gene_id)
curr_theta <- thetas[[gene_id]]
curr_theta
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
expression
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
heaD(curr_data_matrix)
head(curr_data_matrix)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_nb
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
fit_p
fit_nb$deviance
fit_nb$df.residual
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
head(fit_ps)
hist(fit_ps)
head(thetas)
plot(thetas, fit_ps)
hist(fit_ps)
head(thetas)
nrow(cell_covariates_ntc_s1)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
mm <- lowmoi::load_dataset_multimodal(paper_fp = "frangieh/ifn_gamma",
offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
hist(thetas)
hist(thetas, breaks = 30)
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
head(fit_ps)
hist(fit_ps)
hist(fit_ps, breaks = 50)
hist(fit_ps, breaks = 25)
df <- data.frame(y = fit_ps)
ggplot(data = df, mapping = aes(y = y)) +
geom_histogram(breaks = 30)
ggplot(data = df, mapping = aes(y = y)) +
geom_histogram()
df <- data.frame(y = fit_ps)
df <- data.frame(x = fit_ps)
ggplot(data = df, mapping = aes(x = x)) +
geom_histogram()
ggplot(data = df, mapping = aes(x = x)) +
geom_histogram() +
scale_y_log10()
fit_ps |> min()
df <- data.frame(x = fit_ps + 1e-6)
ggplot(data = df, mapping = aes(x = x)) +
geom_histogram() +
scale_y_log10()
df <- data.frame(x = fit_ps)
ggplot(data = df, mapping = aes(x = x)) +
geom_histogram(bins = 20) +
scale_y_log10()
df <- data.frame(x = fit_ps)
fit_ps
head(fit_ps)
head(fit_ps)
tail(fit_ps)
hist(fit_ps)
sceptre::make_qq_plot(fit_ps)
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_seq")
mm <- lowmoi::load_dataset_multimodal(paper_fp = "frangieh/ifn_gamma",
offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_seq")
dataset <- datasets[1]
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset,
offsite_dir = sceptre2_dir)
mmm
mm
response_odm <- mm |> get_modality("gene")
response_odm
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
head(gene_ids)
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
n_ntc_cells
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
source("~/research_code/sceptre2-manuscript/R_scripts/nb_model_fit.R")
datasets
dataset <- datasets[1]
dataset
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:500) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
N_GENES <- 20
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 20
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_seq")
data.frame(theta = thetas, p = fit_ps)
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
dataset <- "papalexi/eccite_seq"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 20
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
head(res)
tail(res)
tail(res, 100)
library(katlabutils)
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8)
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
res
res |>
filter(dataset == "papalexi/eccite_screen")
res |>
filter(dataset == "papalexi/eccite_screen") |>
pull(p)
res |>
filter(dataset == "papalexi/eccite_screen") |>
pull(p) |> hist()
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 500
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
})
# p-values from deviance-based goodness of fit tests -- ideally the p-values are uniform
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
res |>
ggplot(mapping = aes(y = p, col = dataset)) +
stat_qq_points(ymin = 1e-9, size = 0.8) +
geom_abline(col = "darkred") +
stat_qq_band() +
theme_bw() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected quantile", y = "Observed quantile") +
theme(legend.position = "bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank())
