keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
# Papalexi QQ plot
qq_papalexi <- undercover_res |>
mutate(Method = fct_relevel(Method, "Seurat-Wilcox", "SCEPTRE", after = Inf)) |>
filter(dataset == "papalexi_eccite_screen_gene",
method %in% c("sceptre", "seurat_de", "seurat_de_nb")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle("Papalexi (gene) neg. controls") +
scale_color_manual(values = my_values) +
my_theme_no_legend
#################################################################
# Put the pieces together and save
#################################################################
# put the pieces together
final_plot <- ggarrange(
ggarrange(qq_frangieh, qq_papalexi, nrow = 1),
as_ggplot(nt_table_g),
as_ggplot(pc_table_g),
labels = "auto",
heights = c(1.2, 1, 0.8),
ncol = 1
)
# define the file path
fig_4_filename <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_4/fig_4.png"
)
# save the figure
ggsave(filename = fig_4_filename,
plot = final_plot,
device = "png",
width = 7,
height = 8.5,
bg = "white")
lowmoi:::run_glm_perm_score_test_with_ingredients
lowmoi:::run_glm_perm_score_test_with_ingredients
lowmoi:::run_glm_perm_score_test_with_ingredients
library(ondisc)
library(sceptre2)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
###########################
# STEP 1: SET UP SIMULATION
###########################
# 1. load Papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
grna_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/grna_assignment")
grna_targets <- lowmoi::get_target_assignments_via_max_op(grna_odm)
# 2. get the gRNA group info
my_grna <- "CUL3"
grna_group_info <- lowmoi:::get_grna_group_info(grna_group_assignments = grna_targets,
input_grna_groups = my_grna)
idxs <- c(grna_group_info$grna_specific_idxs[[my_grna]],
grna_group_info$grna_specific_idxs[["non-targeting"]])
orig_x <- c(rep(1, grna_group_info$n_cells_per_grna[[my_grna]]),
rep(0, grna_group_info$n_cells_per_grna[["non-targeting"]]))
# 3. get covariate matrix
covariate_matrix_df <- response_odm |>
get_cell_covariates() |>
dplyr::slice(idxs) |>
dplyr::select(n_nonzero, n_umis, bio_rep, phase, p_mito)
row.names(covariate_matrix_df) <- NULL
Z <- model.matrix(object = formula(~ log(n_nonzero) + log(n_umis) + bio_rep + phase + p_mito),
data = covariate_matrix_df)
colnames(Z) <- c("intercept", "lg_n_nonzero", "lg_n_umis", "bio_rep_d1", "bio_rep_d2", "phase_d1", "phase_d2", "p_mito")
# 4. select gene
ex_gene <- "CXCL10"
orig_y <- as.numeric(response_odm[[ex_gene, idxs]])
# 5. get the model for y | Z
fit_y_orig <- MASS::glm.nb(formula = orig_y ~ . + 0, data = as.data.frame(Z))
y_coef <- coef(fit_y_orig)
theta <- fit_y_orig$theta
mus_y <- exp(as.numeric(Z %*% y_coef))
#################################
# STEP 2: RUN SIMULATION FUNCTION
#################################
run_simulation <- function(Y, idx_mat, Z, theta_hypothesized, n_sim = NULL, return_null_dist = FALSE, approx = TRUE) {
resamp_dist <- list()
if (is.null(n_sim)) n_sim <- ncol(Y)
out_m <- matrix(nrow = n_sim, ncol = 3)
for (i in seq(1, n_sim)) {
print(paste0("Running simulation ", i))
y <- Y[,i]
# regress the synthetic Y onto Z
fit <- glm(y ~ Z + 0,
family = MASS::negative.binomial(theta = theta_hypothesized))
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
# compute theoretical and empirical p-values
p_theory <- 2 * pnorm(q = -abs(z_star), lower.tail = TRUE)
p_camp <- lowmoi:::compute_empirical_p_value(z_star = z_star, z_null = z_null, "both")
# finally, compute permutation
ts <- lowmoi:::low_level_permutation_test(y = y, index_mat = idx_mat)
t_star <- ts[1]
t_null <- ts[-1]
p_perm <- lowmoi:::compute_empirical_p_value(t_star, t_null, "both")
out_m[i,] <- c(p_theory = p_theory, p_camp = p_camp, p_perm = p_perm)
if (i == 1) {
resamp_dist[["camp_null"]] <- z_null
resamp_dist[["camp_star"]] <- z_star
resamp_dist[["perm_null"]] <- ts
resamp_dist[["perm_star"]] <- t_star
}
}
colnames(out_m) <- c("p_theory", "p_camp", "p_perm")
return(list(out_m = out_m, resamp_dist = resamp_dist))
}
##############################################
# STEP 3: GENERATE CORRELATED DATA AND RUN SIM
##############################################
n_sim <- 2000
n_sim <- 2
set.seed(3)
# y first
Y <- sapply(X = mus_y, FUN = function(mu_y) MASS::rnegbin(n = n_sim, mu = mu_y, theta = theta)) |> t()
Y
# keep x fixed
x_idx <- which(orig_x == 1)
B <- 100000
x_tilde <- replicate(n = B, expr = sample.int(n = length(orig_x), size = sum(orig_x)))
idx_mat <- cbind(matrix(x_idx, ncol = 1), x_tilde) - 1L
# run sim
sim_res_correlated_corret_model <- run_simulation(Y = Y, idx_mat = idx_mat,
Z = Z, theta_hypothesized = theta,
return_null_dist = TRUE, approx = FALSE)
library(ondisc)
library(sceptre2)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
###########################
# STEP 1: SET UP SIMULATION
###########################
# 1. load Papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
grna_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/grna_assignment")
grna_targets <- lowmoi::get_target_assignments_via_max_op(grna_odm)
# 2. get the gRNA group info
my_grna <- "CUL3"
grna_group_info <- lowmoi:::get_grna_group_info(grna_group_assignments = grna_targets,
input_grna_groups = my_grna)
idxs <- c(grna_group_info$grna_specific_idxs[[my_grna]],
grna_group_info$grna_specific_idxs[["non-targeting"]])
orig_x <- c(rep(1, grna_group_info$n_cells_per_grna[[my_grna]]),
rep(0, grna_group_info$n_cells_per_grna[["non-targeting"]]))
# 3. get covariate matrix
covariate_matrix_df <- response_odm |>
get_cell_covariates() |>
dplyr::slice(idxs) |>
dplyr::select(n_nonzero, n_umis, bio_rep, phase, p_mito)
row.names(covariate_matrix_df) <- NULL
Z <- model.matrix(object = formula(~ log(n_nonzero) + log(n_umis) + bio_rep + phase + p_mito),
data = covariate_matrix_df)
colnames(Z) <- c("intercept", "lg_n_nonzero", "lg_n_umis", "bio_rep_d1", "bio_rep_d2", "phase_d1", "phase_d2", "p_mito")
# 4. select gene
ex_gene <- "CXCL10"
orig_y <- as.numeric(response_odm[[ex_gene, idxs]])
# 5. get the model for y | Z
fit_y_orig <- MASS::glm.nb(formula = orig_y ~ . + 0, data = as.data.frame(Z))
y_coef <- coef(fit_y_orig)
theta <- fit_y_orig$theta
mus_y <- exp(as.numeric(Z %*% y_coef))
#################################
# STEP 2: RUN SIMULATION FUNCTION
#################################
run_simulation <- function(Y, idx_mat, Z, theta_hypothesized, n_sim = NULL, return_null_dist = FALSE, approx = TRUE) {
resamp_dist <- list()
if (is.null(n_sim)) n_sim <- ncol(Y)
out_m <- matrix(nrow = n_sim, ncol = 3)
for (i in seq(1, n_sim)) {
print(paste0("Running simulation ", i))
y <- Y[,i]
# regress the synthetic Y onto Z
fit <- glm(y ~ Z + 0,
family = MASS::negative.binomial(theta = theta_hypothesized))
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
# compute theoretical and empirical p-values
p_theory <- 2 * pnorm(q = -abs(z_star), lower.tail = TRUE)
p_camp <- lowmoi:::compute_empirical_p_value(z_star = z_star, z_null = z_null, "both")
# finally, compute permutation
ts <- lowmoi:::low_level_permutation_test(y = y, index_mat = idx_mat)
t_star <- ts[1]
t_null <- ts[-1]
p_perm <- lowmoi:::compute_empirical_p_value(t_star, t_null, "both")
out_m[i,] <- c(p_theory = p_theory, p_camp = p_camp, p_perm = p_perm)
if (i == 1) {
resamp_dist[["camp_null"]] <- z_null
resamp_dist[["camp_star"]] <- z_star
resamp_dist[["perm_null"]] <- ts
resamp_dist[["perm_star"]] <- t_star
}
}
colnames(out_m) <- c("p_theory", "p_camp", "p_perm")
return(list(out_m = out_m, resamp_dist = resamp_dist))
}
##############################################
# STEP 3: GENERATE CORRELATED DATA AND RUN SIM
##############################################
n_sim <- 2000
set.seed(3)
# y first
Y <- sapply(X = mus_y, FUN = function(mu_y) MASS::rnegbin(n = n_sim, mu = mu_y, theta = theta)) |> t()
# keep x fixed
x_idx <- which(orig_x == 1)
B <- 100000
x_tilde <- replicate(n = B, expr = sample.int(n = length(orig_x), size = sum(orig_x)))
idx_mat <- cbind(matrix(x_idx, ncol = 1), x_tilde) - 1L
# run sim
sim_res_correlated_corret_model <- run_simulation(Y = Y, idx_mat = idx_mat,
Z = Z, theta_hypothesized = theta,
return_null_dist = TRUE, approx = FALSE)
library(ondisc)
library(sceptre2)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
###########################
# STEP 1: SET UP SIMULATION
###########################
# 1. load Papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
grna_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/grna_assignment")
grna_targets <- lowmoi::get_target_assignments_via_max_op(grna_odm)
# 2. get the gRNA group info
my_grna <- "CUL3"
grna_group_info <- lowmoi:::get_grna_group_info(grna_group_assignments = grna_targets,
input_grna_groups = my_grna)
idxs <- c(grna_group_info$grna_specific_idxs[[my_grna]],
grna_group_info$grna_specific_idxs[["non-targeting"]])
orig_x <- c(rep(1, grna_group_info$n_cells_per_grna[[my_grna]]),
rep(0, grna_group_info$n_cells_per_grna[["non-targeting"]]))
# 3. get covariate matrix
covariate_matrix_df <- response_odm |>
get_cell_covariates() |>
dplyr::slice(idxs) |>
dplyr::select(n_nonzero, n_umis, bio_rep, phase, p_mito)
row.names(covariate_matrix_df) <- NULL
Z <- model.matrix(object = formula(~ log(n_nonzero) + log(n_umis) + bio_rep + phase + p_mito),
data = covariate_matrix_df)
colnames(Z) <- c("intercept", "lg_n_nonzero", "lg_n_umis", "bio_rep_d1", "bio_rep_d2", "phase_d1", "phase_d2", "p_mito")
# 4. select gene
ex_gene <- "CXCL10"
orig_y <- as.numeric(response_odm[[ex_gene, idxs]])
# 5. get the model for y | Z
fit_y_orig <- MASS::glm.nb(formula = orig_y ~ . + 0, data = as.data.frame(Z))
y_coef <- coef(fit_y_orig)
theta <- fit_y_orig$theta
mus_y <- exp(as.numeric(Z %*% y_coef))
#################################
# STEP 2: RUN SIMULATION FUNCTION
#################################
run_simulation <- function(Y, idx_mat, Z, theta_hypothesized, n_sim = NULL, return_null_dist = FALSE, approx = TRUE) {
resamp_dist <- list()
if (is.null(n_sim)) n_sim <- ncol(Y)
out_m <- matrix(nrow = n_sim, ncol = 3)
for (i in seq(1, n_sim)) {
print(paste0("Running simulation ", i))
y <- Y[,i]
# regress the synthetic Y onto Z
fit <- glm(y ~ Z + 0,
family = MASS::negative.binomial(theta = theta_hypothesized))
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
# compute theoretical and empirical p-values
p_theory <- 2 * pnorm(q = -abs(z_star), lower.tail = TRUE)
p_camp <- lowmoi:::compute_empirical_p_value(z_star = z_star, z_null = z_null, "both")
# finally, compute permutation
ts <- lowmoi:::low_level_permutation_test(y = y, index_mat = idx_mat)
t_star <- ts[1]
t_null <- ts[-1]
p_perm <- lowmoi:::compute_empirical_p_value(t_star, t_null, "both")
out_m[i,] <- c(p_theory = p_theory, p_camp = p_camp, p_perm = p_perm)
if (i == 1) {
resamp_dist[["camp_null"]] <- z_null
resamp_dist[["camp_star"]] <- z_star
resamp_dist[["perm_null"]] <- ts
resamp_dist[["perm_star"]] <- t_star
}
}
colnames(out_m) <- c("p_theory", "p_camp", "p_perm")
return(list(out_m = out_m, resamp_dist = resamp_dist))
}
##############################################
# STEP 3: GENERATE CORRELATED DATA AND RUN SIM
##############################################
n_sim <- 2000
set.seed(3)
# y first
Y <- sapply(X = mus_y, FUN = function(mu_y) MASS::rnegbin(n = n_sim, mu = mu_y, theta = theta)) |> t()
# keep x fixed
x_idx <- which(orig_x == 1)
B <- 100000
x_tilde <- replicate(n = B, expr = sample.int(n = length(orig_x), size = sum(orig_x)))
idx_mat <- cbind(matrix(x_idx, ncol = 1), x_tilde) - 1L
sim_res_correlated_corret_model <- run_simulation(Y = Y, idx_mat = idx_mat,
Z = Z, theta_hypothesized = theta,
return_null_dist = TRUE, approx = FALSE)
lowmoi:::low_level_score_test_vectorized()
lowmoi:::low_level_score_test_vectorized
Y = Y; idx_mat = idx_mat
Z = Z; theta_hypothesized = theta
return_null_dist = TRUE; approx = FALSE
resamp_dist <- list()
if (is.null(n_sim)) n_sim <- ncol(Y)
out_m <- matrix(nrow = n_sim, ncol = 3)
i <- 1L
print(paste0("Running simulation ", i))
y <- Y[,i]
# regress the synthetic Y onto Z
fit <- glm(y ~ Z + 0,
family = MASS::negative.binomial(theta = theta_hypothesized))
i == 1 || !approx
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
i == 1 || !approx
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
lowmoi:::run_glm_perm_score_test_with_ingredients
Z = Z
working_resid = fit$residuals
w = fit$weights
index_mat = idx_mat
load_all("~/research_code/lowmoi")
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
# compute Z^T w (to be used throughout)
ZtW <- sapply(X = seq(1, length(w)), FUN = function(i) w[i] * Z[i,])
# compute the precision matrix P = Z^t W Z
P <- ZtW %*% Z
# compute the spectral decomposition of P
P_decomp <- eigen(P)
# obtain U and Lambda^(-1/2)
U <- P_decomp$vectors
Lambda_minus_half <- 1/sqrt(P_decomp$values)
# compute the matrix B = Lambda^(1/2) U^t (Z^t W)
B <- (Lambda_minus_half * t(U)) %*% ZtW
# next, compute the vector W M (Y - mu_hat)
a <- w * working_resid
# compute the vector of z-scores
z_scores <- low_level_score_test_vectorized(a = a, B = B, w = w, index_mat = index_mat)
low_level_score_test_vectorized
head(a)
head(B)
head(w)
head(index_mat)
10
low_level_score_test_vectorized
low_level_score_test_vectorized(a = a, B = B, w = w, index_mat = index_mat)
library(ondisc)
library(sceptre2)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
###########################
# STEP 1: SET UP SIMULATION
###########################
# 1. load Papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
grna_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/grna_assignment")
grna_targets <- lowmoi::get_target_assignments_via_max_op(grna_odm)
# 2. get the gRNA group info
my_grna <- "CUL3"
grna_group_info <- lowmoi:::get_grna_group_info(grna_group_assignments = grna_targets,
input_grna_groups = my_grna)
idxs <- c(grna_group_info$grna_specific_idxs[[my_grna]],
grna_group_info$grna_specific_idxs[["non-targeting"]])
orig_x <- c(rep(1, grna_group_info$n_cells_per_grna[[my_grna]]),
rep(0, grna_group_info$n_cells_per_grna[["non-targeting"]]))
# 3. get covariate matrix
covariate_matrix_df <- response_odm |>
get_cell_covariates() |>
dplyr::slice(idxs) |>
dplyr::select(n_nonzero, n_umis, bio_rep, phase, p_mito)
row.names(covariate_matrix_df) <- NULL
Z <- model.matrix(object = formula(~ log(n_nonzero) + log(n_umis) + bio_rep + phase + p_mito),
data = covariate_matrix_df)
colnames(Z) <- c("intercept", "lg_n_nonzero", "lg_n_umis", "bio_rep_d1", "bio_rep_d2", "phase_d1", "phase_d2", "p_mito")
# 4. select gene
ex_gene <- "CXCL10"
orig_y <- as.numeric(response_odm[[ex_gene, idxs]])
# 5. get the model for y | Z
fit_y_orig <- MASS::glm.nb(formula = orig_y ~ . + 0, data = as.data.frame(Z))
y_coef <- coef(fit_y_orig)
theta <- fit_y_orig$theta
mus_y <- exp(as.numeric(Z %*% y_coef))
#################################
# STEP 2: RUN SIMULATION FUNCTION
#################################
run_simulation <- function(Y, idx_mat, Z, theta_hypothesized, n_sim = NULL, return_null_dist = FALSE, approx = TRUE) {
resamp_dist <- list()
if (is.null(n_sim)) n_sim <- ncol(Y)
out_m <- matrix(nrow = n_sim, ncol = 3)
for (i in seq(1, n_sim)) {
print(paste0("Running simulation ", i))
y <- Y[,i]
# regress the synthetic Y onto Z
fit <- glm(y ~ Z + 0,
family = MASS::negative.binomial(theta = theta_hypothesized))
# extract z-scores
if (i == 1 || !approx) {
z_scores <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat)
z_star <- z_scores[1]
z_null <- z_scores[-1]
} else {
z_star <- lowmoi:::run_glm_perm_score_test_with_ingredients(Z = Z,
working_resid = fit$residuals,
w = fit$weights,
index_mat = idx_mat[,1,drop = FALSE])
}
# compute theoretical and empirical p-values
p_theory <- 2 * pnorm(q = -abs(z_star), lower.tail = TRUE)
p_camp <- lowmoi:::compute_empirical_p_value(z_star = z_star, z_null = z_null, "both")
# finally, compute permutation
ts <- lowmoi:::low_level_permutation_test(y = y, index_mat = idx_mat)
t_star <- ts[1]
t_null <- ts[-1]
p_perm <- lowmoi:::compute_empirical_p_value(t_star, t_null, "both")
out_m[i,] <- c(p_theory = p_theory, p_camp = p_camp, p_perm = p_perm)
if (i == 1) {
resamp_dist[["camp_null"]] <- z_null
resamp_dist[["camp_star"]] <- z_star
resamp_dist[["perm_null"]] <- ts
resamp_dist[["perm_star"]] <- t_star
}
}
colnames(out_m) <- c("p_theory", "p_camp", "p_perm")
return(list(out_m = out_m, resamp_dist = resamp_dist))
}
n_sim <- 2
set.seed(3)
# y first
Y <- sapply(X = mus_y, FUN = function(mu_y) MASS::rnegbin(n = n_sim, mu = mu_y, theta = theta)) |> t()
# keep x fixed
x_idx <- which(orig_x == 1)
B <- 100000
x_tilde <- replicate(n = B, expr = sample.int(n = length(orig_x), size = sum(orig_x)))
idx_mat <- cbind(matrix(x_idx, ncol = 1), x_tilde) - 1L
sim_res_correlated_corret_model <- run_simulation(Y = Y, idx_mat = idx_mat,
Z = Z, theta_hypothesized = theta,
return_null_dist = TRUE, approx = FALSE)
