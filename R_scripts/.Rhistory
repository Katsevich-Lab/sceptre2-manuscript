mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_nonzero, gene_n_umis)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# set the gene-grna group pairs
response_grna_group_pairs <- sceptre::generate_all_pairs(response_matrix = response_matrix,
grna_group_data_frame = grna_group_data_frame)
# create the list of items to write
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs)
dir_to_save <- paste0(control_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
###############
# PAPALEXI GENE
###############
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_umis, gene_n_nonzero, bio_rep, p_mito)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# set the gene-grna group pairs
response_grna_group_pairs <- sceptre::generate_all_pairs(response_matrix = response_matrix,
grna_group_data_frame = grna_group_data_frame)
response_matrix
grna_matrix
grna_group_data_frame
formula_object
papalexi_dir
# create list
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(papalexi_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
dataset <- dataset
dataset
dataset <- "papalexi"
analysis_type <- "discovery"
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
calibration_check
head(l$grna_group_data_frame)
#####################################################################################
# This script saves the portions of the Papalexi and Frangieh IFN-gamma datasets
# that are used by the run_sceptre_lowmoi function for the discovery analysis (Fig 5)
# in standard R format (as opposed to ondisc format). This script thus facillitates
# replication of the full discovery analyses.
#
# This script assumes that the branch of sceptre that is installed is "resid_statistic"
#####################################################################################
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
#####################################################################################
# This script saves the portions of the Papalexi and Frangieh IFN-gamma datasets
# that are used by the run_sceptre_lowmoi function for the discovery analysis (Fig 5)
# in standard R format (as opposed to ondisc format). This script thus facillitates
# replication of the full discovery analyses.
#
# This script assumes that the branch of sceptre that is installed is "resid_statistic"
#####################################################################################
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
control_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/")
# gene info
gene_odm_fp <- paste0(control_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(control_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(control_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_nonzero, gene_n_umis)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_target = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# create the list of items to write
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(control_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
###############
# PAPALEXI GENE
###############
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_umis, gene_n_nonzero, bio_rep, p_mito)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_target = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# create list
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(papalexi_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
#!/usr/bin/env Rscript
# The purpose of this script is to: (1) run the (approximate) calibration check for Papalexi and Frangieh IFN-gamma and (2) run the trans discovery analysis for these two datasets. We time and profile the memory of all four analyses from within Linux.
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
source("~/.Rprofile")
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
dataset <- "papalexi"
analysis_type <- "calibration"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
l$response_matrix[1:6,1:10]
l$grna_matrix[1:5,1:5]
head( l$grna_group_data_frame)
l$covariate_data_frame |> head()
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
sceptre_object <- import_data(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
grna_target_data_frame = l$grna_group_data_frame,
moi = "low")
sceptre_object
sceptre_object@covariate_data_frame |> head()
l$covariate_data_frame |> head()
sceptre_object@covariate_data_frame <- l$covariate_data_frame
sceptre_object
sceptre_object@covariate_data_frame |> head()
l$grna_matrix
run_sceptre_lowmoi
l$grna_matrix
dim(l$response_matrix)
dataset <- "papalexi"
full_statistic <- TRUE
dataset
full_statistic
cat(paste0("dataset: ", dataset, "\n"))
cat(paste0("full statistic: ", full_statistic, "\n"))
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
}
l <- readRDS(objects_fp)
gc() |> invisible()
l
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
# import data
response_matrix <- l$response_matrix
full_statistic
sorce("~/.Rprofile")
source("~/.Rprofile")
dataset <- args[1] # "papalexi" or "frangieh"
dataset
dataset <- "papalexi"
full_statistic <- FALSE
dataset
full_statistic
cat(paste0("dataset: ", dataset, "\n"))
cat(paste0("full statistic: ", full_statistic, "\n"))
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
}
l <- readRDS(objects_fp)
gc() |> invisible()
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
# import data
response_matrix <- l$response_matrix
grna_matrix <- l$grna_matrix
grna_target_data_frame <- l$grna_group_data_frame
covariate_data_frame <- l$covariate_data_frame |> dplyr::mutate(grna_n_umis = 1)
sceptre_object <- import_data(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
grna_target_data_frame = l$grna_group_data_frame,
moi = "low")
# update covariate_data_frame with the already-computed one to ensure consistency with the rest of the manuscript
sceptre_object@covariate_data_frame <- covariate_data_frame
full_statistic
##################
# Run the analysis
##################
trans_pairs <- construct_trans_pairs(sceptre_object)
pc_pairs <- construct_positive_control_pairs(sceptre_object)
sceptre_object <- set_analysis_parameters(sceptre_object,
discovery_pairs = trans_pairs,
positive_control_pairs = pc_pairs,
full_test_stat = full_statistic)
# assign grnas
sceptre_object <- sceptre_object |> assign_grnas()
# run pairwise QC but not cellwise QC (as we have already run cellwise QC)
sceptre_object <- sceptre_object |> run_qc(response_n_umis_range = c(0, 1),
response_n_nonzero_range = c(0, 1),
p_mito_threshold = 1)
# run the calibration check
calibration_check_time <- system.time(
sceptre_object <- sceptre_object |>
run_calibration_check(parallel = TRUE, n_processors = 4)
)[["elapsed"]]
# run the discovery analysis
discovery_analysis_time <- system.time(
sceptre_object <- sceptre_object |>
run_discovery_analysis(parallel = TRUE, n_processors = 4)
)[["elapsed"]]
# run the positive control analysis
sceptre_object <- sceptre_object |> run_power_check(parallel = TRUE, n_processors = 4)
plot(sceptre_object)
# obtain the calibration check and discovery analysis results
dir_name <- paste0(dataset, "_", (if (full_statistic) "full_stat" else "resid_stat"))
dir_name
write_outputs_to_directory(sceptre_object,
directory = paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/", dir_name))
running_times <- c(calibration_check_time = calibration_check_time,
discovery_analysis_time = discovery_analysis_time)
saveRDS(running_times, file = paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/", dir_name, "/running_times.rds"))
plot_run_discovery_analysis(sceptre_object)
sceptre_object@full_test_stat
dataset <- "papalexi"
full_statistic <- TRUE
cat(paste0("dataset: ", dataset, "\n"))
cat(paste0("full statistic: ", full_statistic, "\n"))
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
}
l <- readRDS(objects_fp)
gc() |> invisible()
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
# import data
response_matrix <- l$response_matrix
grna_matrix <- l$grna_matrix
grna_target_data_frame <- l$grna_group_data_frame
covariate_data_frame <- l$covariate_data_frame |> dplyr::mutate(grna_n_umis = 1)
sceptre_object <- import_data(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
grna_target_data_frame = l$grna_group_data_frame,
moi = "low")
# update covariate_data_frame with the already-computed one to ensure consistency with the rest of the manuscript
sceptre_object@covariate_data_frame <- covariate_data_frame
##################
# Run the analysis
##################
trans_pairs <- construct_trans_pairs(sceptre_object)
pc_pairs <- construct_positive_control_pairs(sceptre_object)
sceptre_object <- set_analysis_parameters(sceptre_object,
discovery_pairs = trans_pairs,
positive_control_pairs = pc_pairs,
full_test_stat = full_statistic)
# assign grnas
sceptre_object <- sceptre_object |> assign_grnas()
# run pairwise QC but not cellwise QC (as we have already run cellwise QC)
sceptre_object <- sceptre_object |> run_qc(response_n_umis_range = c(0, 1),
response_n_nonzero_range = c(0, 1),
p_mito_threshold = 1)
calibration_check_time <- system.time(
sceptre_object <- sceptre_object |>
run_calibration_check(parallel = TRUE, n_processors = 4)
)
calibration_check_time
1118.249 / 4
284.686
284.686 + 7.316
284.686
sceptre_object
sceptre_object |> print()
323906 / 284.686
323906 / 284.686
args
dataset <- "papalexi"
full_statistic <- as.logical(args[2]) # TRUE (for full) or FALSE (for residuals)
full_statistic
full_statistic <- TRUE
cat(paste0("dataset: ", dataset, "\n"))
cat(paste0("full statistic: ", full_statistic, "\n"))
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
}
l <- readRDS(objects_fp)
gc() |> invisible()
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
# import data
response_matrix <- l$response_matrix
grna_matrix <- l$grna_matrix
grna_target_data_frame <- l$grna_group_data_frame
covariate_data_frame <- l$covariate_data_frame # |> dplyr::mutate(grna_n_umis = 1)
sceptre_object <- import_data(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
grna_target_data_frame = l$grna_group_data_frame,
moi = "low")
sceptre_object
##################
# Run the analysis
##################
trans_pairs <- construct_trans_pairs(sceptre_object)
pc_pairs <- construct_positive_control_pairs(sceptre_object)
sceptre_object <- set_analysis_parameters(sceptre_object,
discovery_pairs = trans_pairs,
positive_control_pairs = pc_pairs,
full_test_stat = full_statistic)
# assign grnas
sceptre_object <- sceptre_object |> assign_grnas()
plot_covariates(sceptre_object)
# run pairwise QC but not cellwise QC (as we have already run cellwise QC)
sceptre_object <- sceptre_object |> run_qc(p_mito_threshold = 0.1)
plot(sceptre_object)
sceptre_object
# run the calibration check
calibration_check_time <- system.time(
sceptre_object <- sceptre_object |>
run_calibration_check(parallel = TRUE, n_processors = 4)
)[["elapsed"]]
calibration_check_time
calibration_check_time/60
sceptre_object
sceptre_object |> print()
309953 / 131.79
plot(sceptre_object)
# run the positive control analysis
sceptre_object <- sceptre_object |> run_power_check(parallel = TRUE, n_processors = 4)
plot(sceptre_object)
sceptre_object |> print()
# run the discovery analysis
discovery_analysis_time <- system.time(
sceptre_object <- sceptre_object |>
run_discovery_analysis(parallel = TRUE, n_processors = 4)
)[["elapsed"]]
sceptre_object |> print()
disc_result <- sceptre_object |> get_result("run_discovery_analysis")
head(disc_result)
dataset
# obtain the calibration check and discovery analysis results
dir_name <- paste0(dataset, "_", (if (full_statistic) "full_stat" else "resid_stat"))
dir_name
write_outputs_to_directory(sceptre_object,
directory = paste0(LOCAL_SCEPTRE2_DATA_DIR, "with_qc/results/discovery_analyses/", dir_name))
paste0(LOCAL_SCEPTRE2_DATA_DIR, "with_qc/results/discovery_analyses/", dir_name)
paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/", dir_name)
write_outputs_to_directory(sceptre_object,
directory = paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/with_qc/", dir_name))
