gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
########################
# NEGATIVE CONTROL PAIRS
########################
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
mus
thetas
gene_expression_mat
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
N_GENES
N_GRNAS
N_NTC_GRNAS
N_CELLS
cell_barcodes
gene_ids
grna_ids
########################
# NEGATIVE CONTROL PAIRS
########################
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_assignments
grna_assignments |> table()
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(grna_expression_mat >= 1) == 1)
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
convert_assign_list_to_sparse_odm
grna_assignments
max(grna_assignments)
min(grna_assignments)
grna_ids
gene_ids
N_NTC_GRNAS
N_NTC_GRNAS
N_GRNAS
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
grna_ids
beta_0 <- log(1e-4)
beta_0
grna_ids
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_PC_GRNAS
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
beta_0 <- log(1e-4)
beta_1s <- log(runif(N_PC_GRNAS, -0.25, -0.5))
beta_1s
runif(N_PC_GRNAS, -0.25, -0.5)
runif(N_PC_GRNAS, -0.25, -0.5)
N_PC_GRNAS
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
runif
beta_1s <- log(runif(N_PC_GRNAS, -0.5, -0.25))
runif(N_PC_GRNAS, -0.5, -0.25)
beta_1s <- log(runif(N_PC_GRNAS, 0.25, 0.5))
beta_1s
beta_0 <- log(1e-4)
beta_1s <- log(runif(N_PC_GRNAS, 0.25, 0.5))
N_NTC_GRNAS
N_PC_GRNAS
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
beta_0 <- log(1e-4)
beta_1s <- log(runif(N_PC_GRNAS, 0.25, 0.5))
N_PC_GRNAS
grna_ids
beta_0
beta_1s
N_PC_GRNAS
N_GENES <- N_PC_GRNAS
N_NTC_GRNAS
N_PC_GRNAS
N_GENES
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
beta_0 <- log(1e-4)
beta_1s <- log(runif(N_PC_GRNAS, 0.25, 0.5))
beta_0
beta_1s
grna_assignments
grna_assignments == i
length(grna_assignments)
i <- 1
grna_assignments == i
curr_cell_idxs <- which(grna_assignments == i)
curr_cell_idxs
curr_cell_idxs <- which(grna_assignments == i)
curr_cell_idxs
curr_cell_idxs
head(curr_cell_idxs)
tailcurr_cell_idxs
tail(curr_cell_idxs)
beta_0 <- log(1e-4)
mu_0 <- log(1e-4)
mu_0s <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
mu_1s <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
mu_0s
mu_1s
thetas <- runif(n = N_GENES, min = 1, max = 25)
thetas
N_CELLS
curr_cell_idxs
length(curr_cell_idxs)
n_alt_cells <- length(curr_cell_idxs)
n_null_cells <- N_CELLS - n_alt_cells
curr_cell_idxs
curr_cell_idxs <- which(grna_assignments == i)
alt_cell_idxs <- which(grna_assignments != i)
head(curr_cell_idxs)
head(alt_cell_idxs)
curr_cell_idxs
alt_cell_idxs
length(alt_cell_idxs)
length(curr_cell_idxs)
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
alt_cell_idxs
head(alt_cell_idxs)
head(null_cell_idxs)
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
alt_cell_idxs
head(alt_cell_idxs)
head(null_cell_idxs)
head(alt_cell_idxs)
heaD(null_cell_idxs)
head(null_cell_idxs)
head(y_null)
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
length(null_cell_idxs)
length(alt_cell_idxs)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
y
head(y)
max(y)
mu_0s
mu_1s
mu_0s <- rgamma(n = N_GENES, shape = 0.5, rate = 5)
mu_1s <- rgamma(n = N_GENES, shape = 0.5, rate = 5)
mu_0s
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
i
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
head( v)
head(y_null)
head(y_tal)
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
max(y)
min(y)
table(y)
y
hist(y)
mean(y[null_cell_idxs])
mean( y[alt_cell_idxs] )
mus_0
mu_0s
# loop over genes; for each gene, sample
gene_expression_mat_2 <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
})
dim(gene_expression_mat_2)
# loop over genes; for each gene, sample
gene_expression_mat_2 <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
dim(gene_expression_mat_2)
gene_expression_mat_2[1,] |> hist()
gene_expression_mat_2[2,] |> hist()
gene_expression_mat_2[3,] |> hist()
gene_expression_mat_2[4,] |> hist()
gene_expression_mat_2[5,] |> hist()
gene_expression_mat_2[10,] |> hist()
gene_expression_mat_2[30,] |> hist()
gene_expression_mat_2[25,] |> hist()
gene_expression_mat_2[23,] |> hist()
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_GENES <- N_PC_GRNAS
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
mu_0s
mu_1s
library(ondisc)
set.seed(4)
###########
# DATASET 1
###########
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
########################
# NEGATIVE CONTROL PAIRS
########################
# create grna expression matrix
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(grna_expression_mat >= 1) == 1)
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 0.5, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_GENES <- N_PC_GRNAS
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
mu_0s
mu_1s
thetas
i
i <- 1
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
alt_cell_idxs
length(alt_cell_idxs)
length(null_cell_idxs)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
head(y_null)
head(y_alt)
N_CELLS
y <- integer(N_CELLS)
y
hist(Y)
hist(y)
rgamma(n = N_GENES, shape = 2, rate = 5)
rgamma(n = N_GENES, shape = 0.5, rate = 5)
rgamma(n = N_GENES, shape = 2, rate = 5)
rgamma(n = N_GENES, shape = 2, rate = 3)
rgamma(n = N_GENES, shape = 2, rate = 2)
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_GENES <- N_PC_GRNAS
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 2)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 2)
thetas <- runif(n = N_GENES, min = 1, max = 25)
mu_0s
mus_1
rgamma(n = N_GENES, shape = 2, rate = 2)
rgamma(n = N_GENES, shape = 2, rate = 0.5)
rgamma(n = N_GENES, shape = 1, rate = 0.5)
rgamma(n = N_GENES, shape = 2, rate = 0.5)
rgamma(n = N_GENES, shape = 1, rate = 0.5)
rgamma(n = N_GENES, shape = 0.5, rate = 0.5)
rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
mu_0s
mu_1s
thetas
i <- 1L
i
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
# loop over genes; for each gene, sample
gene_expression_mat_2 <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
dim(gene_expression_mat_2)
gene_expression_mat_2[1,] |> hist()
gene_expression_mat_2[2,] |> hist()
gene_expression_mat_2[3,] |> hist()
grna_assignments
max(grna_assignments)
min(grna_assignments)
N_GENES
source("~/.research_config")
library(ondisc)
set.seed(4)
###########
# DATASET 1
###########
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
# generate cell names, gene names, and grna names
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("NTC-", seq(1, N_NTC_GRNAS)),
paste0("GENE-TARGET-", seq(1, N_GRNAS -  N_NTC_GRNAS)))
cell_barcodes
gene_ids
grna_ids
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_GENES <- N_PC_GRNAS
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_NTC_GRNAS <- 5
N_PC_GRNAS <- N_GRNAS - N_NTC_GRNAS
N_NTC_GRNAS
N_PC_GRNAS
########################
# POSITIVE CONTROL PAIRS
########################
# update the grna ids
N_PC_GRNAS <- 25
N_GRNAS <- N_PC_GRNAS + 5
N_PC_GRNAS
N_GRNAS
N_PC_GRNAS <- 25
N_GRNAS <- N_PC_GRNAS + 5
N_GENES <- N_GRNAS
N_CELLS <- 10000
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_assignments
head(grna_assignments)
tail(grna_assignments)
N_PC_GRNAS
N_GRNAS
N_GENES
N_CELLS
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
min(grna_assignments)
max(grna_assignments)
N_PC_GRNAS
N_GRNAS
N_GENES
N_CELLS
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_assignments
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
grna_assignments
N_GENES
# loop over genes; for each gene, sample
gene_expression_mat_2 <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
gene_expression_mat_2[1,] |> head()
gene_expression_mat_2[1, grna_assignments == 1] |> head()
i <- 1
i <- 1
gene_expression_mat_2[i, grna_assignments == i] |> head()
gene_expression_mat_2[i, grna_assignments != i] |> head()
gene_expression_mat_2[i, grna_assignments == i] |> hist()
gene_expression_mat_2[i, grna_assignments != i] |> hist()
gene_expression_mat_2[i, grna_assignments == i] |> length
gene_expression_mat_2[i, grna_assignments == i] |> length()
gene_expression_mat_2[i, grna_assignments != i] |> length()
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 2
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 3
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 4
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 5
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 6
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 7
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
i <- 8
gene_expression_mat_2[i, grna_assignments == i] |> mean()
gene_expression_mat_2[i, grna_assignments != i] |> mean()
length(grna_assignments)
# generate the gRNA expression matrix
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
grna_expression_mat
grna_expression_mat[1:5,1:5]
grna_expression_mat[1,grna_assignments==1]
grna_expression_mat[1,grna_assignments==2]
grna_expression_mat[1,grna_assignments==1]
grna_expression_mat[2,grna_assignments==1]
grna_expression_mat[10, grna_assignments == 10]
10
grna_expression_mat[1:20,1:20]
10
load_all()
