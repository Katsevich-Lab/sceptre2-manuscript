modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
# special case: dataset == "experiment_2", include batch
if (dataset == "experiment_2") {
modality_odm@misc[["mimosca_formula"]] <- formula(~n_nonzero + n_umis + batch + 0)
modality_odm@misc[["nb_regression_formula"]] <- "~log(n_umis) + log(n_nonzero) + batch"
modality_odm@misc[["sceptre_formula"]] <- formula(~log(n_umis) + log(n_nonzero) + batch)
}
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
mm_odm_sub_proc
mm_odm_sub_proc |> get_cell_covariates() |> head()
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0124.rds"))
pc_res_processed <- suppressWarnings(process_pc_result(pc_res, sample_size_df))
head(pc_res_processed)
pc_res_processed |> head())
pc_res_processed |> head()
pc_res_processed |> filter(dataset == "simulated_dataset_2")
pc_res_processed$dataset |> unique()
pc_res_processed |> filter(dataset == "simulated_experiment_2_gene")
source("~/.Rprofile")
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1_0523.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1_0523.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0124.rds"))
pc_res_processed <- suppressWarnings(process_pc_result(pc_res, sample_size_df))
saveRDS(object = pc_res_processed,
file = paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0124_processed.rds"))
head(pc_res_processed)
tail(pc_res_processed)
nrow(pc_res_processed)
head(pc_res_processed)
pc_res_processed$dataset |> uniqueP()
pc_res_processed$dataset |> unique()
pc_res_processed |> filter(dataset == "simulated_experiment_2_gene")
###########
# DATASET 2
###########
# set the number of grnas
set.seed(4)
N_PC_GRNAS <- 25
###########
# DATASET 2
###########
# set the number of grnas
set.seed(4)
N_PC_GRNAS <- 25
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 10000
###########
# DATASET 2
###########
# set the number of grnas
set.seed(4)
N_PC_GRNAS <- 25
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 15000
N_PC_GRNAS
N_NT_GRNAS
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 15000
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
grna_assignments
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
# generate the gene expression matrix
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
# generate the gRNA expression matrix
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
# generate the gene ids, grna ids, and cell barcodes; append to the ondisc objects
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("GENE-TARGET-", seq(1, N_PC_GRNAS)),
paste0("NTC-", seq(1, N_GRNAS - N_PC_GRNAS)))
gene_ids
grna_ids
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
source("~/.Rprofile")
library(ondisc)
set.seed(4)
###########
# DATASET 2
###########
# set the number of grnas
set.seed(4)
N_PC_GRNAS <- 25
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 15000
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
# generate the gene expression matrix
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
# generate the gRNA expression matrix
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
# generate the gene ids, grna ids, and cell barcodes; append to the ondisc objects
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("GENE-TARGET-", seq(1, N_PC_GRNAS)),
paste0("NTC-", seq(1, N_GRNAS - N_PC_GRNAS)))
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
source("~/.Rprofile")
library(ondisc)
set.seed(4)
set.seed(4)
N_PC_GRNAS <- 25
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 15000
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
# generate the gene expression matrix
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
# generate the gRNA expression matrix
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
# generate the gene ids, grna ids, and cell barcodes; append to the ondisc objects
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("GENE-TARGET-", seq(1, N_PC_GRNAS)),
paste0("NTC-", seq(1, N_GRNAS - N_PC_GRNAS)))
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# initialize ODM objects
# gene
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_2/gene/matrix.odm")
###########
# DATASET 1
###########
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
library(ondisc)
set.seed(4)
###########
# DATASET 1
###########
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 5000
N_GRNAS <- 30
N_NTC_GRNAS <- 25
N_CELLS <- 10000
library(ondisc)
set.seed(4)
###########
# DATASET 1
###########
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# set the number of grnas
set.seed(4)
N_PC_GRNAS <- 25
N_NT_GRNAS <- 100
N_GRNAS <- N_PC_GRNAS + N_NT_GRNAS
N_GENES <- N_GRNAS
N_CELLS <- 15000
grna_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
mu_0s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
mu_1s <- rgamma(n = N_GENES, shape = 2, rate = 0.5)
thetas <- runif(n = N_GENES, min = 1, max = 25)
# generate the gene expression matrix
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
alt_cell_idxs <- which(grna_assignments == i)
null_cell_idxs <- which(grna_assignments != i)
y_null <- MASS::rnegbin(length(null_cell_idxs), mu_0s[i], thetas[i])
y_alt <- MASS::rnegbin(length(alt_cell_idxs), mu_1s[i], thetas[i])
y <- integer(N_CELLS)
y[null_cell_idxs] <- y_null
y[alt_cell_idxs] <- y_alt
return(y)
}) |> t()
# generate the gRNA expression matrix
grna_expression_mat <- sapply(X = grna_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
# generate the gene ids, grna ids, and cell barcodes; append to the ondisc objects
cell_barcodes <- paste0("cell-", seq(1, N_CELLS))
gene_ids <- paste0("gene-", seq(1, N_GENES))
grna_ids <- c(paste0("GENE-TARGET-", seq(1, N_PC_GRNAS)),
paste0("NTC-", seq(1, N_GRNAS - N_PC_GRNAS)))
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
rownames(grna_expression_mat) <- grna_ids
colnames(grna_expression_mat) <- cell_barcodes
# initialize ODM objects
# gene
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_2/gene/matrix.odm")
gene_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_2/gene/metadata_orig.rds"))
# grna
to_save_fp_grna <- paste0(sceptre2_dir, "data/simulated/experiment_2/grna_expression/matrix.odm")
grna_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = grna_expression_mat,
barcodes = colnames(grna_expression_mat),
features_df = data.frame(rownames(grna_expression_mat)),
odm_fp = to_save_fp_grna)
# append target and target type to the grna odm
grna_tbl <- data.frame(target_type = c(rep("gene", N_PC_GRNAS), rep("non-targeting", N_NT_GRNAS)),
target = c(paste0("gene-", seq(1, N_PC_GRNAS)), rep("non-targeting", N_NT_GRNAS)))
# update the grna odm
grna_odm <- grna_odm |>
mutate_feature_covariates(grna_tbl)
save_odm(odm = grna_odm, metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_2/grna_expression/metadata_orig.rds"))
# finally, create the matrix of grna assignments
convert_assign_list_to_sparse_odm(cell_barcodes = cell_barcodes,
grna_ids = grna_ids,
grna_assignment_list = as.list(grna_ids[grna_assignments]),
odm_fp = paste0(sceptre2_dir, "data/simulated/experiment_2/grna_assignment/matrix.odm"),
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_2/grna_assignment/metadata_orig.rds"),
features_metadata_df = grna_tbl)
source("~/.Rprofile")
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- c("frangieh",  "papalexi", "schraivogel", "simulated")
# This script performs cell-wise QC, among other operations, on low MOI data.
# We (i) restrict attention to cells that received a single grna (as determined by the original authors) and
# (ii) filter for cells that passed other QC metrics implemented by the original authors (stored in the "passed_qc" column).
# set params
FRAC_EXPRESSED_TRHESH <- 0.005
# 1.i) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(# frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
frangieh = formula(~ n_nonzero + n_umis + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + bio_rep + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
mimosca_formula_objs_protein <- list(# frangieh = formula(~ n_umis + phase + batch + 0),
frangieh = formula(~ n_umis + 0),
papalexi = formula(~ n_umis + bio_rep + p_mito + 0))
# 1.ii) Set the NB regression formula objects
nb_regression_formula_objs <- list(# frangieh = "~log(n_umis) + log(n_nonzero) + phase + batch",
frangieh = "~log(n_umis) + log(n_nonzero)",
schraivogel = "~ log(n_umis) + log(n_nonzero) + batch",
papalexi = "~ log(n_umis) + log(n_nonzero) + bio_rep + p_mito",
liscovitch = "~ log(n_fragments)",
simulated = "~log(n_umis) + log(n_nonzero)")
nb_regression_formula_objs_protein <- list(# frangieh = "~ offset(log(n_umis)) + phase + batch",
frangieh = "~ offset(log(n_umis))",
papalexi = "~ offset(log(n_umis)) + bio_rep + p_mito")
# 1.iii) Set the sceptre formula objects
sceptre_formula_objs <- list(# frangieh = ~ log(response_n_umis) + log(response_n_nonzero) + phase + batch,
frangieh = ~ log(response_n_umis) + log(response_n_nonzero),
schraivogel = ~ log(response_n_umis) + log(response_n_nonzero) + batch,
papalexi = ~ log(response_n_umis) + log(response_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(response_n_fragments),
simulated = ~ log(response_n_umis) + log(response_n_nonzero))
sceptre_formula_objs_protein <- list(# frangieh = ~ log(response_n_umis) + phase + batch,
frangieh = ~ log(response_n_umis),
papalexi = ~ log(response_n_umis) + bio_rep + p_mito)
# 1. iv) Set the global formula object (for use in the sceptre pipeline)
global_formula_objs <- list(# frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero) + phase + batch,
frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero),
schraivogel = ~ log(gene_n_umis) + log(gene_n_nonzero) + batch,
papalexi = ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(gene_n_fragments),
simulated = ~ log(gene_n_umis) + log(gene_n_nonzero))
# 2) loop over datasets, loading all modalities
for (paper in papers) {
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# load the dataset into a multimodal ODM
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
# i. perform cell QC; restrict attention to 1 grna/cell and "passed_qc" cells (if applicable)
global_cell_covariates <- mm_odm |> get_cell_covariates()
cell_logical_v <- global_cell_covariates$grna_assignment_n_nonzero == 1
passed_qc_v <- grepl(pattern = "passed_qc", x = colnames(global_cell_covariates))
if (any(passed_qc_v)) {
passed_qc <- global_cell_covariates[, which(passed_qc_v)[1]]
cell_logical_v <- cell_logical_v & passed_qc
}
mm_odm_sub <- mm_odm[,cell_logical_v]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality: keep features expressed in N_CELLS_PER_GRNA_THRESH cells. Also, add a "grna_assigned" column to the cell covariate matrix.
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
grna_assign_mat <- lowmoi::load_whole_odm(grna_assign_modality)
assigned_grna <- apply(X = grna_assign_mat,
MARGIN = 2,
FUN = function(col) names(which.max(col))) |> unname()
grna_assign_modality <- grna_assign_modality |>
mutate_cell_covariates(assigned_grna = assigned_grna)
if (paper == "schraivogel") {
grna_assign_modality <- grna_assign_modality |>
mutate_feature_covariates(target = ifelse(is.na(known_effect), target, known_effect),
known_effect = NULL)
}
# grna expression modality (if applicable): keep the same features as above
if ("grna_expression" %in% modalities) {
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
if (paper == "schraivogel") {
grna_expression_modality <- grna_expression_modality |>
mutate_feature_covariates(target = known_effect, known_effect = NULL)
}
}
# response modalities: keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_grna = gsub(pattern = "_", replacement = "-", x = assigned_grna, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
grna_groups_to_keep <- unique(grna_feature_df$target)
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
trans_pairs <- expand.grid(response_id = feats_to_keep,
grna_group = grna_groups_to_keep) |>
dplyr::arrange(grna_group)
saveRDS(object = trans_pairs, file = paste0(paper_dir, dataset, "/", modality, "/trans_pairs_grouped.rds"))
if (paper == "frangieh" && dataset == "control" && modality == "gene") {
tf_pairs <- trans_pairs |>
dplyr::filter(grna_group %in% c("E2F1", "FOS", "IRF3", "IRF4", "KLF4", "MYC", "SMAD3",
"SMAD4", "SOX4", "STAT1", "STAT3", "TFAP2A", "TP53"))
saveRDS(object = tf_pairs, file = paste0(paper_dir, dataset, "/", modality, "/tf_pairs_grouped.rds"))
}
if (paper == "papalexi" && dataset == "eccite_screen" && modality == "gene") {
tf_pairs <- trans_pairs |>
dplyr::filter(grna_group %in% c("ATF2", "ETV7", "IRF1", "IRF7", "MYC", "NFKBIA", "POU2F2",
"SMAD4", "SPI1", "STAT1", "STAT2", "STAT3", "STAT5A"))
saveRDS(object = tf_pairs, file = paste0(paper_dir, dataset, "/", modality, "/tf_pairs_grouped.rds"))
}
}
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
# vii. write the positive control pairs (at the level of the paper-dataset)
if (paper %in% c("frangieh", "papalexi")) {
# grouped pairs
targets <- intersect(grna_feature_df |> dplyr::pull(target),
gene_modality |> ondisc::get_feature_ids())
pc_pairs <- data.frame(grna_group = targets, response_id = targets)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
}
if (paper == "schraivogel") {
targets <- intersect(grna_feature_df |> dplyr::pull(known_effect),
gene_modality |> ondisc::get_feature_ids())
ungroup_pairs_all <- grna_feature_df |>
dplyr::filter(known_effect %in% targets)
# first, grouped pairs
pc_pairs <- ungroup_pairs_all |>
dplyr::select(grna_group = target, response_id = known_effect) |>
dplyr::distinct() |>
na.omit()
rownames(pc_pairs) <- NULL
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
}
# finally, do the papalexi protein data
if (paper == "papalexi") {
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
protein_modality <- mm_odm_sub_proc |> get_modality("protein")
x <- grna_assignment_modality |>
get_feature_covariates() |>
dplyr::filter(!is.na(known_protein_effect),
n_nonzero > 0)
pos_control_group <- x |>
dplyr::select(target, known_protein_effect) |>
dplyr::distinct() |>
dplyr::rename("grna_group" = "target", "response_id" = "known_protein_effect")
row.names(pos_control_group) <- NULL
saveRDS(pos_control_group,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_grouped.rds"))
}
}
}
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0124.rds"))
pc_res_processed <- suppressWarnings(process_pc_result(pc_res, sample_size_df))
saveRDS(object = pc_res_processed,
file = paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0124_processed.rds"))
pc_res_processed
head(pc_res_processed)
