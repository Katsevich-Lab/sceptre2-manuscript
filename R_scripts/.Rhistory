papers <- c("frangieh"  "papalexi", "schraivogel", "simulated")
# loop over datasets, computing sample size information
papers <- c("frangieh",  "papalexi", "schraivogel", "simulated")
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
grna_modality <- mm_odm |> get_modality("grna_assignment")
response_modality <- mm_odm |> get_modality("gene")
# get gRNA info
grna_info <- grna_modality |> get_feature_covariates()
n_nt_grnas <- grna_info |> filter(target_type == "non-targeting") |> nrow()
n_targeting_grnas <- nrow(grna_info) - n_nt_grnas
n_targeted_sites <- grna_info |> filter(target_type != "non-targeting") |> pull(target) |> unique() |> length()
n_cells <- ncol(grna_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas)
}) |> data.table::rbindlist()
})
df
paper_fp
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
grna_modality <- mm_odm |> get_modality("grna_assignment")
response_modality <- mm_odm |> get_modality("gene")
# get gRNA info
grna_info <- grna_modality |> get_feature_covariates()
n_nt_grnas <- grna_info |> filter(target_type == "non-targeting") |> nrow()
n_targeting_grnas <- nrow(grna_info) - n_nt_grnas
n_targeted_sites <- grna_info |> filter(target_type != "non-targeting") |> pull(target) |> unique() |> length()
n_cells <- ncol(grna_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp)
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
df
df[1:6,]
df[1:6,]
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
remaining_modalities
remaining_modality <- remaining_modalities[1]
remaining_modality
remaining_modality
n_responses <- nrow(response_modality)
response_modality
response_modality <- mm_odm |> get_modality(remaining_modality)
response_modality <- mm_odm |> get_modality(remaining_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp,
modality = remaining_modality)
papers <- c("frangieh",  "papalexi", "schraivogel", "simulated")
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
grna_modality <- mm_odm |> get_modality("grna_assignment")
# get gRNA info
grna_info <- grna_modality |> get_feature_covariates()
n_nt_grnas <- grna_info |> filter(target_type == "non-targeting") |> nrow()
n_targeting_grnas <- nrow(grna_info) - n_nt_grnas
n_targeted_sites <- grna_info |> filter(target_type != "non-targeting") |> pull(target) |> unique() |> length()
n_cells <- ncol(grna_modality)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
# loop over remaining modalitites
lapply(remaining_modalities, function(remaining_modality) {
response_modality <- mm_odm |> get_modality(remaining_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp,
modality = remaining_modality)
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
df
df[c(1,3,5,7,8,9,10,13),]
df[c(1,3,5,7,8,9,10,13),]
df[c(1,3,5,7,8,9,10,13),c(1,6,7)]
82 + 71
82 + 71
df[c(1,3,5,7,8,9,10,13), c(2,6,7)]
df[c(1,3,5,7,8,9,10,13), c(2=1,6,7)]
df[c(1,3,5,7,8,9,10,13), c(1,6,7)]
df[c(1,3,5,7,8,9,10,13), c(3,6,7)]
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# set the result and data directories; load PC and undercover results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds")) |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
pc_res
pc_res$dataset |> unique()
df[c(1,3,5,7,8,9,10,13), c(2,7)]
df[c(1,3,5,7,8,9,10,13),]
readRDS(paste0(result_dir, "positive_control_analysis/pc_results.rds"))
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1.rds"))
undercover_res_extra <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1_our_methods.rds"))
undercover_res <- rbind(undercover_res, undercover_res_extra)
undercover_res_processed <- process_undercover_result(undercover_res, sample_size_df) |>
mutate(p_value = ifelse(p_value <= 0, 1e-8, p_value))
head(undercover_res_processed)
process_undercover_result
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
#######################################################
# FIRST: compute number of nonzero cells cells per gene
#######################################################
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
cellwise_grna_assignments_2 <- lowmoi:::get_grna_assignments_via_max_op(grna_assign_modality)
# NOT A SUBSET OF ROW NAMES OF FEATURE COVARIATES OF GRNA ASSIGN MODALITY
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
n_cells <- sapply(grna_tbl, length)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
(gene_exp[curr_grna_idx] >=1) |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells,
n_cells = n_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
y <- dplyr::left_join(x, grna_target_df, by = "grna_id") |>
dplyr::mutate(target = factor(target))
}) |> data.table::rbindlist() |>
dplyr::mutate(paper = factor(paper))
}) |> data.table::rbindlist()
# load packages
library(tidyverse)
library(ondisc)
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# set the result and data directories; load PC and undercover results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds")) |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
# first, the number of negative control pairs
undercover_res |>
filter(method == "seurat_de") |>
group_by(dataset) |>
summarize(count = n())
# next, the number of positive control pairs
pc_res |>
filter(method == "seurat_de") |>
group_by(dataset) |>
summarize(count = n())
# loop over datasets, computing sample size information
papers <- c("frangieh",  "papalexi", "schraivogel", "simulated")
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
grna_modality <- mm_odm |> get_modality("grna_assignment")
# get gRNA info
grna_info <- grna_modality |> get_feature_covariates()
n_nt_grnas <- grna_info |> filter(target_type == "non-targeting") |> nrow()
n_targeting_grnas <- nrow(grna_info) - n_nt_grnas
n_targeted_sites <- grna_info |> filter(target_type != "non-targeting") |> pull(target) |> unique() |> length()
n_cells <- ncol(grna_modality)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
# loop over remaining modalitites
lapply(remaining_modalities, function(remaining_modality) {
response_modality <- mm_odm |> get_modality(remaining_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp,
modality = remaining_modality)
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
df
# first, the number of negative control pairs
undercover_res |>
filter(method == "seurat_de") |>
group_by(dataset) |>
summarize(count = n())
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
x <- readRDS(object = res,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
x <- readRDS(file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
head(x)
x |> group_by(dataset)
x |> group_by(dataset) |> summarize(count = n())
82 + 71
datasets <- c("schraivogel/enhancer_screen_chr8",
"schraivogel/enhancer_screen_chr11")
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
#datasets <- c("frangieh/ifn_gamma",
#              "frangieh/co_culture",
#              "frangieh/control",
#              "papalexi/eccite_screen")
datasets <- c("schraivogel/enhancer_screen_chr8",
"schraivogel/enhancer_screen_chr11")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps,
dataset = dataset, response_id = gene_ids)
}) |> data.table::rbindlist()
head(res)
tail(res)
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit() |>
mutate(dataset = paste0(dataset, "_gene")) |>
as.data.frame()
res
tail(res)
head(res)
res
sceptre2:::low_level_permutation_test
2/50000
1/(250000)
2/(250000)
version
session_info
session_info()
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1.rds"))
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
head(undercover_res)
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1.rds"))
undercover_res_extra <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1_our_methods.rds"))
undercover_res <- rbind(undercover_res, undercover_res_extra)
undercover_res_processed <- process_undercover_result(undercover_res, sample_size_df) |>
mutate(p_value = ifelse(p_value <= 0, 1e-8, p_value))
undercover_res_processed <- process_undercover_result(undercover_res, sample_size_df) |>
mutate(p_value = ifelse(p_value <= 0, 1e-8, p_value))
saveRDS(undercover_res_processed, paste0(sceptre2_results_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds"))
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1.rds"))
undercover_res$method |> unique()
# undercover res grp = 1
undercover_res <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1.rds")) |>
dplyr::filter(method != "sceptre")
undercover_res_extra <- readRDS(paste0(sceptre2_results_dir, "undercover_grna_analysis/undercover_result_grp_1_our_methods.rds"))
undercover_res <- rbind(undercover_res, undercover_res_extra)
undercover_res_processed <- process_undercover_result(undercover_res, sample_size_df) |>
mutate(p_value = ifelse(p_value <= 0, 1e-8, p_value))
saveRDS(undercover_res_processed, paste0(sceptre2_results_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds"))
rm(list = c("undercover_res", "undercover_res_extra", "undercover_res_processed"))
# resampling results
resampling_res <- readRDS(paste0(sceptre2_results_dir,
"resampling_distributions/seurat_resampling_at_scale.rds"))
resampling_res_processed <- process_undercover_result(resampling_res, sample_size_df)
saveRDS(object = resampling_res_processed, paste0(sceptre2_results_dir,
"resampling_distributions/seurat_resampling_at_scale_processed.rds"))
# pc results
rm(list = c("resampling_res", "resampling_res_processed"))
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results.rds"))
head(pc_res)
pc_res$method |> unique()
min_p <- pc_res |> filter(method == "sceptre", p_value > 0) |> pull(p_value) |> min()
pc_res_processed <- process_pc_result(pc_res, sample_size_df) |>
mutate(p_value = ifelse(p_value <= 0, min_p, p_value))
saveRDS(object = pc_res_processed,
file = paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_processed.rds"))
library(conflicted)
library(ondisc) # devtools::install_github('timothy-barry/ondisc')
#devtools::install_github('timothy-barry/sceptre3')
library(sceptre3)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(papalexi_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(papalexi_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# protein info
protein_odm_fp <- paste0(papalexi_dir, "protein/matrix.odm")
protein_metadata_fp <- paste0(papalexi_dir, "protein/metadata_qc.rds")
protein_odm <- read_odm(odm_fp = protein_odm_fp, metadata_fp = protein_metadata_fp)
protein_covariate_matrix <- protein_odm |> get_cell_covariates()
protein_matrix <- protein_odm[[seq(1,nrow(protein_odm)),]]
rownames(protein_matrix) <- get_feature_ids(protein_odm)
# set formulas, grna group target name
gene_formula <- ~ log(n_umis) + log(n_nonzero) + bio_rep + phase + p_mito
protein_formula <- ~ log(n_umis) + bio_rep + phase + p_mito
#######################################
# SET ARGS FOR GENE EXPRESSION ANALYSIS
#######################################
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- gene_formula
calibration_check <- FALSE
unique_grna = unique(grna_groups$grna_group)
response_grna_group_pairs <- expand.grid(response_id = get_feature_ids(gene_odm),
grna_group = unique_grna[-which(unique_grna == 'non-targeting')]) # an example set of pairs
test_stat <- "full"
return_resampling_dist <- FALSE
adaptive_permutation_test <- TRUE
fit_skew_normal <- TRUE
run_sceptre_lowmoi
calibration_check
response_grna_group_pairs
formula_object
rownames(grna_matrix)
grna_group_data_frame
result_gene <- run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = calibration_check)
