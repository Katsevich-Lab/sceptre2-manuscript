# 7. obtain precomputation peices for NT cells
pieces_precomp <- compute_precomputation_pieces(expression_vector_nt,
covariate_matrix_nt,
response_precomp$fitted_coefs,
response_precomp$theta,
full_test_stat = TRUE)
# 8. verify that the regression coefficients are high precision
low_level_association_funct <- "lowmoi_approximate_stat_discovery"
regression_ses <- compute_regression_ses(covariate_matrix_nt = covariate_matrix_nt,
w = pieces_precomp$w)
regression_ses
covariate_matrix |> head()
covariate_matrix[,"p_mito"] |> mean()
24.3713081 / 0.03675319
covariate_matrix[,"bio_reprep_2"] |> mean()
0.8365028 /0.2894978
regression_ses["bio_reprep_3"] / (covariate_matrix[,"bio_reprep_3"] |> mean())
regression_ses["response_n_umis"] / (covariate_matrix[,"response_n_umis"] |> mean())
regression_ses["log(response_n_umis)"] / (covariate_matrix[,"log(response_n_umis)"] |> mean())
regression_ses["log(response_n_nonzero)"] / (covariate_matrix[,"log(response_n_nonzero)"] |> mean())
regression_ses
response_precomp
regression_ses["log(bio_reprep_2)"] / (covariate_matrix[,"bio_reprep_2"] |> mean())
regression_ses["bio_reprep_2"] / (covariate_matrix[,"bio_reprep_2"] |> mean())
regression_ses["bio_reprep_3"] / (covariate_matrix[,"bio_reprep_3"] |> mean())
response_idx
response_idx <- 2
if ((response_idx == 1 || response_idx %% 5 == 0) && print_progress) {
cat(paste0("Analyzing pairs containing response ", as.character(response_ids[response_idx]), " (", response_idx, " of ", length(response_ids), ")\n"))
}
if (response_idx %% 200 == 0) gc() |> invisible()
response_id <- as.character(response_ids[response_idx])
# 3. load the expressions of the current response; also get the nt expression vector
expression_vector <- load_csr_row(j = response_matrix@j,
p = response_matrix@p,
x = response_matrix@x,
row_idx = which(rownames(response_matrix) == response_id),
n_cells = n_cells)
expression_vector_nt <- expression_vector[grna_assignments$all_nt_idxs]
# 4. obtain the gRNA groups to analyze
l <- response_grna_group_pairs$response_id == response_id
curr_df <- response_grna_group_pairs[l,]
# 5. if running a discovery analysis, do QC
if (!calibration_check) {
n_nonzero_cntrl_curr <- sum(expression_vector_nt >= 1)
grna_group_posits <- match(x = curr_df$grna_group, table = names(grna_assignments$grna_group_idxs))
n_nonzero_trt_curr <- compute_n_nonzero_trt_vector(expression_vector = expression_vector,
grna_group_idxs = grna_assignments$grna_group_idxs,
grna_group_posits = grna_group_posits)
curr_df$n_nonzero_trt <- n_nonzero_trt_curr
curr_df$n_nonzero_cntrl <- n_nonzero_cntrl_curr
pass_qc <- n_nonzero_trt_curr >= n_nonzero_trt_thresh
# i. if n_nonzero_cntrl_curr is less than n_nonzero_cntrl_thresh, jump to next iteration
if (n_nonzero_cntrl_curr < n_nonzero_cntrl_thresh || !any(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df
out_counter <- out_counter + 1L
next
}
# ii. remove any rows that have not passed qc; keep the rows that have passed qc
if (!all(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df[!pass_qc,]
out_counter <- out_counter + 1L
}
curr_df <- curr_df[pass_qc,]
}
# 6. perform the expression on technical factor regression
response_precomp <- perform_response_precomputation(expressions = expression_vector_nt,
covariate_matrix = covariate_matrix_nt,
regression_method = regression_method)
# 7. obtain precomputation peices for NT cells
pieces_precomp <- compute_precomputation_pieces(expression_vector_nt,
covariate_matrix_nt,
response_precomp$fitted_coefs,
response_precomp$theta,
full_test_stat = TRUE)
!calibration_check
if (!calibration_check) {
# 8. verify that the regression coefficients are high precision
low_level_association_funct <- "lowmoi_approximate_stat_discovery"
regression_ses <- compute_regression_ses(covariate_matrix_nt = covariate_matrix_nt,
w = pieces_precomp$w)
if (any(regression_ses >= SE_THRESH)) low_level_association_funct <- "lowmoi_exact_stat_discovery"
} else {
low_level_association_funct <- "lowmoi_undercover_stat"
}
regression_ses
regression_ses["bio_reprep_3"] / (covariate_matrix[,"bio_reprep_3"] |> mean())
regression_ses["bio_reprep_2"] / (covariate_matrix[,"bio_reprep_2"] |> mean())
load_all()
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen",
"simulated/experiment_1")
datasets
dataset <- "simulated/experiment_1"
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
gene_ids
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
n_ntc_cells
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula_str
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
thetas
print(gene_id)
gene_id <- gene_ids[1]
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
head(expression)
tail(expression)
mean(expression >= 3)
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
theta
gene_id
print(gene_id)
curr_theta <- thetas[[gene_id]]
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
curr_theta
curr_theta <- theta
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_nb
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
fit_p
fit_nb$deviance
fit_nb$df.residual
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
my_formula
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
my_formula_str
my_formula_str <- ~ + 1
my_formula_str
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
head
head(expression)
hist(expression)
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
theta
my_formula
my_formula <- ~ 1
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
head(curr_data_matrix)
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
fit_p
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen",
"simulated/experiment_1")
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
gene_ids
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
expression
hist(expression)
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
gene_id
gene_id <- gene_ids[2]
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
expression
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
# set params
FRAC_EXPRESSED_TRHESH <- 0.005
# 1.i) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(# frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
frangieh = formula(~ n_nonzero + n_umis + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + bio_rep + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
mimosca_formula_objs_protein <- list(# frangieh = formula(~ n_umis + phase + batch + 0),
frangieh = formula(~ n_umis + 0),
papalexi = formula(~ n_umis + bio_rep + p_mito + 0))
# 1.ii) Set the NB regression formula objects
nb_regression_formula_objs <- list(# frangieh = "~log(n_umis) + log(n_nonzero) + phase + batch",
frangieh = "~log(n_umis) + log(n_nonzero)",
schraivogel = "~ log(n_umis) + log(n_nonzero) + batch",
papalexi = "~ log(n_umis) + log(n_nonzero) + bio_rep + p_mito",
liscovitch = "~ log(n_fragments)",
simulated = "~log(n_umis) + log(n_nonzero)")
nb_regression_formula_objs_protein <- list(# frangieh = "~ offset(log(n_umis)) + phase + batch",
frangieh = "~ offset(log(n_umis))",
papalexi = "~ offset(log(n_umis)) + bio_rep + p_mito")
# 1.iii) Set the sceptre formula objects
sceptre_formula_objs <- list(# frangieh = ~ log(response_n_umis) + log(response_n_nonzero) + phase + batch,
frangieh = ~ log(response_n_umis) + log(response_n_nonzero),
schraivogel = ~ log(response_n_umis) + log(response_n_nonzero) + batch,
papalexi = ~ log(response_n_umis) + log(response_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(response_n_fragments),
simulated = ~ log(response_n_umis) + log(response_n_nonzero))
sceptre_formula_objs_protein <- list(# frangieh = ~ log(response_n_umis) + phase + batch,
frangieh = ~ log(response_n_umis),
papalexi = ~ log(response_n_umis) + bio_rep + p_mito)
# 1. iv) Set the global formula object (for use in the sceptre pipeline)
global_formula_objs <- list(# frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero) + phase + batch,
frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero),
schraivogel = ~ log(gene_n_umis) + log(gene_n_nonzero) + batch,
papalexi = ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(gene_n_fragments),
simulated = ~ log(gene_n_umis) + log(gene_n_nonzero))
paper <- papers[1]
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
# load the dataset into a multimodal ODM
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
# i. perform cell QC; restrict attention to 1 grna/cell and "passed_qc" cells (if applicable)
global_cell_covariates <- mm_odm |> get_cell_covariates()
cell_logical_v <- global_cell_covariates$grna_assignment_n_nonzero == 1
passed_qc_v <- grepl(pattern = "passed_qc", x = colnames(global_cell_covariates))
if (any(passed_qc_v)) {
passed_qc <- global_cell_covariates[, which(passed_qc_v)[1]]
cell_logical_v <- cell_logical_v & passed_qc
}
mm_odm_sub <- mm_odm[,cell_logical_v]
# ii. perform feature QC
modalities <- names(mm_odm_sub@modalities)
# grna assignment modality: keep features expressed in N_CELLS_PER_GRNA_THRESH cells. Also, add a "grna_assigned" column to the cell covariate matrix.
grna_assign_modality <- get_modality(mm_odm_sub, "grna_assignment")
grna_assign_mat <- lowmoi::load_whole_odm(grna_assign_modality)
assigned_grna <- apply(X = grna_assign_mat,
MARGIN = 2,
FUN = function(col) names(which.max(col))) |> unname()
grna_assign_modality <- grna_assign_modality |>
mutate_cell_covariates(assigned_grna = assigned_grna)
if (paper == "schraivogel") {
grna_assign_modality <- grna_assign_modality |>
mutate_feature_covariates(target = ifelse(is.na(known_effect), target, known_effect),
known_effect = NULL)
}
# grna expression modality (if applicable): keep the same features as above
if ("grna_expression" %in% modalities) {
grna_expression_modality <- get_modality(mm_odm_sub, "grna_expression")
if (paper == "schraivogel") {
grna_expression_modality <- grna_expression_modality |>
mutate_feature_covariates(target = known_effect, known_effect = NULL)
}
}
# response modalities: keep features expressed in FRAC_EXPRESSED_TRHESH of cells
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
mm_odm_sub@modalities[[modality]] <- modality_odm[feats_to_keep,]
}
# iii. perform feature ID cleanup; remove underscores and replace with dashes for all features
for (modality in modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
modality_odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-", x = modality_odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(modality_odm@feature_covariates) <- gsub(pattern = "_", replacement = "-", x = row.names(modality_odm@feature_covariates), fixed = TRUE)
if (modality == "grna_assignment") {
modality_odm <- mutate_cell_covariates(modality_odm, assigned_grna = gsub(pattern = "_", replacement = "-", x = assigned_grna, fixed = TRUE))
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# iv. add the mimosca/nb formula objects to each response modality
for (modality in remaining_modalities) {
modality_odm <- get_modality(mm_odm_sub, modality)
if (modality == "protein") {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs_protein[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs_protein[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs_protein[[paper]]
} else {
if (dataset %in% c("enhancer_screen_chr11", "enhancer_screen_chr8") && paper == "schraivogel") { # special case: dataset is schraivogel/enhancer_screen_chr11 or schraivogel/enhancer_screen_chr8
modality_odm@misc[["mimosca_formula"]] <- formula(~ n_nonzero + n_umis + 0)
modality_odm@misc[["nb_regression_formula"]] <- "~ offset(log(n_umis)) + log(n_nonzero)"
modality_odm@misc[["sceptre_formula"]] <- formula(~ log(response_n_umis) + log(response_n_nonzero))
} else {
modality_odm@misc[["mimosca_formula"]] <- mimosca_formula_objs[[paper]]
modality_odm@misc[["nb_regression_formula"]] <- nb_regression_formula_objs[[paper]]
modality_odm@misc[["sceptre_formula"]] <- sceptre_formula_objs[[paper]]
}
}
mm_odm_sub@modalities[[modality]] <- modality_odm
}
# Write all modalities
lowmoi::save_all_modalities(multimodal_odm = mm_odm_sub, paper = paper, dataset = dataset, metadata_file_name = "metadata_qc.rds")
# v. create a multimodal ondisc matrix free of redundancy and write
mm_odm_sub_proc <- lowmoi::process_multimodal_odm(mm_odm_sub)
mm_odm_sub_proc@global_misc[["formula"]] <- global_formula_objs[[paper]]
mm_odm_sub_proc@global_misc[["moi"]] <- "low"
save_multimodal_odm(multimodal_odm = mm_odm_sub_proc,
multimodal_metadata_fp = multimodal_metadata_fp)
# vi. write the positive control pairs (at the level of the paper-dataset)
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
if (paper %in% c("frangieh", "papalexi")) {
# grouped pairs
targets <- intersect(grna_feature_df |> dplyr::pull(target),
gene_modality |> ondisc::get_feature_ids())
pc_pairs <- data.frame(grna_group = targets, response_id = targets)
# ungrouped pairs
ungroup_map <- data.frame(grna_id = row.names(grna_feature_df),
grna_group = grna_feature_df$target)
ungroup_pc_pairs <- dplyr::left_join(ungroup_map, pc_pairs, by = "grna_group") |>
na.omit() |>
dplyr::select(grna_id, response_id)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
if (paper == "schraivogel") {
targets <- intersect(grna_feature_df |> dplyr::pull(known_effect),
gene_modality |> ondisc::get_feature_ids())
ungroup_pairs_all <- grna_feature_df |>
dplyr::filter(known_effect %in% targets)
# first, grouped pairs
pc_pairs <- ungroup_pairs_all |>
dplyr::select(grna_group = target, response_id = known_effect) |>
dplyr::distinct() |>
na.omit()
rownames(pc_pairs) <- NULL
# next, ungrouped pairs
ungroup_pc_pairs <- data.frame(grna_id = row.names(ungroup_pairs_all),
response_id = ungroup_pairs_all$known_effect)
saveRDS(pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_grouped.rds"))
saveRDS(ungroup_pc_pairs, file = paste0(paper_dir, dataset, "/gene/pos_control_pairs_single.rds"))
}
# finally, do the papalexi protein data
if (paper == "papalexi") {
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
protein_modality <- mm_odm_sub_proc |> get_modality("protein")
x <- grna_assignment_modality |>
get_feature_covariates() |>
dplyr::filter(!is.na(known_protein_effect),
n_nonzero > 0)
pos_control_ungroup <- data.frame(grna_group = row.names(x),
response_id = x$known_protein_effect)
pos_control_group <- x |>
dplyr::select(target, known_protein_effect) |>
dplyr::distinct() |>
dplyr::rename("grna_group" = "target", "response_id" = "known_protein_effect")
row.names(pos_control_group) <- NULL
saveRDS(pos_control_group,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_grouped.rds"))
saveRDS(pos_control_ungroup,
file = paste0(paper_dir, dataset, "/protein/pos_control_pairs_single.rds"))
}
grna_odm
grna_feature_df
head(grna_feature_df)
head(grna_feature_df)
grna_groups_to_keep <- grna_feature_df |>
dplyr::pull(target) |>
unique()
grna_groups_to_keep
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
mm_odm
modality
remaining_modalities
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
head(grna_feature_df)
remaining_modalities
mm_odm_sub
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
feats_to_keep
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
# vi. write trans pairs
grna_assignment_modality <- mm_odm_sub_proc |> get_modality("grna_assignment")
gene_modality <- mm_odm_sub_proc |> get_modality("gene")
grna_feature_df <- grna_assignment_modality |>
ondisc::get_feature_covariates() |>
dplyr::filter(n_nonzero >= 10) # require each individual gRNA to have at least 10 expressed cells
grna_groups_to_keep <- grna_groups_to_keep[grna_groups_to_keep != "non-targeting"]
grna_groups_to_keep
modality_odm <- get_modality(mm_odm_sub, modality)
remaining_modalities
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
feats_to_keep
modality
modality <- "gene"
modality_odm <- get_modality(mm_odm_sub, modality)
feats_to_keep <- get_highly_expressed_features(modality_odm, FRAC_EXPRESSED_TRHESH)
head(feats_to_keep)
head(grna_groups_to_keep)
12081/60
12081/(60^2)
