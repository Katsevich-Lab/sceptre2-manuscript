theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic") +
cowplot::theme_half_open()
p1
p1 <- ggplot(m, aes(x = p_resid, y = p_lrt, col = label)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ residual statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic") +
cowplot::theme_half_open(font_size = 10)
p1
p1 <- ggplot(m, aes(x = p_resid, y = p_lrt, col = label)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ residual statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic") +
theme_half_open(font_size = 11)
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
p2 <- ggplot(m, aes(x = p_score, y = p_lrt, col = null_true)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ score statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) + theme(legend.position = "none") +
ggtitle("Score statistic") +
theme_half_open(font_size = 11)
p_final <- plot_grid(plot_grid(p1, p2, nrow = 1), legend, nrow = 2, rel_heights = c(0.9, 0.1))
p_final
p1 <- ggplot(m, aes(x = p_resid, y = p_lrt, col = label)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ residual statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic")
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
p2 <- ggplot(m, aes(x = p_score, y = p_lrt, col = null_true)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ score statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) + theme(legend.position = "none") +
ggtitle("Score statistic")
source("~/.Rprofile")
.get_config_path("LOCAL_CODE_DIR")
source(paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"))
my_theme
p1 <- ggplot(m, aes(x = p_resid, y = p_lrt, col = label)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ residual statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) +
my_theme +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic")
p1
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
p1
p2 <- ggplot(m, aes(x = p_score, y = p_lrt, col = null_true)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ score statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) + my_theme_no_legend +
ggtitle("Score statistic")
p_final <- plot_grid(plot_grid(p1, p2, nrow = 1), legend, nrow = 2, rel_heights = c(0.9, 0.1))
p_final
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/figs_revision/resid_vs_score_simulation.png")
p_final <- plot_grid(plot_grid(p1, p2, nrow = 1), legend, nrow = 2, rel_heights = c(0.9, 0.1))
p_final
p_final <- plot_grid(plot_grid(p1, p2, nrow = 1), legend, nrow = 2, rel_heights = c(0.9, 0.1))
ggsave(plot = p_final, filename = paste0(), device = "png",
scale = 1, width = 7, height = 5, dpi = 330)
ggsave(plot = p_final, filename = to_save_fp, device = "png",
scale = 1, width = 7, height = 5, dpi = 330)
ggsave(plot = p_final, filename = to_save_fp, device = "png",
scale = 1, width = 7, height = 4, dpi = 330)
ggsave(plot = p_final, filename = to_save_fp, device = "png",
scale = 1, width = 6.5, height = 3.5, dpi = 330)
ggsave(plot = p_final, filename = to_save_fp, device = "png",
scale = 0.9, width = 6.5, height = 3.5, dpi = 330)
with(m, cor(formula, p_score_trans))
head(m)
with(m, cor(p_score_trans, p_lrt_trans))
with(m, cor(p_score_trans, p_lrt_trans))
# fit linear models
fit_score <- lm(formula = p_score_trans ~ p_lrt_trans, data = m)
fit_resid <- lm(formula = p_resid_trans ~ p_lrt_trans, data = m)
fit_score
fit_resid
with(m, cor(p_score_trans, p_lrt_trans))
with(m, cor(p_resid_trans, p_lrt_trans))
# apply bh
fdr_level <- 0.1
n_nonnull <- sum(!m$null_true)
statistical_result_df <- m |> select(p_resid, p_score, p_lrt, null_true) |>
pivot_longer(cols = c("p_resid", "p_score", "p_lrt"),
names_to = "method", values_to = "p_val") |>
group_by(method) |>
mutate(p_adj = p.adjust(p_val, method = "BH"), signif = p_adj < fdr_level) |>
filter(signif) |>
summarize(n_total_discoveries = dplyr::n(),
n_false_discoveries = sum(null_true))
# assess mean running time
time_result_df <- m |> select(resid_time, score_time) |>
pivot_longer(cols = c("resid_time", "score_time"),
names_to = "method", values_to = "time") |>
group_by(method) |>
summarize(m_resid_time = mean(time),
m_score_time = mean(time),
upper_ci = m_resid_time + 1.96 * sd(time)/sqrt(n_rep),
lower_ci = m_resid_time - 1.96 * sd(time)/sqrt(n_rep))
# make plots
cols <- c("deepskyblue4", "firebrick2")
m <- m |> mutate(label = factor(x = null_true, levels = c(FALSE, TRUE),
labels = c("Alternative true", "Null true")))
p1 <- ggplot(m, aes(x = p_resid, y = p_lrt, col = label)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ residual statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) +
my_theme +
theme(legend.position = "bottom", legend.title = element_blank()) +
ggtitle("Residual statistic")
legend <- get_legend(p1)
p1 <- p1 + theme(legend.position = "none")
p2 <- ggplot(m, aes(x = p_score, y = p_lrt, col = null_true)) +
geom_point(size = 0.9) +
theme_bw() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
geom_abline(slope = 1, intercept = 0) +
xlab("p (perm. test w/ score statistic)") +
ylab("p (GLM likelihood ratio test)") +
scale_color_manual(values = cols) + my_theme_no_legend +
ggtitle("Score statistic")
statistical_result_df
9
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
# set params
FRAC_EXPRESSED_TRHESH <- 0.005
# 1.i) Set the MIMOSCA formula objects
mimosca_formula_objs <- list(# frangieh = formula(~ n_nonzero + n_umis + phase + batch + 0),
frangieh = formula(~ n_nonzero + n_umis + 0),
schraivogel = formula(~ n_nonzero + n_umis + batch + 0),
papalexi = formula(~ n_nonzero + n_umis + bio_rep + p_mito + 0),
liscovitch = formula(~ n_nonzero + n_fragments + 0),
simulated = formula(~ n_nonzero + n_umis + 0))
mimosca_formula_objs_protein <- list(# frangieh = formula(~ n_umis + phase + batch + 0),
frangieh = formula(~ n_umis + 0),
papalexi = formula(~ n_umis + bio_rep + p_mito + 0))
# 1.ii) Set the NB regression formula objects
nb_regression_formula_objs <- list(# frangieh = "~log(n_umis) + log(n_nonzero) + phase + batch",
frangieh = "~log(n_umis) + log(n_nonzero)",
schraivogel = "~ log(n_umis) + log(n_nonzero) + batch",
papalexi = "~ log(n_umis) + log(n_nonzero) + bio_rep + p_mito",
liscovitch = "~ log(n_fragments)",
simulated = "~log(n_umis) + log(n_nonzero)")
nb_regression_formula_objs_protein <- list(# frangieh = "~ offset(log(n_umis)) + phase + batch",
frangieh = "~ offset(log(n_umis))",
papalexi = "~ offset(log(n_umis)) + bio_rep + p_mito")
# 1.iii) Set the sceptre formula objects
sceptre_formula_objs <- list(# frangieh = ~ log(response_n_umis) + log(response_n_nonzero) + phase + batch,
frangieh = ~ log(response_n_umis) + log(response_n_nonzero),
schraivogel = ~ log(response_n_umis) + log(response_n_nonzero) + batch,
papalexi = ~ log(response_n_umis) + log(response_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(response_n_fragments),
simulated = ~ log(response_n_umis) + log(response_n_nonzero))
sceptre_formula_objs_protein <- list(# frangieh = ~ log(response_n_umis) + phase + batch,
frangieh = ~ log(response_n_umis),
papalexi = ~ log(response_n_umis) + bio_rep + p_mito)
# 1. iv) Set the global formula object (for use in the sceptre pipeline)
global_formula_objs <- list(# frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero) + phase + batch,
frangieh = ~ log(gene_n_umis) + log(gene_n_nonzero),
schraivogel = ~ log(gene_n_umis) + log(gene_n_nonzero) + batch,
papalexi = ~ log(gene_n_umis) + log(gene_n_nonzero) + bio_rep + p_mito,
liscovitch = ~ log(gene_n_fragments),
simulated = ~ log(gene_n_umis) + log(gene_n_nonzero))
papers
paper <- papers[1]
paper
paper
papers
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
# load the dataset into a multimodal ODM
print(paste0("paper: ", paper, " dataset: ", dataset))
multimodal_metadata_fp <- paste0(paper_dir, dataset, "/multimodal_metadata.rds")
if (file.exists(multimodal_metadata_fp)) file.remove(multimodal_metadata_fp)
mm_odm <- lowmoi::read_all_modalities(paper, dataset)
lowmoi::read_all_modalities
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
control_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/")
# gene info
gene_odm_fp <- paste0(control_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(control_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(control_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_nonzero, gene_n_umis)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# set the gene-grna group pairs
response_grna_group_pairs <- sceptre::generate_all_pairs(response_matrix = response_matrix,
grna_group_data_frame = grna_group_data_frame)
# create the list of items to write
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs)
dir_to_save <- paste0(control_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
###############
# PAPALEXI GENE
###############
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_umis, gene_n_nonzero, bio_rep, p_mito)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# set the gene-grna group pairs
response_grna_group_pairs <- sceptre::generate_all_pairs(response_matrix = response_matrix,
grna_group_data_frame = grna_group_data_frame)
response_matrix
grna_matrix
grna_group_data_frame
formula_object
papalexi_dir
# create list
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(papalexi_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
dataset <- dataset
dataset
dataset <- "papalexi"
analysis_type <- "discovery"
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
calibration_check
head(l$grna_group_data_frame)
#####################################################################################
# This script saves the portions of the Papalexi and Frangieh IFN-gamma datasets
# that are used by the run_sceptre_lowmoi function for the discovery analysis (Fig 5)
# in standard R format (as opposed to ondisc format). This script thus facillitates
# replication of the full discovery analyses.
#
# This script assumes that the branch of sceptre that is installed is "resid_statistic"
#####################################################################################
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
#####################################################################################
# This script saves the portions of the Papalexi and Frangieh IFN-gamma datasets
# that are used by the run_sceptre_lowmoi function for the discovery analysis (Fig 5)
# in standard R format (as opposed to ondisc format). This script thus facillitates
# replication of the full discovery analyses.
#
# This script assumes that the branch of sceptre that is installed is "resid_statistic"
#####################################################################################
##################
# FRANGIEH CONTROL
##################
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
control_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/")
# gene info
gene_odm_fp <- paste0(control_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(control_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(control_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_nonzero, gene_n_umis)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_target = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# create the list of items to write
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(control_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
###############
# PAPALEXI GENE
###############
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
papalexi_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/")
# gene info
gene_odm_fp <- paste0(papalexi_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(papalexi_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(papalexi_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_expression")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates() |>
dplyr::select(gene_n_umis, gene_n_nonzero, bio_rep, p_mito)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_target = grna_odm@feature_covariates$target)
# set formulas, grna group target name
formula_object <- mm_odm@global_misc$formula
# create list
l <- list(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object)
dir_to_save <- paste0(papalexi_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
#!/usr/bin/env Rscript
# The purpose of this script is to: (1) run the (approximate) calibration check for Papalexi and Frangieh IFN-gamma and (2) run the trans discovery analysis for these two datasets. We time and profile the memory of all four analyses from within Linux.
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
source("~/.Rprofile")
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
source("~/.Rprofile")
args <- commandArgs(trailingOnly = TRUE)
dataset <- args[1] # "papalexi" or "frangieh"
analysis_type <- args[2] # "calibration" or "discovery"
dataset <- "papalexi"
analysis_type <- "calibration"
cat(dataset); cat("\n")
cat(analysis_type); cat("\n")
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
f_name <- paste0("papalexi_gene_", analysis_type, "_res.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/control/r_objects.rds")
f_name <- paste0("frangieh_control_", analysis_type, "_res.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
l$response_matrix[1:6,1:10]
l$grna_matrix[1:5,1:5]
head( l$grna_group_data_frame)
l$covariate_data_frame |> head()
###################################################
# Prepare the analysis by creating a sceptre object
###################################################
sceptre_object <- import_data(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
grna_target_data_frame = l$grna_group_data_frame,
moi = "low")
sceptre_object
sceptre_object@covariate_data_frame |> head()
l$covariate_data_frame |> head()
sceptre_object@covariate_data_frame <- l$covariate_data_frame
sceptre_object
sceptre_object@covariate_data_frame |> head()
l$grna_matrix
run_sceptre_lowmoi
l$grna_matrix
dim(l$response_matrix)
