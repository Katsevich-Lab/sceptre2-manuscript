"H3K36me3.broadPeak", "H3K4me1.broadPeak", "H3K4me2.broadPeak",
"H3K4me3.broadPeak", "H3K79me2.broadPeak", "H3K9Ac.broadPeak",
"H3K9me1.broadPeak", "H3K9me3.broadPeak", "H4K20me1.broadPeak")
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp)
# load data for ODM 2, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_2.rds"))
chip_counts_odm_fp <- paste0(experiment_2_dir_chip, "chip_counts.odm")
chip_counts_metadata_fp <- paste0(experiment_2_dir_chip, "metadata.rds")
gRNA_counts_odm_fp <- paste0(experiment_2_dir_gRNA, "gRNA_counts.odm")
gRNA_counts_metadata_fp <- paste0(experiment_2_dir_gRNA, "metadata.rds")
all_chip_names <- m_list$atac_count |> row.names()
files_used_in_exp_2 <- all_chip_names[!(all_chip_names %in% files_used_in_exp)]
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp_2)
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# load packages
library(ondisc)
# loop over papers
for (paper in papers) {
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
for (modality in modalities) {
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
# if the modality is NOT gRNA... (if it is, then skip; no feature QC on the gRNA matrix for now)
if (modality != "grna") {
odm_fp <- paste0(modality_dir, "matrix.odm")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
# read the odm
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
highly_exp_feats <- get_highly_expressed_features(odm, frac_expressed = 0.005)
if (nrow(odm) == length(highly_exp_feats)) {
# symbolic link to the current metadata_fp if no subset necessary
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
} else {
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
}
} else {
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
}
}
}
}
285 - 46
(285 - 45)/45
modality
modalities
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
modality_dir
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
metadata_fp
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
modality != "grna"
to_save_metadata_fp
metadata_fp
?R.utils::createLink
odm_sub
to_save_metadata_fp
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
to_save_metadata_fp
metadata_fp
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
metadata_fp
to_save_metadata_fp
metadata_fp
to_save_metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
to_save_metadata_fp
metadata_fp
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
paste0("ln -s ", metadata_fp, to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
paste("ln -s", metadata_fp, to_save_metadata_fp)
system(R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp))
to_save_metadata_fp
metadata_fp
system(R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp))
# the modality IS gRNA; simply create a symbolic link (no qc)
paste("ln -s", metadata_fp, to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
# This script performs a lightweight feature QC on all datasets under consideration.
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# load packages
library(ondisc)
for (paper in papers) {
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
for (modality in modalities) {
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
# if the modality is NOT gRNA... (if it is, then skip; no feature QC on the gRNA matrix for now)
if (modality != "grna") {
odm_fp <- paste0(modality_dir, "matrix.odm")
# read the odm
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
highly_exp_feats <- get_highly_expressed_features(odm, frac_expressed = 0.005)
if (nrow(odm) == length(highly_exp_feats)) {
# symbolic link to the current metadata_fp if no subset necessary
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
} else {
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
}
} else {
# the modality IS gRNA; simply create a symbolic link (no qc)
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
}
}
}
}
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- paste0("NTC_", seq(1, N_GRNAS))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
rep("non-targeting", N_NTC_GRNAS)
rep("non-targeting", N_NTC_GRNAS)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
ondisc::mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- paste0("NTC_", seq(1, N_GRNAS))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_qc.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_qc.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
gRNA_odm |> get_feature_covariates()
paste0("NTC_", seq(1, N_GRNAS))
paste0("NTC_", seq(1, N_NTC_GRNAS))
gRNA_ids <- rep(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS))
gRNA_ids <- c(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
gRNA_ids
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- c(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
gRNA_odm |> get_feature_covariates()
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_gRNA_check_results.rds")
undercover_res <- readRDS(undercover_res_fp)
undercover_res_fp
undercover_res
undercover_res |> dplyr::filter(is.na(p_value))
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(response_id)
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(response_id) |> as.character()
problem_genes <- undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(response_id) |> as.character()
saveRDS(object = problem_genes, file = "~/Desktop/problem_genes.rds")
# get fps/data
undercover_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_gRNA_check_results.rds")
undercover_res <- readRDS(undercover_res_fp)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/")
# load packages
library(ggplot2)
library(katlabutils)
undercover_res
undercover_res |> dplyr::filter(is.na(p_value))
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(undercover_gRNA)
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(undercover_gRNA) |> unique()
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(undercover_gRNA) |> unique() |> length()
undercover_res |> dplyr::filter(is.na(p_value)) |> dplyr::pull(undercover_gRNA) |> length()
undercover_res
problem_df <- undercover_res |> dplyr::filter(is.na(p_value))
problem_df
dataset_name
dataset_name <- "frangieh/control/gene"
undercover_ntc_name <- "ACAGCGCGATCGTTCGACGA"
method_name <- "seurat_de"
ram_req <- "1"
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and gRNA expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- paste0(sub('/[^/]*$', '', dataset_name), "/grna")
gRNA_odm <- load_dataset_modality(grna_dataset_name)
# perform the label swap
gRNA_feature_covariates <- gRNA_odm |> get_feature_covariates()
tab_target_types <- sort(table(gRNA_feature_covariates$target_type), decreasing = TRUE)
new_label <- (tab_target_types[names(tab_target_types) != "non-targeting"] |> names())[1]
gRNA_feature_covariates[undercover_ntc_name, "target_type"] <- new_label
gRNA_odm_swapped <- gRNA_odm |> mutate_feature_covariates(target_type = gRNA_feature_covariates$target_type)
# obtain the (response, gRNA) pairs to analyze
response_gRNA_group_pairs <- data.frame(response_id = get_feature_ids(response_odm),
gRNA_group = undercover_ntc_name)
nrow(response_gRNA_group_pairs)
# obtain the (response, gRNA) pairs to analyze
response_gRNA_group_pairs <- data.frame(response_id = get_feature_ids(response_odm),
gRNA_group = undercover_ntc_name)
# verify that "method" is a function within the lowmoi package
if (!exists(x = method_name, where = "package:lowmoi", mode = "function")) {
stop(paste0("The method `", method_name, "` is not present in the `lowmoi` package. Either add this method to the package or update the `data_method_pair_file.groovy` file."))
}
# verify that the formal arguments of "method" are correct
formal_args <- names(formals(method_name))
if (!all(c("response_odm", "gRNA_odm", "response_gRNA_group_pairs") %in% formal_args)) {
stop(paste0("The formal arguments of `", method_name, "` must include `response_odm`, `gRNA_odm`, and `response_gRNA_group_pairs`."))
}
response_gRNA_group_pairs |> dplyr::filter(response_id %in% c("BANCR", "CCL8"))
rbind(response_gRNA_group_pairs |> dplyr::filter(response_id %in% c("BANCR", "CCL8")), response_gRNA_group_pairs |> dplyr::sample_n(100))
response_gRNA_group_pairs <- rbind(response_gRNA_group_pairs |> dplyr::filter(response_id %in% c("BANCR", "CCL8")), response_gRNA_group_pairs |> dplyr::sample_n(100))
method_name
response_odm
gRNA_odm_swapped
response_gRNA_group_pairs
result_df <- do.call(what = method_name, args = list(response_odm = response_odm,
gRNA_odm = gRNA_odm_swapped,
response_gRNA_group_pairs = response_gRNA_group_pairs))
response_gRNA_group_pairs
response_gRNA_group_pairs <- response_gRNA_group_pairs[1:10,]
response_gRNA_group_pairs
result_df <- do.call(what = method_name, args = list(response_odm = response_odm,
gRNA_odm = gRNA_odm_swapped,
response_gRNA_group_pairs = response_gRNA_group_pairs))
response_odm
gRNA_odm_swapped
head(response_gRNA_group_pairs)
response_gRNA_group_pairs
method_name
response_odm
response_odm
response_gRNA_group_pairs
response_odm = response_odm
gRNA_odm = gRNA_odm_swapped
response_gRNA_group_pairs = response_gRNA_group_pairs
response_mat <- load_whole_odm(response_odm)
gRNA_mat <- load_whole_odm(gRNA_odm)
gRNA_feature_covariates <- ondisc::get_feature_covariates(gRNA_odm)
cell_covariates <- ondisc::get_cell_covariates(response_odm)
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col)))
cell_metadata <- dplyr::mutate(data.frame(perturbation = gRNA_assignments), cell_covariates)
seurat_obj <- Seurat::CreateSeuratObject(counts = response_mat,
assay = "RNA", meta.data = cell_metadata)
rm(response_mat)
seurat_obj <- Seurat::NormalizeData(seurat_obj)
neg_control_gRNAs <- row.names(dplyr::filter(gRNA_feature_covariates, target_type == "non-targeting"))
aggregated_gRNAs <- ifelse(cell_metadata$perturbation %in%
neg_control_gRNAs, "NT", cell_metadata$perturbation)
seurat_obj$aggregate_gRNA <- aggregated_gRNAs
Seurat::Idents(seurat_obj) <- "aggregate_gRNA"
unique_gRNA_groups <- as.character(unique(response_gRNA_group_pairs$gRNA_group))
unique_gRNA_groups
curr_gRNA <- unique_gRNA_groups
curr_response_gRNA_group_pairs <- dplyr::filter(response_gRNA_group_pairs, gRNA_group == curr_gRNA)
curr_response_gRNA_group_pairs
seurat_obj
curr_gRNA
seurat_obj
seurat_obj
seurat_obj
seurat_obj[1,]
curr_response_gRNA_group_pairs
curr_response_gRNA_group_pairs$gRNA_group
curr_response_gRNA_group_pairs$response_id
curr_response_gRNA_group_pairs$response_id
markers_res <- Seurat::FindMarkers(object = seurat_obj[curr_response_gRNA_group_pairs$response_id,],
ident.1 = curr_gRNA, ident.2 = "NT", only.pos = FALSE,
logfc.threshold = 0.0, test.use = "wilcox", min.pct = 0.0)
markers_res
curr_gRNA
seurat_obj$aggregate_gRNA
Seurat::FindMarkers
seurat_obj@assays$RNA@counts["BANCR",]
gene_exp <- seurat_obj@assays$RNA@counts["BANCR",]
sum(gene_exp)
gene_exp <- seurat_obj@assays$RNA@data["BANCR",]
head(gene_exp)
sum(gene_exp)
gene_exp <- seurat_obj@assays$RNA@data["CCL8",]
gene_exp |> sum()
seurat_obj@assays
seurat_obj@assays$RNA@scale.data
seurat_obj@assays$RNA@counts
seurat_obj@assays$RNA@data
seurat_obj@assays$RNA@counts
seurat_obj@assays$RNA@counts["BANCR",]
seurat_obj@assays$RNA@counts["BANCR",] |> sum()
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# remove simulated paper
papers <- papers[papers != "simulated"]
# set params
N_CELLS_PER_GRNA_THRESH <- 10
# load packages
library(ondisc)
paper <- papers[1]
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
modality <- modalities[1]
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
odm_fp <- paste0(modality_dir, "matrix.odm")
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
odm
odm_m <- lowmoi::load_whole_odm(odm)
# check that the features have no underscores; if so, replace with dashes (both feature IDs and row names of feature covariate matrix)
if (any(grepl(pattern = "_", x = get_feature_ids(odm), fixed = TRUE))) {
odm@ondisc_matrix@feature_ids <- gsub(pattern = "_", replacement = "-",
x = odm@ondisc_matrix@feature_ids, fixed = TRUE)
row.names(odm@feature_covariates) <- gsub(pattern = "_", replacement = "-",
x = row.names(odm@feature_covariates), fixed = TRUE)
}
odm_m
odm_m >= 1
p_expressed <- Matrix::rowSums(odm_m >= 1)
p_expressed <- Matrix::rowSums(odm_m >= 1)/ncol(odm_m)
head(p_expressed)
FRAC_EXPRESSED_TRHESH <- 0.005
highly_exp_feats <- p_expressed >= FRAC_EXPRESSED_TRHESH
head(highly_exp_feats)
mean(highly_exp_feats)
FRAC_EXPRESSED_TRHESH
highly_exp_feats <- p_expressed >= FRAC_EXPRESSED_TRHESH
highly_exp_feats
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
