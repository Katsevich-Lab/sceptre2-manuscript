n_nonzero = NULL, n_umis = NULL)
save_odm(odm = chip_odm_mod, metadata_fp = chip_counts_metadata_fp)
# initialize the gRNA odm
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = gRNA_counts_odm_fp,
metadata_fp = gRNA_counts_metadata_fp)
# add information about target and target_type
gRNA_ids <- gsub(pattern = "non_targeting", replacement = "non-targeting", x = gRNA_odm |> get_feature_ids(), fixed = TRUE)
target <- strsplit(x = gRNA_ids, split = "_", fixed = TRUE) |> sapply(FUN = function(entry) entry[1])
target_type <- ifelse(target %in% c("NT", "non-targeting"), "non-targeting", "gene")
gRNA_odm_mod <- gRNA_odm |> mutate_feature_covariates(target = target, target_type = target_type)
save_odm(odm = gRNA_odm_mod, metadata_fp = gRNA_counts_metadata_fp)
}
# load data for ODM 1, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_1.rds"))
library(ondisc)
# load/create dirs
offsite_dir <- .get_config_path("LOCAL_LISCOVITCH_2021_DATA_DIR")
intermediate_files_dir <- paste0(offsite_dir, "intermediate/")
processed_dir <- paste0(offsite_dir, "processed/")
if (!dir.exists(processed_dir)) dir.create(processed_dir)
experiment_1_dir <- paste0(processed_dir, "experiment_small/")
experiment_2_dir <- paste0(processed_dir, "experiment_big/")
if (!dir.exists(experiment_1_dir)) dir.create(experiment_1_dir)
if (!dir.exists(experiment_2_dir)) dir.create(experiment_2_dir)
experiment_1_dir_chip <- paste0(experiment_1_dir, "chromatin/")
experiment_1_dir_gRNA <- paste0(experiment_1_dir, "gRNA/")
if (!dir.exists(experiment_1_dir_chip)) dir.create(experiment_1_dir_chip)
if (!dir.exists(experiment_1_dir_gRNA)) dir.create(experiment_1_dir_gRNA)
experiment_2_dir_chip <-  paste0(experiment_2_dir, "chromatin/")
experiment_2_dir_gRNA <- paste0(experiment_2_dir, "gRNA/")
if (!dir.exists(experiment_2_dir_chip)) dir.create(experiment_2_dir_chip)
if (!dir.exists(experiment_2_dir_gRNA)) dir.create(experiment_2_dir_gRNA)
# write function to initialize odms
write_m_list <- function(m_list, chip_counts_odm_fp, chip_counts_metadata_fp, gRNA_counts_odm_fp, gRNA_counts_metadata_fp, files_used_in_exp) {
chip_counts <- m_list$atac_count
gRNA_counts <- m_list$gRNA_count
n_fragments <- m_list$fragment_lib_sizes
# initialize the chip counts odm
chip_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = chip_counts,
barcodes = colnames(chip_counts),
features_df = data.frame(row.names(chip_counts)),
odm_fp = chip_counts_odm_fp)
# modify chip metadata; add n_fragments per cell and file_used_in_exp
feat_ids <- chip_odm |> get_feature_ids()
used_in_exp_bool <- feat_ids %in% files_used_in_exp
chip_odm_mod <- chip_odm |> mutate_cell_covariates(n_fragments = n_fragments$n_fragments,
n_nonzero = NULL, n_umis = NULL)
save_odm(odm = chip_odm_mod, metadata_fp = chip_counts_metadata_fp)
# initialize the gRNA odm
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = gRNA_counts_odm_fp,
metadata_fp = gRNA_counts_metadata_fp)
# add information about target and target_type
gRNA_ids <- gsub(pattern = "non_targeting", replacement = "non-targeting", x = gRNA_odm |> get_feature_ids(), fixed = TRUE)
target <- strsplit(x = gRNA_ids, split = "_", fixed = TRUE) |> sapply(FUN = function(entry) entry[1])
target_type <- ifelse(target %in% c("NT", "non-targeting"), "non-targeting", "gene")
gRNA_odm_mod <- gRNA_odm |> mutate_feature_covariates(target = target, target_type = target_type)
save_odm(odm = gRNA_odm_mod, metadata_fp = gRNA_counts_metadata_fp)
}
# load data for ODM 1, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_1.rds"))
chip_counts_odm_fp <- paste0(experiment_1_dir_chip, "chip_counts.odm")
chip_counts_metadata_fp <- paste0(experiment_1_dir_chip, "metadata.rds")
gRNA_counts_odm_fp <- paste0(experiment_1_dir_gRNA, "gRNA_counts.odm")
gRNA_counts_metadata_fp <- paste0(experiment_1_dir_gRNA, "metadata.rds")
files_used_in_exp <- c("H2AZ.broadPeak", "H3K27Ac.broadPeak", "H3K27me3.broadPeak",
"H3K36me3.broadPeak", "H3K4me1.broadPeak", "H3K4me2.broadPeak",
"H3K4me3.broadPeak", "H3K79me2.broadPeak", "H3K9Ac.broadPeak",
"H3K9me1.broadPeak", "H3K9me3.broadPeak", "H4K20me1.broadPeak")
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp)
# load data for ODM 2, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_2.rds"))
chip_counts_odm_fp <- paste0(experiment_2_dir_chip, "chip_counts.odm")
chip_counts_metadata_fp <- paste0(experiment_2_dir_chip, "metadata.rds")
gRNA_counts_odm_fp <- paste0(experiment_2_dir_gRNA, "gRNA_counts.odm")
gRNA_counts_metadata_fp <- paste0(experiment_2_dir_gRNA, "metadata.rds")
all_chip_names <- m_list$atac_count |> row.names()
files_used_in_exp_2 <- all_chip_names[!(all_chip_names %in% files_used_in_exp)]
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp_2)
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# load packages
library(ondisc)
# loop over papers
for (paper in papers) {
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
for (modality in modalities) {
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
# if the modality is NOT gRNA... (if it is, then skip; no feature QC on the gRNA matrix for now)
if (modality != "grna") {
odm_fp <- paste0(modality_dir, "matrix.odm")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
# read the odm
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
highly_exp_feats <- get_highly_expressed_features(odm, frac_expressed = 0.005)
if (nrow(odm) == length(highly_exp_feats)) {
# symbolic link to the current metadata_fp if no subset necessary
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
} else {
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
}
} else {
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
}
}
}
}
library(ondisc)
# load/create dirs
offsite_dir <- .get_config_path("LOCAL_LISCOVITCH_2021_DATA_DIR")
intermediate_files_dir <- paste0(offsite_dir, "intermediate/")
processed_dir <- paste0(offsite_dir, "processed/")
if (!dir.exists(processed_dir)) dir.create(processed_dir)
experiment_1_dir <- paste0(processed_dir, "experiment_small/")
experiment_2_dir <- paste0(processed_dir, "experiment_big/")
if (!dir.exists(experiment_1_dir)) dir.create(experiment_1_dir)
if (!dir.exists(experiment_2_dir)) dir.create(experiment_2_dir)
experiment_1_dir_chip <- paste0(experiment_1_dir, "chromatin/")
experiment_1_dir_gRNA <- paste0(experiment_1_dir, "gRNA/")
if (!dir.exists(experiment_1_dir_chip)) dir.create(experiment_1_dir_chip)
if (!dir.exists(experiment_1_dir_gRNA)) dir.create(experiment_1_dir_gRNA)
experiment_2_dir_chip <-  paste0(experiment_2_dir, "chromatin/")
experiment_2_dir_gRNA <- paste0(experiment_2_dir, "gRNA/")
if (!dir.exists(experiment_2_dir_chip)) dir.create(experiment_2_dir_chip)
if (!dir.exists(experiment_2_dir_gRNA)) dir.create(experiment_2_dir_gRNA)
# write function to initialize odms
write_m_list <- function(m_list, chip_counts_odm_fp, chip_counts_metadata_fp, gRNA_counts_odm_fp, gRNA_counts_metadata_fp, files_used_in_exp) {
chip_counts <- m_list$atac_count
gRNA_counts <- m_list$gRNA_count
n_fragments <- m_list$fragment_lib_sizes
# initialize the chip counts odm
chip_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = chip_counts,
barcodes = colnames(chip_counts),
features_df = data.frame(row.names(chip_counts)),
odm_fp = chip_counts_odm_fp)
# modify chip metadata; add n_fragments per cell and file_used_in_exp
feat_ids <- chip_odm |> get_feature_ids()
used_in_exp_bool <- feat_ids %in% files_used_in_exp
chip_odm_mod <- chip_odm |> mutate_cell_covariates(n_fragments = n_fragments$n_fragments,
n_nonzero = NULL, n_umis = NULL)
save_odm(odm = chip_odm_mod, metadata_fp = chip_counts_metadata_fp)
# initialize the gRNA odm
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_counts,
barcodes = colnames(gRNA_counts),
features_df = data.frame(row.names(gRNA_counts)),
odm_fp = gRNA_counts_odm_fp,
metadata_fp = gRNA_counts_metadata_fp)
# add information about target and target_type
gRNA_ids <- gsub(pattern = "non_targeting", replacement = "non-targeting", x = gRNA_odm |> get_feature_ids(), fixed = TRUE)
target <- strsplit(x = gRNA_ids, split = "_", fixed = TRUE) |> sapply(FUN = function(entry) entry[1])
target_type <- ifelse(target %in% c("NT", "non-targeting"), "non-targeting", "gene")
gRNA_odm_mod <- gRNA_odm |> mutate_feature_covariates(target = target, target_type = target_type)
save_odm(odm = gRNA_odm_mod, metadata_fp = gRNA_counts_metadata_fp)
}
# load data for ODM 1, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_1.rds"))
chip_counts_odm_fp <- paste0(experiment_1_dir_chip, "chip_counts.odm")
chip_counts_metadata_fp <- paste0(experiment_1_dir_chip, "metadata.rds")
gRNA_counts_odm_fp <- paste0(experiment_1_dir_gRNA, "gRNA_counts.odm")
gRNA_counts_metadata_fp <- paste0(experiment_1_dir_gRNA, "metadata.rds")
files_used_in_exp <- c("H2AZ.broadPeak", "H3K27Ac.broadPeak", "H3K27me3.broadPeak",
"H3K36me3.broadPeak", "H3K4me1.broadPeak", "H3K4me2.broadPeak",
"H3K4me3.broadPeak", "H3K79me2.broadPeak", "H3K9Ac.broadPeak",
"H3K9me1.broadPeak", "H3K9me3.broadPeak", "H4K20me1.broadPeak")
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp)
# load data for ODM 2, and initialize
m_list <- readRDS(paste0(intermediate_files_dir, "matrix_list_2.rds"))
chip_counts_odm_fp <- paste0(experiment_2_dir_chip, "chip_counts.odm")
chip_counts_metadata_fp <- paste0(experiment_2_dir_chip, "metadata.rds")
gRNA_counts_odm_fp <- paste0(experiment_2_dir_gRNA, "gRNA_counts.odm")
gRNA_counts_metadata_fp <- paste0(experiment_2_dir_gRNA, "metadata.rds")
all_chip_names <- m_list$atac_count |> row.names()
files_used_in_exp_2 <- all_chip_names[!(all_chip_names %in% files_used_in_exp)]
write_m_list(m_list = m_list,
chip_counts_odm_fp = chip_counts_odm_fp,
chip_counts_metadata_fp = chip_counts_metadata_fp,
gRNA_counts_odm_fp = gRNA_counts_odm_fp,
gRNA_counts_metadata_fp = gRNA_counts_metadata_fp,
files_used_in_exp = files_used_in_exp_2)
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# load packages
library(ondisc)
# loop over papers
for (paper in papers) {
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
for (modality in modalities) {
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
# if the modality is NOT gRNA... (if it is, then skip; no feature QC on the gRNA matrix for now)
if (modality != "grna") {
odm_fp <- paste0(modality_dir, "matrix.odm")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
# read the odm
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
highly_exp_feats <- get_highly_expressed_features(odm, frac_expressed = 0.005)
if (nrow(odm) == length(highly_exp_feats)) {
# symbolic link to the current metadata_fp if no subset necessary
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
} else {
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
}
} else {
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
}
}
}
}
285 - 46
(285 - 45)/45
modality
modalities
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
modality_dir
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
metadata_fp
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
modality != "grna"
to_save_metadata_fp
metadata_fp
?R.utils::createLink
odm_sub
to_save_metadata_fp
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
to_save_metadata_fp
metadata_fp
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
metadata_fp
to_save_metadata_fp
metadata_fp
to_save_metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
to_save_metadata_fp
metadata_fp
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp)
to_save_metadata_fp
metadata_fp
# the modality IS gRNA; simply create a symbolic link (no qc)
paste0("ln -s ", metadata_fp, to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
paste("ln -s", metadata_fp, to_save_metadata_fp)
system(R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp))
to_save_metadata_fp
metadata_fp
system(R.utils::createLink(link = to_save_metadata_fp, target = metadata_fp))
# the modality IS gRNA; simply create a symbolic link (no qc)
paste("ln -s", metadata_fp, to_save_metadata_fp)
# the modality IS gRNA; simply create a symbolic link (no qc)
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
# This script performs a lightweight feature QC on all datasets under consideration.
# set directories
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(sceptre2_data_dir)
# load packages
library(ondisc)
for (paper in papers) {
# loop over datasets
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
for (dataset in datasets) {
# loop over modalities
dataset_dir <- paste0(paper_dir, dataset, "/")
modalities <- list.files(dataset_dir)
for (modality in modalities) {
print(paste0("paper: ", paper, ", dataset: ", dataset, ", modality: ", modality))
modality_dir <- paste0(dataset_dir, modality, "/")
metadata_fp <- paste0(modality_dir, "metadata_cell_qc.rds")
if (!file.exists(metadata_fp)) metadata_fp <- paste0(modality_dir, "metadata_orig.rds")
to_save_metadata_fp <- paste0(modality_dir, "metadata_qc.rds")
# if the modality is NOT gRNA... (if it is, then skip; no feature QC on the gRNA matrix for now)
if (modality != "grna") {
odm_fp <- paste0(modality_dir, "matrix.odm")
# read the odm
odm <- read_odm(odm_fp = odm_fp, metadata_fp = metadata_fp)
highly_exp_feats <- get_highly_expressed_features(odm, frac_expressed = 0.005)
if (nrow(odm) == length(highly_exp_feats)) {
# symbolic link to the current metadata_fp if no subset necessary
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
} else {
# create a new metadata_fp if subset necessary
odm_sub <- odm[highly_exp_feats,]
save_odm(odm = odm_sub, metadata_fp = to_save_metadata_fp)
}
} else {
# the modality IS gRNA; simply create a symbolic link (no qc)
system(paste("ln -s", metadata_fp, to_save_metadata_fp))
}
}
}
}
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- paste0("NTC_", seq(1, N_GRNAS))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
rep("non-targeting", N_NTC_GRNAS)
rep("non-targeting", N_NTC_GRNAS)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
ondisc::mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- paste0("NTC_", seq(1, N_GRNAS))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_qc.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
# initialize ODM objects
to_save_fp_gene <- paste0(sceptre2_dir, "data/simulated/experiment_1/gene/matrix.odm")
create_ondisc_matrix_from_R_matrix(r_matrix = gene_expression_mat,
barcodes = colnames(gene_expression_mat),
features_df = data.frame(row.names(gene_expression_mat)),
odm_fp = to_save_fp_gene,
metadata_fp = paste0(sceptre2_dir, "data/simulated/experiment_1/gene/metadata_qc.rds"))
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
gRNA_odm |> get_feature_covariates()
paste0("NTC_", seq(1, N_GRNAS))
paste0("NTC_", seq(1, N_NTC_GRNAS))
gRNA_ids <- rep(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS))
gRNA_ids <- c(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
gRNA_ids
library(ondisc)
set.seed(4)
# Randomly generate data: First, randomly sample gene-specific mean and size parameters from gamma distribution.
# Then, for each gene, randomly sample from an NB distribution.
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# define hyperparameters
N_GENES <- 10000
N_GRNAS <- 35
N_NTC_GRNAS <- 30
N_CELLS <- 20000
# generate cell names, gene names, and gRNA names
cell_barcodes <- paste0("cell_", seq(1, N_CELLS))
gene_ids <- paste0("gene_", seq(1, N_GENES))
gRNA_ids <- c(paste0("NTC_", seq(1, N_NTC_GRNAS)), paste0("GENE_TARGET_", seq(1, N_GRNAS -  N_NTC_GRNAS)))
# create gene expression matrix
mus <- rgamma(n = N_GENES, shape = 1, rate = 2)
thetas <- runif(n = N_GENES, min = 5, max = 30)
gene_expression_mat <- sapply(X = seq(1, N_GENES), FUN = function(i) {
MASS::rnegbin(N_CELLS, mus[i], thetas[i])
}) |> t()
rownames(gene_expression_mat) <- gene_ids
colnames(gene_expression_mat) <- cell_barcodes
# create gRNA expression matrix
gRNA_assignments <- sample(x = seq(1, N_GRNAS), size = N_CELLS, replace = TRUE)
gRNA_expression_mat <- sapply(X = gRNA_assignments, FUN = function(i) {
out <- numeric(length = N_GRNAS)
out[i] <- max(1, rpois(1, 100))
return(out)
})
all(colSums(gRNA_expression_mat >= 1) == 1)
rownames(gRNA_expression_mat) <- gRNA_ids
colnames(gRNA_expression_mat) <- cell_barcodes
# perform quality control on the gene expression matrix
frac_cells_expressed <- rowMeans(gene_expression_mat >= 1)
gene_expression_mat <- gene_expression_mat[frac_cells_expressed > 0.005,]
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
to_save_fp_gRNA <- paste0(sceptre2_dir, "data/simulated/experiment_1/grna/matrix.odm")
gRNA_odm <- create_ondisc_matrix_from_R_matrix(r_matrix = gRNA_expression_mat,
barcodes = colnames(gRNA_expression_mat),
features_df = data.frame(rownames(gRNA_expression_mat)),
odm_fp = to_save_fp_gRNA)
# append target and target type to the gRNA odm
gRNA_odm <- gRNA_odm |>
mutate_feature_covariates(target_type = c(rep("non-targeting", N_NTC_GRNAS), rep("gene", N_GRNAS - N_NTC_GRNAS)),
target = c(rep("non-targeting", N_NTC_GRNAS), rep("gene_1", N_GRNAS - N_NTC_GRNAS)))
gRNA_odm |> get_feature_covariates()
