covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs)
dir_to_save <- paste0(papalexi_dir)
file_to_save <- paste0(dir_to_save, "r_objects.rds")
saveRDS(object = l, file = file_to_save)
l <- readRDS(ifn_gamma_objects)
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
ifn_gamma_objects <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/r_objects.rds")
papalexi_objects <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
l <- readRDS(ifn_gamma_objects)
response_grna_group_pairs <- l$response_grna_group_pairs |> dplyr::sample_n(500)
response_grna_group_pairs
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
ifn_gamma_objects <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/r_objects.rds")
papalexi_objects <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
l <- readRDS(ifn_gamma_objects)
response_grna_group_pairs <- l$response_grna_group_pairs |> dplyr::sample_n(500)
head(response_grna_group_pairs)
ifn_gamma_calibration_res <- sceptre::run_sceptre_lowmoi(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
covariate_data_frame = l$covariate_data_frame,
grna_group_data_frame = l$grna_group_data_frame,
formula_object = l$formula_object,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = TRUE)
head(response_grna_group_pairs)
tail(response_grna_group_pairs)
head(response_grna_group_pairs)
args <- commandArgs()
args <- commandArgs()
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
dataset <- args[1]
analysis_type <- args[2]
dataset <- "papalexi"
analysis_type <- "calibration"
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/r_objects.rds")
}
l <- readRDS(ifn_gamma_objects)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/r_objects.rds")
}
l <- readRDS(objects_fp)
set.seed(4)
response_grna_group_pairs <- l$response_grna_group_pairs |> dplyr::sample_n(2000)
gc()
gc(verbose = FALSE)
gc(verbose = TRUE)
gc() |> invisible()
if (TRUE) {
set.seed(4)
response_grna_group_pairs <- l$response_grna_group_pairs |> dplyr::sample_n(2000)
}
LOCAL_SCEPTRE2_DATA_DIR
calibration_check <- analysis_type == "calibration"
calibration_check
calibration_check
LOCAL_SCEPTRE2_DATA_DIR
LOCAL_SCEPTRE2_DATA_DIR
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/")
paste0(dataset, "_", calibration_check, "_res.rds")
paste0(dataset, "_", analysis_type, "_res.rds")
f_name <- paste0(dataset, "_", analysis_type, "_res.rds")
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/")
paste0(result_dir, f_name)
saveRDS(object = res, file = paste0(result_dir, f_name))
ls
dataset <- "papalexi"
analysis_type <- "calibration"
library(sceptre)
library(Matrix)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
if (dataset == "papalexi") {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/papalexi/eccite_screen/r_objects.rds")
} else {
objects_fp <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/r_objects.rds")
}
calibration_check <- analysis_type == "calibration"
l <- readRDS(objects_fp)
gc() |> invisible()
if (TRUE) {
set.seed(4)
response_grna_group_pairs <- l$response_grna_group_pairs |> dplyr::sample_n(200)
}
res <- run_sceptre_lowmoi(response_matrix = l$response_matrix,
grna_matrix = l$grna_matrix,
covariate_data_frame = l$covariate_data_frame,
grna_group_data_frame = l$grna_group_data_frame,
formula_object = l$formula_object,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = calibration_check)
rm(l$response_matrix); gc() |> invisible()
gc() |> invisible()
f_name <- paste0(dataset, "_", analysis_type, "_res.rds")
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/discovery_analyses/")
saveRDS(object = res, file = paste0(result_dir, f_name))
paste0(result_dir, f_name)
# load libraries and resolve conflicts
library(ondisc)
library(sceptre)
library(readr)
library(dplyr)
library(conflicted)
conflicted::conflicts_prefer(dplyr::filter)
# set up directories
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCHRAIVOGEL_DATA_DIR <-.get_config_path("LOCAL_SCHRAIVOGEL_2020_DATA_DIR")
schraivogel_chr8_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR,
"data/schraivogel/enhancer_screen_chr8/")
schraivogel_chr8_dir
# gene info
gene_odm_fp <- paste0(schraivogel_chr8_dir, "gene/matrix.odm")
gene_metadata_fp <- paste0(schraivogel_chr8_dir, "gene/metadata_qc.rds")
gene_odm <- read_odm(odm_fp = gene_odm_fp, metadata_fp = gene_metadata_fp)
gene_covariate_matrix <- gene_odm |> get_cell_covariates()
gene_expression_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(gene_expression_matrix) <- get_feature_ids(gene_odm)
gene_expression_matrix[1:5,1:5]
# grna info
grna_odm_fp <- paste0(schraivogel_chr8_dir, "grna_expression/matrix.odm")
grna_metadata_fp <- paste0(schraivogel_chr8_dir, "grna_expression/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
grna_groups <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
head(grna_groups)
# get Schraivogel results for chromosome 8 pairs
replace_periods <- function(str){
stringr::str_replace(stringr::str_replace(str, "[.]", ":"), "[.]", "-")
}
add_suffixes <- function(str){
ifelse(str %in% c("CCNE2", "CPQ", "DSCC1", "FAM83A", "LRRCC1",
"OXR1", "PHF20L1", "RIPK2", "STK3", "UBR5"),
paste0(str, "-TSS"),
ifelse(str %in% c("GATA1", "HS2", "MYC", "ZFPM2"),
paste0(str, "-enh"),
str))
}
schraivogel_results_fp <- paste0(LOCAL_SCHRAIVOGEL_DATA_DIR,
"raw/ftp/diff_expr_screen_nGenesCovar.csv")
schraivogel_results <- read_csv(schraivogel_results_fp) |>
filter(sample == "8iScreen1",
gene %in% get_feature_ids(gene_odm)) |> # genes that passed our QC
mutate(grna_group = add_suffixes(replace_periods(perturbation))) |>
rename(response_id = gene) |>
select(response_id, grna_group, pvalue, logFC)
# set arguments for SCEPTRE
response_matrix <- gene_expression_matrix
grna_matrix <- grna_matrix
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
covariate_data_frame <- gene_covariate_matrix
grna_group_data_frame <- grna_groups
formula_object <- ~log(n_umis) + log(n_nonzero) + batch
calibration_check <- FALSE
response_grna_group_pairs <- schraivogel_results |> select(response_id, grna_group)
response_matrix[1:5,1:5]
grna_matrix[1:5,1:5]
head(covariate_data_frame)
head(grna_group_data_frame)
formula_object
heaD(response_grna_group_pairs)
head(response_grna_group_pairs)
calibration_check
# run SCEPTRE
result_sceptre <- run_sceptre_lowmoi(
response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = formula_object,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = calibration_check
)
head(result_sceptre)
tail(result_sceptre)
head(result_sceptre, 40)
response_matrix = response_matrix
grna_matrix = grna_matrix
covariate_data_frame = covariate_data_frame
grna_group_data_frame = grna_group_data_frame
formula_object = formula_object
response_grna_group_pairs = response_grna_group_pairs
calibration_check = calibration_check
n_nonzero_trt_thresh = 7L
n_nonzero_cntrl_thresh = 7L; return_debugging_metrics = FALSE
return_resampling_dist = FALSE; fit_skew_normal = TRUE
calibration_group_size = NULL; n_calibration_pairs = NULL
test_stat = "full"; B1 = 499L; B2 = 4999L; B3 = 24999L
print_progress = TRUE
###############
# PART 1: SETUP
###############
cat("Running setup. ")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
load_all("~/research_code/sceptre/")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
# 2. harmonize arguments (called for side-effect)
harmonize_arguments(return_resampling_dist, fit_skew_normal, test_stat) |> invisible()
# 3. cast and transpose response matrix; cast grna matrix
response_matrix <- set_matrix_accessibility(response_matrix, TRUE)
# 4. convert the cell covariate data frame into a design matrix
covariate_matrix <- convert_covariate_df_to_design_matrix(covariate_data_frame, formula_object)
rm(covariate_data_frame)
# 5. assign the gRNAs to cells
grna_assignments <- assign_grnas_to_cells_lowmoi_v2(grna_matrix, grna_group_data_frame, calibration_check, n_calibration_pairs)
rm(grna_matrix)
cat(crayon::green(' \u2713\n'))
head(grna_assignments)
9
10
nrow(covariate_matrix)
rm(grna_matrix)
cat(crayon::green(' \u2713\n'))
gc()
calibration_check
# 6. construct the undercover response_grna_group_pairs
if (calibration_check) {
cat("Constructing negative control pairs.")
if (is.null(calibration_group_size)) calibration_group_size <- compute_calibration_group_size(grna_group_data_frame)
response_grna_group_pairs <- construct_negative_control_pairs(n_calibration_pairs, calibration_group_size, grna_assignments, response_matrix, n_nonzero_trt_thresh, n_nonzero_cntrl_thresh, grna_group_data_frame, response_grna_group_pairs)
cat(crayon::green(' \u2713\n'))
}
# 7. generate the set of synthetic indicator idxs
cat("Generating permutation resamples.")
synthetic_idxs <- get_synthetic_idxs_lowmoi(grna_assignments, B1 + B2 + B3, calibration_check, calibration_group_size)
cat(crayon::green(' \u2713\n'))
gc() |> invisible()
####################
# PART 2: RUN METHOD
####################
cat("Running differential expression analyses.\n")
response_matrix[1:5,1:5]
nrow(response_matrix)
ncol(response_matrix)
grna_assignments$grna_group_idxs[[1]]
grna_assignments$all_nt_idxs |> length()
grna_assignments$grna_group_idxs |> length()
# 0. preliminary setup; initialize the args_to_pass, set the low_level_association_funct
result_list_outer <- vector(mode = "list", length = 2 * length(unique(response_grna_group_pairs$response_id)))
out_counter <- 1L
args_to_pass <- list(synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
if (calibration_check) {
args_to_pass$indiv_nt_grna_idxs <- grna_assignments$indiv_nt_grna_idxs
} else {
args_to_pass$grna_group_idxs <- grna_assignments$grna_group_idxs
args_to_pass$covariate_matrix <- covariate_matrix
}
low_level_association_funct <- if (!calibration_check & full_test_stat) {
"lowmoi_full_stat_discovery"
} else if (!calibration_check & !full_test_stat) {
"lowmoi_distilled_stat_discovery"
} else if (calibration_check & full_test_stat) {
"lowmoi_full_stat_undercover"
} else {
"lowmoi_distilled_stat_undercover"
}
# 1. obtain the subset of the covariate matrix corresponding to the NT cells and n_cells
covariate_matrix_nt <- covariate_matrix[grna_assignments$all_nt_idxs,]
n_cells <- ncol(response_matrix)
# 2. loop over the response IDs
response_ids <- unique(response_grna_group_pairs$response_id)
response_ids
response_idx <-
1
if ((response_idx == 1 || response_idx %% 5 == 0) && print_progress) {
cat(paste0("Analyzing pairs containing response ", as.character(response_ids[response_idx]), " (", response_idx, " of ", length(response_ids), ")\n"))
}
if (response_idx %% 200 == 0) gc() |> invisible()
response_id <- as.character(response_ids[response_idx])
# 3. load the expressions of the current response
expression_vector <- load_csr_row(j = response_matrix@j,
p = response_matrix@p,
x = response_matrix@x,
row_idx = which(rownames(response_matrix) == response_id),
n_cells = n_cells)
expression_vector_nt <- expression_vector[grna_assignments$all_nt_idxs]
# 4. obtain the gRNA groups to analyze
l <- response_grna_group_pairs$response_id == response_id
curr_df <- response_grna_group_pairs[l,]
# 5. if running a discovery analysis, do QC
if (!calibration_check) {
n_nonzero_cntrl_curr <- sum(expression_vector_nt >= 1)
grna_group_posits <- match(x = curr_df$grna_group, table = names(grna_assignments$grna_group_idxs))
n_nonzero_trt_curr <- compute_n_nonzero_trt_vector(expression_vector = expression_vector,
grna_group_idxs = grna_assignments$grna_group_idxs,
grna_group_posits = grna_group_posits)
curr_df$n_nonzero_trt <- n_nonzero_trt_curr
curr_df$n_nonzero_cntrl <- n_nonzero_cntrl_curr
pass_qc <- n_nonzero_trt_curr >= n_nonzero_trt_thresh
# i. if n_nonzero_cntrl_curr is less than n_nonzero_cntrl_thresh, jump to next iteration
if (n_nonzero_cntrl_curr < n_nonzero_cntrl_thresh || !any(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df
out_counter <- out_counter + 1L
next
}
# ii. remove any rows that have not passed qc; keep the rows that have passed qc
if (!all(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df[!pass_qc,]
out_counter <- out_counter + 1L
}
curr_df <- curr_df[pass_qc,]
}
# 6. perform the expression on technical factor regression
response_precomp <- perform_response_precomputation(expressions = expression_vector_nt,
covariate_matrix = covariate_matrix_nt)
# 7. obtain precomputation peices for NT cells
pieces_precomp <- compute_precomputation_pieces(expression_vector_nt,
covariate_matrix_nt,
response_precomp$fitted_coefs,
response_precomp$theta,
full_test_stat)
# 8. update the args to pass with grna_groups, expression_vector, response_precomp, pieces_precomp
args_to_pass$grna_groups <- as.character(curr_df$grna_group)
args_to_pass$pieces_precomp <- pieces_precomp
args_to_pass$expression_vector_nt <- expression_vector_nt
if (!calibration_check) {
args_to_pass$expression_vector <- expression_vector
args_to_pass$response_precomp <- response_precomp
}
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
length(curr_response_result)
curr_response_result[[1]]$p
curr_response_result[[1]]$z_orig
curr_response_result[[1]]$lfc
curr_response_result[[1]]$sn_fit_used
curr_response_result[[1]]$round
head(result_sceptre)
head(result_sceptre, 5)
head(result_sceptre, 10)
head(result_sceptre, 50)
head(result_sceptre, 100)
curr_response_result |> length()
lapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p) |> hist()
sapply(curr_response_result, function(l) l$p) == 0
any(sapply(curr_response_result, function(l) l$p) == 0)
head(response_grna_group_pairs)
head(result_sceptre)
1e50
1e-50
which(response_ids == "chr8:101450301-101450732")
which(response_ids == "TATDN1")
response_idx <- 62
if ((response_idx == 1 || response_idx %% 5 == 0) && print_progress) {
cat(paste0("Analyzing pairs containing response ", as.character(response_ids[response_idx]), " (", response_idx, " of ", length(response_ids), ")\n"))
}
if (response_idx %% 200 == 0) gc() |> invisible()
response_id <- as.character(response_ids[response_idx])
# 3. load the expressions of the current response
expression_vector <- load_csr_row(j = response_matrix@j,
p = response_matrix@p,
x = response_matrix@x,
row_idx = which(rownames(response_matrix) == response_id),
n_cells = n_cells)
head(expression_vector)
hist(expression_vector)
sum(expression_vector)
expression_vector_nt <- expression_vector[grna_assignments$all_nt_idxs]
# 4. obtain the gRNA groups to analyze
l <- response_grna_group_pairs$response_id == response_id
curr_df <- response_grna_group_pairs[l,]
!calibration_check
# 5. if running a discovery analysis, do QC
if (!calibration_check) {
n_nonzero_cntrl_curr <- sum(expression_vector_nt >= 1)
grna_group_posits <- match(x = curr_df$grna_group, table = names(grna_assignments$grna_group_idxs))
n_nonzero_trt_curr <- compute_n_nonzero_trt_vector(expression_vector = expression_vector,
grna_group_idxs = grna_assignments$grna_group_idxs,
grna_group_posits = grna_group_posits)
curr_df$n_nonzero_trt <- n_nonzero_trt_curr
curr_df$n_nonzero_cntrl <- n_nonzero_cntrl_curr
pass_qc <- n_nonzero_trt_curr >= n_nonzero_trt_thresh
# i. if n_nonzero_cntrl_curr is less than n_nonzero_cntrl_thresh, jump to next iteration
if (n_nonzero_cntrl_curr < n_nonzero_cntrl_thresh || !any(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df
out_counter <- out_counter + 1L
next
}
# ii. remove any rows that have not passed qc; keep the rows that have passed qc
if (!all(pass_qc)) {
result_list_outer[[out_counter]] <- curr_df[!pass_qc,]
out_counter <- out_counter + 1L
}
curr_df <- curr_df[pass_qc,]
}
head(expression_vector_nt)
length(expression_vector_nt)
sum(expression_vector_nt >= 1)
nrow(covariate_matrix)
nrow(covariate_matrix_nt)
# 6. perform the expression on technical factor regression
response_precomp <- perform_response_precomputation(expressions = expression_vector_nt,
covariate_matrix = covariate_matrix_nt)
response_precomp
# 7. obtain precomputation peices for NT cells
pieces_precomp <- compute_precomputation_pieces(expression_vector_nt,
covariate_matrix_nt,
response_precomp$fitted_coefs,
response_precomp$theta,
full_test_stat)
pieces_precomp[[1]]
pieces_precomp[[2]]
# 8. update the args to pass with grna_groups, expression_vector, response_precomp, pieces_precomp
args_to_pass$grna_groups <- as.character(curr_df$grna_group)
args_to_pass$pieces_precomp <- pieces_precomp
args_to_pass$expression_vector_nt <- expression_vector_nt
if (!calibration_check) {
args_to_pass$expression_vector <- expression_vector
args_to_pass$response_precomp <- response_precomp
}
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
curr_response_result[[1]]$p
curr_response_result[[2]]$p
lapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p)
sapply(curr_response_result, function(l) l$p) == 0
which(sapply(curr_response_result, function(l) l$p) == 0)
low_level_association_funct
args_to_pass$pieces_precomp$mu |> head()
low_level_association_funct
names(args_to_pass)
curr_response_result |> length()
which(sapply(curr_response_result, function(l) l$p) == 0)
synthetic_idxs
B1
B2
B3
fit_skew_normal
return_resampling_dist
indiv_nt_grna_idxs |> length()
grna_groups <- args_to_pass$grna_groups
expression_vector_nt |> head()
head(expression_vector)
response_precomp$precomp_str
result_list_inner <- vector(mode = "list", length = length(grna_groups))
seq_along(grna_groups)
i <- 35
grna_group <- grna_groups[i]
grna_group
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
grna_group <- grna_groups[i]
grna_group_idxs <- args_to_pass$grna_group_idxs
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
expression_vector_trt
head(covariate_matrix_trt)
# 1. compute the pieces
pieces_trt <- compute_precomputation_pieces(expression_vector_trt, covariate_matrix_trt, response_precomp$fitted_coefs, response_precomp$theta, FALSE)
grna_group <- grna_groups[i]
expression_vector_trt <- expression_vector[grna_group_idxs[[grna_group]]]
covariate_matrix_trt <- covariate_matrix[grna_group_idxs[[grna_group]],]
# 1. compute the precomputation pieces for the treatment cells
pieces_trt <- compute_precomputation_pieces(expression_vector_trt, covariate_matrix_trt, response_precomp$fitted_coefs, response_precomp$theta, TRUE)
pieces_trt$mu |> head()
pieces_trt$wZ[1:5,1:5]
# 2. compute the shared weighted covariate matrix
Zt_wZ <- pieces_trt$Zt_wZ + pieces_precomp$Zt_wZ
# 3. compute the D matrix
D <- compute_D_matrix(Zt_wZ = Zt_wZ, wZ = rbind(pieces_precomp$wZ, pieces_trt$wZ))
# 4. create the combined mu, y, and a vectors
y <- c(expression_vector_nt, expression_vector_trt)
mu <- c(pieces_precomp$mu, pieces_trt$mu)
a <- c(pieces_precomp$a, pieces_trt$a)
w <- c(pieces_precomp$w, pieces_trt$w)
# 5. call low-level estimation and testing function
n_cntrl <- length(expression_vector_nt)
n_trt <- length(expression_vector_trt)
result <- run_low_level_test_full_v2(y = y,
mu = mu,
a = a,
w = w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result
head(y)
tail(y)
head(expression_vector_nt)
head(expression_vector_trt)
mean(expression_vector_nt)
mean(expression_vector_trt)
mu <- c(pieces_precomp$mu, pieces_trt$mu)
mean(pieces_precomp$mu)
mean(pieces_trt$mu)
load_all()
