filter(Method == "KS test", dataset == "papalexi_eccite_screen_gene") |>
mutate(bio_rep = "With bio. rep")
undercover_res_without_biorep <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_extras_0523_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF, n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
filter(Method == "KS test", dataset == "papalexi_eccite_screen_gene") |>
mutate(bio_rep = "Without bio. rep")
res <- rbind(undercover_res_with_biorep, undercover_res_without_biorep)
head(res)
head(res)
head(res)
p <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p2
p1
p2
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p1 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p1
p2
plot_grid(p1, p2)
p1 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p1
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = c("purple", "purple4"))
p2
p2
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4"))
p2
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank())
p2
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(), legend.position = c(0.8, 0.2))
p2
plot_grid(p1, p2)
p <- plot_grid(p1, p2)
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = , plot = p, device = "png", scale = 1, width = 6, height = 3, dpi = 330)
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 3, dpi = 330)
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(),
legend.position = c(0.8, 0.2),
legend.text=element_text(size = 8.0),
legend.margin=margin(t = 0, unit='cm'),
legend.background = element_blank())
p <- plot_grid(p1, p2)
p
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 3, dpi = 330)
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(),
legend.position = c(0.75, 0.2),
legend.text=element_text(size = 8.0),
legend.margin=margin(t = 0, unit='cm'),
legend.background = element_blank())
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(),
legend.position = c(0.75, 0.2),
legend.text=element_text(size = 8.0),
legend.margin=margin(t = -.5, unit='cm'),
legend.background = element_blank())
p <- plot_grid(p1, p2)
p
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(),
legend.position = c(0.75, 0.2),
legend.text=element_text(size = 8.0),
legend.margin=margin(t = 0, unit='cm'),
legend.background = element_blank()) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch",
override.aes = list(size = 2.5)))
p2
p <- plot_grid(p1, p2)
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
p2 <- ggplot(data = res, mapping = aes(y = p_value, col = bio_rep)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
scale_y_continuous(trans = revlog_trans(10), breaks = c(1, 1e-2, 1e-4)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme +
scale_color_manual(values = c("purple", "purple4")) +
theme(legend.title = element_blank(),
legend.position = c(0.75, 0.1),
legend.text=element_text(size = 8.0),
legend.margin=margin(t = 0, unit='cm'),
legend.background = element_blank()) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch",
override.aes = list(size = 2.5)))
p <- plot_grid(p1, p2)
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
p <- plot_grid(p1, p2, labels = "auto")
p
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = p, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
library(lowmoi)
lowmoi::sceptre
# load packages
library(tidyverse)
library(ondisc)
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_0523_processed.rds")) |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
conflicts_prefer(dplyr::filter)
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# set the result and data directories; load PC and undercover results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_0523_processed.rds")) |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
# load packages
library(tidyverse)
library(ondisc)
conflicts_prefer(dplyr::filter)
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# set the result and data directories; load PC and undercover results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
# load packages
library(tidyverse)
library(ondisc)
conflicts_prefer(dplyr::filter)
# load the shared figure script
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# set the result and data directories; load PC and undercover results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_0124_processed.rds")) |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
# first, the number of negative control pairs
undercover_res |>
filter(method == "seurat_de") |>
group_by(dataset) |>
summarize(count = n())
# next, the number of positive control pairs
pc_res |>
filter(method == "seurat_de") |>
group_by(dataset) |>
summarize(count = n())
# loop over datasets, computing sample size information
papers <- c("frangieh",  "papalexi", "schraivogel", "simulated")
df <- lapply(papers, function(paper) {
print(paste0("paper: ", paper))
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
lapply(X = datasets, FUN = function(dataset) {
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
grna_modality <- mm_odm |> get_modality("grna_assignment")
# get gRNA info
grna_info <- grna_modality |> get_feature_covariates()
n_nt_grnas <- grna_info |> filter(target_type == "non-targeting") |> nrow()
n_targeting_grnas <- nrow(grna_info) - n_nt_grnas
n_targeted_sites <- grna_info |> filter(target_type != "non-targeting") |> pull(target) |> unique() |> length()
n_cells <- ncol(grna_modality)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
# loop over remaining modalitites
lapply(remaining_modalities, function(remaining_modality) {
response_modality <- mm_odm |> get_modality(remaining_modality)
# get response info
n_responses <- nrow(response_modality)
data.frame(n_responses = n_responses,
n_cells = n_cells,
n_targeting_grnas = n_targeting_grnas,
n_targeted_sites = n_targeted_sites,
n_nt_grnas = n_nt_grnas,
paper_fp = paper_fp,
modality = remaining_modality)
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
}) |> data.table::rbindlist()
df[c(1,3,5,7,8,9,10,13),]
# simulation study # 2: comparing score statistic to mean over residuals statistic
# NB regression model with two covariates over draws, randomly vary (1) size parameter
# and (2) treatment coefficient (null vs. alternative).
args <- commandArgs(trailingOnly = TRUE)
library(camp)
# Github
github_packs <- c("katsevich-lab/lowmoi",
"timothy-barry/sceptre2",
"timothy-barry/ondisc@5adcc53", # install commit 5adcc53 (i.e, version 1.1.0)
"timothy-barry/camp@b1996c7",
"katsevich-lab/katlabutils",
"satijalab/seurat-data")
pack <- "timothy-barry/camp@b1996c7"
p_install_gh(pack)
library(pacman)
p_install_gh(pack)
library(camp)
source("~/.Rprofile")
library(camp)
library(tidyverse)
library(rlecuyer)
n_outer_rep <- 500
library(rlecuyer)
library(camp)
library(tidyverse)
n_outer_rep <- 500
proc_id <- as.integer(args[1])
proc_id <- 1L
proc_id
# seed setting
.lec.SetPackageSeed(4) |> invisible()
snames <- as.character(seq(1, n_outer_rep))
.lec.CreateStream(snames) |> invisible()
.lec.CurrentStream(snames[proc_id]) |> invisible()
# define the parameters that control the simulation
gamma <- c(-0.6, 0.8, 0.9)
n_rep <- 500
n_cells <- 5000
mu_z <- c(0.0, 0.0)
rho <- 0.5
frac_null <- 0.9
# generate the covariate matrix
z <- cbind(1, MASS::mvrnorm(n = n_cells,
mu = c(0.0, 0.0),
Sigma = toeplitz(c(1, rho))))
mu_x <- as.numeric(binomial()$linkinv(z %*% gamma))
x <- rbinom(n = n_cells, size = 1, prob = mu_x)
covariate_matrix <- cbind(z, x)
colnames(covariate_matrix) <- c("intercept", "z1", "z2", "x")
covariate_matrix_intercept_free <- covariate_matrix[,-1]
covariate_matrix_intercept_free_x_free <- covariate_matrix[,c(-1, -4)]
# generate permutation idxs
permutations <- permute_bernoulli_treatment_vector(x)
# generate results matrix
colnames <- c("p_resid", "p_score", "p_lrt", "null_true", "resid_time", "score_time", "lrt_time")
m <- as.data.frame(matrix(nrow = n_rep, ncol = 7))
colnames(m) <- colnames
# sample the runs under the alternative hypothesis
null_idxs <- sample(seq(1, n_rep), size = frac_null * n_rep) |> sort()
for (i in seq(1, n_rep)) {
if (i %% 5 == 0) print(i)
theta <- runif(1, 0.1, 5)
null_true <- i %in% null_idxs
beta <- c(0.9, 0.1, 0.3, if (null_true) 0.0 else 0.1)
family_object <- MASS::negative.binomial(theta = theta)
y <- generate_glm_data(
design_matrix = covariate_matrix,
coefficients = beta,
family_object = family_object,
add_intercept = FALSE
)
# fit the reduced GLM
glm_fit_time <- system.time(
fit_reduced <- glm(
y ~ covariate_matrix_intercept_free_x_free,
family = family_object,
)
)[["elapsed"]]
# run residual precomputation and compute residual p-value
resid_time <- system.time({
precomputation_residual <- run_resid_precomputation(fit_reduced)
p_resid <- run_perm_test_resid_stat_binary_trt(permutations, precomputation_residual)$p
})[["elapsed"]]
# run score precomputation and comptue score p-value
score_time <- system.time({
precomputation_score <- run_score_stat_precomputation(fit_reduced)
p_score <- run_perm_test_score_stat_binary_trt(permutations, precomputation_score)$p
})[["elapsed"]]
# compute a standard GLM Wald p-value
lrt_time <- system.time({
fit_full <- glm(
y ~ covariate_matrix_intercept_free,
family = family_object,
)
lrt_test <- anova(fit_reduced, fit_full, test = "Chisq")
p_lrt <- lrt_test$`Pr(>Chi)`[2]
})[["elapsed"]]
m[i,] <- c(p_resid = p_resid,
p_score = p_score,
p_lrt = p_lrt,
null_true = null_true,
resid_time = glm_fit_time + resid_time,
score_time = glm_fit_time + score_time,
lrt_time = glm_fit_time + lrt_time)
}
library(statmod)
library(camp)
library(dplyr)
library(tidyr)
set.seed(4)
# define variables describing experiment
prob_perts <- c(0.001, 0.01, 0.05, 0.1, 0.5)
n_rep_per_setting <- 50
n_trt_vect <- 1000
n <- 100000
family_object <- MASS::negative.binomial(5)
# sapply over prob_perts
res <- sapply(prob_perts, function(prob_pert) {
# generate the treatment idxs
m <- matrix(data = rbinom(n_trt_vect * n, size = 1, prob_pert),
nrow = n, ncol = n_trt_vect)
trt_idxs <- apply(X = m, MARGIN = 2, FUN = function(col) which(col == 1) - 1L)
# iterate over reps per setting
out <- sapply(seq(1, n_rep_per_setting), FUN = function(rep_id) {
z <- MASS::mvrnorm(n = n, mu = c(-0.5, 0.5), Sigma = toeplitz(c(1, 0.5)))
y <- generate_glm_data(
design_matrix = z,
coefficients = c(0.6, 0.1, 0.3),
family_object = family_object,
add_intercept = TRUE
)
# fit the model
fit <- glm(
y ~ z, family = family_object
)
# compute the z-scores using eigen decomp
eigen_time <- system.time({
precomputation_score <- run_score_stat_precomputation(fit)
for (i in seq(1, n_trt_vect)) {
z_eigen <- camp:::compute_observed_full_statistic(a = precomputation_score$a,
w = precomputation_score$w,
D = precomputation_score$D,
s = length(trt_idxs[[i]]),
trt_idxs = trt_idxs[[i]])
}
})
# compute the z-scores using statmod
statmod_time <- system.time({
statmod_z <- statmod::glm.scoretest(fit = fit, x2 = m, dispersion = 1)
})
# output results
c(statmod_time = statmod_time[["elapsed"]],
eigen_time = eigen_time[["elapsed"]],
prob_pert = prob_pert,
rep_id = rep_id)
}) |> t() |> as.data.frame()
}, simplify = FALSE)
library(statmod)
library(camp)
library(dplyr)
library(tidyr)
set.seed(4)
# define variables describing experiment
prob_perts <- c(0.001, 0.01, 0.05, 0.1, 0.5)
n_rep_per_setting <- 50
n_trt_vect <- 1000
n <- 100000
family_object <- MASS::negative.binomial(5)
prob_pert <- prob_perts[1]
prob_pert
# generate the treatment idxs
m <- matrix(data = rbinom(n_trt_vect * n, size = 1, prob_pert),
nrow = n, ncol = n_trt_vect)
trt_idxs <- apply(X = m, MARGIN = 2, FUN = function(col) which(col == 1) - 1L)
rep_id <- 1
z <- MASS::mvrnorm(n = n, mu = c(-0.5, 0.5), Sigma = toeplitz(c(1, 0.5)))
y <- generate_glm_data(
design_matrix = z,
coefficients = c(0.6, 0.1, 0.3),
family_object = family_object,
add_intercept = TRUE
)
# fit the model
fit <- glm(
y ~ z, family = family_object
)
# fit the model
fit <- glm(y ~ z, family = family_object)
# compute the z-scores using eigen decomp
eigen_time <- system.time({
precomputation_score <- run_score_stat_precomputation(fit)
for (i in seq(1, n_trt_vect)) {
z_eigen <- camp:::compute_observed_full_statistic(a = precomputation_score$a,
w = precomputation_score$w,
D = precomputation_score$D,
s = length(trt_idxs[[i]]),
trt_idxs = trt_idxs[[i]])
}
})
# compute the z-scores using statmod
statmod_time <- system.time({
statmod_z <- statmod::glm.scoretest(fit = fit, x2 = m, dispersion = 1)
})
document()
github_packs <- c("katsevich-lab/lowmoi",
"timothy-barry/sceptre2",
"timothy-barry/ondisc@5adcc53", # install commit 5adcc53 (i.e, version 1.1.0)
"timothy-barry/camp@b1996c7",
"katsevich-lab/katlabutils",
"satijalab/seurat-data")
pack <- github_packs[4]
p_install_gh(pack)
# Github
github_packs <- c("katsevich-lab/lowmoi",
"timothy-barry/sceptre2",
"timothy-barry/ondisc@5adcc53", # install commit 5adcc53 (i.e, version 1.1.0)
"timothy-barry/camp@398dd2e",
"katsevich-lab/katlabutils",
"satijalab/seurat-data")
pack <- github_packs[4]
p_install_gh(pack)
camp:::compute_observed_full_statistic
