# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
shared_fig_script
source(shared_fig_script)
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
result_dir
extra_analyses_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
extra_analyses_dir
extra_analyses_dir
extra_analyses_dir
source("~/research_code/sceptre2-manuscript/R_scripts/figure_creation/fig_s1/fig_s1.R")
readRDS(paste0(extra_analyses_dir, "papalexi_grna_confounding_tests.rds"))
grna_res <- readRDS(paste0(extra_analyses_dir, "papalexi_grna_confounding_tests.rds"))
gene_res <- readRDS(paste0(extra_analyses_dir, "papalex_gene_confounding_tests.rds"))
head(gene_res)
tail(gene_res)
data.frame(p_value = grna_res)
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black")
p1
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme
p1
ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme
p2 <- ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme
p2
p1
p1
p2
p1
p2
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
p_out
p1
p2
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
p_out
.get_config_path("LOCAL_CODE_DIR")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/r_output.png")
ggsave(filename = , plot = p_out, device = "png", scale = 1, width = 6, height = 4, dpi = 330)
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1, width = 6, height = 4, dpi = 330)
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme
p2 <- ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/r_output.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1, width = 6, height = 3, dpi = 330)
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("Hai")
p1
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("gRNA presence/absence")
p2 <- ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("Gene expression")
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/r_output.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
p_out
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/r_output.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1, width = 6, height = 2.5, dpi = 330)
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 6, height = 2.5, dpi = 330)
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 4, height = 2, dpi = 330)
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 6, height = 2.5, dpi = 330)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
dataset <- datasets[1]
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
gene_id
gene_id <- gene_ids[1]
gene_id
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
head(expression)
length(expression)
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
mean(expression >= 3)
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
head(thetas)
tail(thetas)
tail(thetas, 100)
head(thetas, 100)
head(thetas, 200)
thetas[200:205]
thetas[200:300]
print(gene_id)
curr_theta <- thetas[[gene_id]]
curr_theta
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
head(fit_ps)
tail(fit_ps)
head(fit_ps, 50)
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
head(res)
nrow(res)
head(res, 1000)
res_na_omit <- res |> na.omit()
head(res_na_omit)
res_na_omit
res_na_omit |> filter(dataset == "papalexi/eccite_screen")
res_na_omit |> filter(dataset == "papalexi/eccite_screen") |> pull(p)
gof <- res_na_omit |> filter(dataset == "papalexi/eccite_screen") |> pull(p)
hist(gof)
sceptre:::make_qq_plot(gof)
res_na_omit
res_na_omit |> filter(dataset == "frangieh/ifn_gamma")
res_na_omit |> filter(dataset == "frangieh/ifn_gamma") |> pull(p)
gof_p <- res_na_omit |> filter(dataset == "frangieh/ifn_gamma") |> pull(p)
hist(gof_p)
hist(gof_p)
ggplot(data = data.frame(p_value = gof),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("Gene expression")
ggplot(data = data.frame(p_value = gof),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle("Gene expression")
saveRDS(object = res_na_omit,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
extra_analyses_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
grna_res <- readRDS(paste0(extra_analyses_dir, "papalexi_grna_confounding_tests.rds"))
gene_res <- readRDS(paste0(extra_analyses_dir, "papalex_gene_confounding_tests.rds"))
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("gRNA presence/absence")
p2 <- ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("Gene expression")
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s5/fig_s6.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 6, height = 2.5, dpi = 330)
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s6/fig_s6.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 6, height = 2.5, dpi = 330)
