labs(y = expression(paste("Asymptotic ", italic("p"), " / exact ", italic("p"))),
x = "KS statistic") +
geom_hline(yintercept = 1) +
my_theme +
theme(legend.position = c(0.1, 0.72),
legend.key.size = unit(0.4, 'cm'),
legend.title = element_blank()) +
annotate("text", x = 0.35, y = 0.7, label = "Log(N treatment cells with expression + 1)") +
scale_color_continuous(name = "Log(N treatment cells + 1)") +
ggtitle("Inflation of MW p-values")
fig <- cowplot::plot_grid(p_a, p_b,
p_c, p_d,
NULL, NULL, ncol = 2, labels = "auto", align = "h", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_2/r_output.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 7, dpi = 330)
# set colors (not loaded by)
bio_rep_cols <- c("R1" = "darkred", "R2" = "darkblue", "R3" = "darkgreen")
bio_rep_fills <-  c("R1" = "lightcoral", "R2" = "cornflowerblue", "R3" = "palegreen3")
dataset_cols <- c("frangieh_ifn_gamma" = "seagreen3",
"papalexi_eccite_screen" = "royalblue1")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# set colors (not loaded by)
bio_rep_cols <- c("R1" = "darkred", "R2" = "darkblue", "R3" = "darkgreen")
bio_rep_fills <-  c("R1" = "lightcoral", "R2" = "cornflowerblue", "R3" = "palegreen3")
dataset_cols <- c("frangieh_ifn_gamma" = "seagreen3",
"papalexi_eccite_screen" = "royalblue1")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= 10, n_nonzero_control >= 10)
resampling_res <- readRDS(paste0(result_dir, "resampling_distributions/seurat_resampling_at_scale_processed.rds")) |>
mutate(p_rat = p_emp/p_value)
fisher_exact_p <- readRDS(paste0(result_dir, "extra_analyses/papalexi_grna_confounding_tests.rds"))
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
head(nb_gof_tests)
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit()
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit()
saveRDS(object = res_na_omit,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit()
head(res)
tail)res
tail(res)
saveRDS(object = res,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# set colors (not loaded by)
bio_rep_cols <- c("R1" = "darkred", "R2" = "darkblue", "R3" = "darkgreen")
bio_rep_fills <-  c("R1" = "lightcoral", "R2" = "cornflowerblue", "R3" = "palegreen3")
dataset_cols <- c("frangieh_ifn_gamma" = "seagreen3",
"papalexi_eccite_screen" = "royalblue1")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= 10, n_nonzero_control >= 10)
resampling_res <- readRDS(paste0(result_dir, "resampling_distributions/seurat_resampling_at_scale_processed.rds")) |>
mutate(p_rat = p_emp/p_value)
fisher_exact_p <- readRDS(paste0(result_dir, "extra_analyses/papalexi_grna_confounding_tests.rds"))
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
p_f
head(resampling_res)
head(undercover_res)
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
undercover_res |> head()
nb_gof_tests |> head()
head(undercover_res)
head(undercover_res)
nb_gof_tests$theta |> head()
nb_gof_tests$p |> heaD()
nb_gof_tests$p |> head()
nrow(nb_gof_tests)
head(nb_gof_tests)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset)
}) |> data.table::rbindlist()
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit()
head(res)
head(gene_ids)
dataset <- datasets[1]
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
gene_ids <- gene_ids[1:10]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset, gene_ids = gene_ids)
data.frame(theta = thetas, p = fit_ps, dataset = dataset, response_id = gene_ids)
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
res <- lapply(X = datasets, FUN = function(dataset) {
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
thetas <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
expression <- as.numeric(response_odm_ntc[[gene_id, samp_idxs]])
if (mean(expression >= 3) >= 0.95) {
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s1, expression = expression)
theta <- lowmoi:::estimate_size(df = curr_data_matrix,
formula = my_formula)
theta <- min(max(theta, 0.1), 1000)
} else {
NA
}
})
fit_ps <- sapply(gene_ids, FUN = function(gene_id) {
print(gene_id)
curr_theta <- thetas[[gene_id]]
if (!is.na(curr_theta)) {
expression <- as.numeric(response_odm_ntc[[gene_id, -samp_idxs]])
curr_data_matrix <- dplyr::mutate(cell_covariates_ntc_s2, expression = expression)
fit_nb <- glm(formula = my_formula,
family = MASS::neg.bin(curr_theta),
data = curr_data_matrix)
fit_p <- pchisq(fit_nb$deviance,
df = fit_nb$df.residual,
lower.tail = FALSE)
} else {
fit_p <- NA
}
return(fit_p)
})
data.frame(theta = thetas, p = fit_ps, dataset = dataset, response_id = gene_ids)
}) |> data.table::rbindlist()
res <- res |>
lowmoi:::replace_slash_w_underscore() |>
na.omit()
saveRDS(object = res,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
head(res)
tail(res)
saveRDS(object = res,
file = paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# set colors (not loaded by)
bio_rep_cols <- c("R1" = "darkred", "R2" = "darkblue", "R3" = "darkgreen")
bio_rep_fills <-  c("R1" = "lightcoral", "R2" = "cornflowerblue", "R3" = "palegreen3")
dataset_cols <- c("frangieh_ifn_gamma" = "seagreen3",
"papalexi_eccite_screen" = "royalblue1")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= 10, n_nonzero_control >= 10)
resampling_res <- readRDS(paste0(result_dir, "resampling_distributions/seurat_resampling_at_scale_processed.rds")) |>
mutate(p_rat = p_emp/p_value)
fisher_exact_p <- readRDS(paste0(result_dir, "extra_analyses/papalexi_grna_confounding_tests.rds"))
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds"))
##########
# PANNEL a
##########
pairs <- data.frame(undercover_grna = c("NO-SITE-836", "NO-SITE-599"),
response_id = c("DNAL1", "ZNF615"),
pair_id = paste0("Pair ", 1:2))
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
undercover_res |>
filter(dataset %in% nb_gof_tests$dataset,
response_id %in% nb_gof_tests$response_id)
head(nb_gof_tests$response_id)
head( nb_gof_tests$dataset)
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
undercover_res |>
filter(dataset %in% unique(nb_gof_tests$dataset),
response_id %in% unique(nb_gof_tests$response_id))
unique(nb_gof_tests$dataset)
unique(nb_gof_tests$response_id)
head(undercover_res)
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
x <- undercover_res |>
dplyr::filter(dataset %in% unique(nb_gof_tests$dataset),
response_id %in% unique(nb_gof_tests$response_id))
head(x)
unique(nb_gof_tests$dataset)
head(undercover_res)
nb_gof_tests$response_id
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
x <- undercover_res |>
dplyr::filter(dataset %in% unique(nb_gof_tests$dataset) |
response_id %in% unique(nb_gof_tests$response_id))
head(x)
nrow(x)
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
x <- undercover_res |>
dplyr::filter(dataset %in% unique(nb_gof_tests$dataset) & response_id %in% unique(nb_gof_tests$response_id))
head(x)
# compute the number of Bonferoni rejections for each gene (hopefully small); join with p-value result
x <- undercover_res |>
dplyr::filter(dataset %in% unique(nb_gof_tests$dataset) | response_id %in% unique(nb_gof_tests$response_id))
head(x)
head(x)
x <- undercover_res |>
dplyr::filter(dataset %in% unique(nb_gof_tests$dataset) |
response_id %in% unique(nb_gof_tests$response_id))
head(x)
x |> group_by(response_id, dataset, n_reject = sum(p_value < 0.01))
head(x)
head(nb_gof_tests)
x_sub <- filter(x, response_id == "FTL", dataset == "frangieh_ifn_gamma")
x_sub
head(x_sub)
x_sub <- filter(undercover_res, response_id == "FTL", dataset == "frangieh_ifn_gamma")
x_sub <- filter(undercover_res, response_id == "FTL" & dataset == "frangieh_ifn_gamma")
x_sub
head(x_sib)
head(x_sub)
head(nb_gof_tests)
x_sub <- filter(undercover_res, response_id == "FTH1" & dataset == "frangieh_ifn_gamma")
head(x_sub)
x_sub
x_sub <- filter(undercover_res, response_id == "S100A6" & dataset == "frangieh_ifn_gamma")
x_sub
x_sub <- filter(undercover_res, response_id == "TMSB10" & dataset == "frangieh_ifn_gamma")
x_sub
head(undercover_res)
x_sub <- filter(undercover_res,
response_id == "A1BG" & dataset == "frangieh_co_culture_gene")
x_sub
head(A1BG)
head(x_sub)
x_sub$method |> unique()
x_sub <- filter(undercover_res, method == "nb_regression_w_covariates",
response_id == "A1BG" & dataset == "frangieh_co_culture_gene")
x_sub
undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset)
undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.01))
undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.02))
undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.05))
n_nb_reject_df <- undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.05))
head(n_nb_reject_df <- undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.05)))
head(nb_gof_tests)
head(nb_gof_tests)
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds")) |>
mutate(theta = NULL)
head(nb_gof_tests)
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds")) |>
mutate(theta = NULL) |>
as.data.frame()
head(nb_gof_tests)
head(n_nb_reject_df)
n_nb_reject_df <- undercover_res |>
filter(method == "nb_regression_w_covariates") |>
group_by(response_id, dataset) |>
summarize(n_reject = sum(p_value < 0.05)) |>
ungroup()
head(n_nb_reject_df)
head(nb_gof_tests)
left_join(x = nb_gof_tests, y = n_nb_reject_df, by = c("dataset", "response_id"))
head(nb_gof_tests)
tail(nb_gof_tests)
head(n_nb_reject_df)
head(nb_gof_tests)
head(nb_gof_tests)
head(n_nb_reject_df)
filter(undercover_res, response_id == "FTL", dataset == "dataset")
filter(undercover_res, response_id == "FTL", dataset == "frangieh_ifn_gamma")
