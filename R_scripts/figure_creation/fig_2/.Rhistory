print_legend = FALSE)
# 2.
papa_plots <- get_plots_for_dataset(undercover_res |> filter(dataset == "papalexi_eccite_screen_gene"),
"Papalexi (gene) neg. controls",
print_legend = TRUE,
legend_position = c(0.38, 0.8))
fig <- cowplot::plot_grid(papa_plots$p_qq, papa_plots$p_bar,
ifn_gama_plots$p_qq, ifn_gama_plots$p_bar,
labels = c("a", "", "b", "", "c", "", "d", "", "e", "", "f", ""),
rel_widths = c(.75, 0.25),
ncol = 2, nrow = 2, align = "h")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 4.0, height = 5, dpi = 330)
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF,
method %in% c("sceptre", "sceptre_no_covariates", "nb_regression_w_covariates")) |>
mutate(Method = fct_recode(Method,
"SCEPTRE" = "Sceptre",
"SCEPTRE (w/o covariates)" = "Sceptre No Covariates",
"NB Regression" = "Nb Regression W Covariates"))
my_values <- my_cols[names(my_cols) %in% c("SCEPTRE", "SCEPTRE (w/o covariates)", "NB Regression")]
get_plots_for_dataset <- function(df_sub, tit, print_legend, legend_position = c(0.45, 0.85)) {
p_qq <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle(tit) +
scale_color_manual(values = my_values,
drop = FALSE,
breaks = c("SCEPTRE",
"Seurat De",
"SCEPTRE (w/o covariates)",
"NB Regression"))
if (print_legend) {
p_qq <- p_qq +
my_theme +
theme(legend.title= element_blank(),
legend.position = legend_position,
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
} else {
p_qq <- p_qq + my_theme_no_legend
}
n_bonf_rej <- df_sub |>
compute_n_bonf_rejections()
max_reject <- max(n_bonf_rej$n_reject)
n_bonf_rej <- n_bonf_rej |>
mutate(n_reject = ifelse(n_reject == 0, max_reject/50, n_reject))
breaks_v <-  seq(0, max_reject, by = if (max_reject >= 7) 5 else 1)
p_bar <- n_bonf_rej |> ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank(),
plot.margin = margin(t = 5.5, r = 5.5, b = 5.5, l = 5.5, unit = "pt")) +
scale_y_continuous(breaks = breaks_v, expand = c(0, 0)) +
ggtitle("") +
scale_fill_manual(values = my_values)
return(list(p_qq = p_qq, p_bar = p_bar))
}
# 1.
ifn_gama_plots <- get_plots_for_dataset(undercover_res |>
filter(dataset == "frangieh_ifn_gamma_gene"),
"Frangieh (IFN-\u03B3) neg. controls",
print_legend = FALSE)
# 2.
papa_plots <- get_plots_for_dataset(undercover_res |> filter(dataset == "papalexi_eccite_screen_gene"),
"Papalexi (gene) neg. controls",
print_legend = TRUE,
legend_position = c(0.38, 0.8))
fig <- cowplot::plot_grid(papa_plots$p_qq, papa_plots$p_bar,
ifn_gama_plots$p_qq, ifn_gama_plots$p_bar,
labels = c("a", "", "b", "", "c", "", "d", "", "e", "", "f", ""),
rel_widths = c(.75, 0.25),
ncol = 2, nrow = 2, align = "h")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 4.0, height = 5, dpi = 330)
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
reject_thresh <- 1e-5
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
n_false_rejections <- undercover_res |>
compute_n_bonf_rejections() |>
rename("n_ntc_reject" = "n_reject") |>
select(-Method)
##########
# TOP HALF
##########
n_reject_df <- pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset, method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
Method = Method[1]) |>
group_by(dataset) |>
mutate(n_pc_reject = ifelse(n_pc_reject == 0, 0.02 * max(n_pc_reject), n_pc_reject),
Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"Liscovitch Meth." = "Liscovitch Method",
"Schraivogel Meth." = "Schraivogel Method",
"Weissman Meth." = "Weissman Method"),
Method = forcats::fct_relevel(Method,
"SCEPTRE",
"Seurat De",
"Weissman Meth.",
"Mimosca",
"Liscovitch Meth.",
"Schraivogel Meth.")) |>
left_join(n_false_rejections,
by = c("dataset", "method")) |>
filter(n_ntc_reject < 50)
make_n_rejected_plot_for_dataset <- function(n_reject_df, dataset, tit, y_text = TRUE, extra_space = FALSE) {
curr_n_reject_df <- n_reject_df |> filter(dataset == !!dataset)
# max_rejected <- curr_n_reject_df$n_pc_reject |> max()
integer_breaks <- function(n = 5, ...) {
fxn <- function(x) {
breaks <- floor(pretty(x, n, ...))
names(breaks) <- attr(breaks, "labels")
breaks
}
return(fxn)
}
p_0 <- curr_n_reject_df |>
arrange(Method) |>
ggplot2::ggplot(ggplot2::aes(x = Method,
y = n_pc_reject,
fill = Method)) +
ggplot2::geom_col(col = "black") +
ylab("N discoveries") +
xlab("Method") +
theme(legend.title = element_blank()) +
scale_fill_manual(values = my_cols) +
scale_color_manual(values = my_cols) +
scale_y_continuous(breaks = integer_breaks(),
expand = c(0, 0))
legend <- get_legend(p_0)
p <- p_0 +
my_theme_no_legend +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank(),
axis.ticks.x = element_blank()) +
ggtitle(tit)
if (!y_text) {
p <- p + theme(axis.title.y = element_blank())
}
if (extra_space) {
p <- p + theme(axis.title.y = element_text(margin = margin(t = 5, r = 10, b = 5, l = 0,  unit = "pt")))
}
return(list(p = p, legend = legend))
}
p_a <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, dataset = "frangieh_ifn_gamma_gene", tit = "Frangieh (IFN-\u03B3)", y_text = TRUE, extra_space = TRUE)
p_b <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_control_gene", "Frangieh (control)", y_text = TRUE, extra_space = TRUE)
p_c <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_co_culture_gene", "Frangieh (co culture)", extra_space = FALSE, y_text = FALSE)
p_d <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_gene", "Papalexi (gene)",  extra_space = FALSE, y_text = FALSE)
p_e <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_protein", "Papalexi (protein)",  extra_space = FALSE, y_text = FALSE)
p_f <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "schraivogel_enhancer_screen", "Schraivogel",  extra_space = FALSE, y_text = FALSE)
fig_top <- plot_grid(p_a$p, p_c$p, p_e$p, p_b$p, p_d$p, p_f$p, nrow = 2, labels = c("a", "c", "e", "b", "d", "f"), align = "v")
legend <- p_e$legend
fig_top_2 <- plot_grid(fig_top, legend, ncol = 2, rel_widths = c(0.81, 0.19))
############
# PANELS g-h
############
make_p_val_vs_sample_size_plot <- function(pc_res_sub, tit, print_legend) {
p <- pc_res_sub |>
mutate(reject = ifelse(p_value < reject_thresh, "Signif.", "Not signif.")) |>
ggplot(mapping = aes(x = n_treatment, y = p_value, col = reject)) +
annotate("rect", xmin = -Inf, xmax = N_NONZERO_TREATMENT_CUTOFF, ymin = 0, ymax = Inf, fill = "slategray1") +
annotate("rect", xmin = N_NONZERO_TREATMENT_CUTOFF, xmax = Inf, ymin = 0, ymax = Inf, fill = "lightpink") +
geom_hline(yintercept = reject_thresh, linetype = "dashed", col = "darkred") +
geom_point(alpha = 0.85, size = 0.95) +
scale_x_continuous(trans = scales::pseudo_log_trans(base = 10, sigma = 2),
breaks = c(0, 1, 10, 100), expand = c(0.02, 0)) +
scale_y_continuous(trans = revlog_trans(10)) +
xlab("N treatment cells with expression") +
ylab("SCEPTRE p-value") +
ggtitle(tit) +
scale_color_manual(values = c("Signif." = "black", "Not signif." = "slategrey"),
breaks = c("Signif.", "Not signif."))
if (print_legend) {
p <- p +
my_theme +
theme(legend.title= element_blank(),
legend.position = c(0.15, 0.87),
legend.text=element_text(size = 9),
legend.margin=margin(t = -0.5, b = 0, unit='cm'),
legend.key = element_rect(fill = "slategray1"),
legend.background = element_rect(fill = "slategray1")) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit="inch"))
} else {
p <- p + my_theme_no_legend
}
}
p_g <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_co_culture_gene",
method == "sceptre"),
"Frangieh (co culture) positive controls",
print_legend = TRUE)
p_h <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_control_gene", method == "sceptre"),
"Frangieh (control) positive controls",
print_legend = FALSE)
fig_bottom <- plot_grid(p_g, p_h, nrow = 1, labels = c("g", "h"))
############
# CREATE FIG
############
fig <- plot_grid(fig_top_2, fig_bottom, nrow = 2, rel_heights = c(0.6, 0.4), align = "v", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_5/fig_5.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 6.75, dpi = 330)
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 6.5, dpi = 330)
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 6.25, dpi = 330)
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
bio_rep_cols <- c("R1" = "firebrick3", "R2" = "navy", "R3" = "purple3")
bio_rep_fills <-  c("R1" = "firebrick3", "R2" = "navy", "R3" = "purple3")
dataset_cols <- c("frangieh_co_culture_gene" = "dodgerblue3",
"frangieh_control_gene" = "purple3",
"frangieh_ifn_gamma_gene" = "navy",
"papalexi_eccite_screen_gene" = "firebrick3")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
resampling_res <- readRDS(paste0(result_dir, "resampling_distributions/seurat_resampling_at_scale_processed.rds")) |>
mutate(p_rat = p_emp/p_value)
fisher_exact_p <- readRDS(paste0(result_dir, "extra_analyses/papalexi_grna_confounding_tests.rds"))
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds")) |>
mutate(theta = NULL)
##########
# PANNEL a
##########
pairs <- data.frame(undercover_grna = c("NO-SITE-836", "NO-SITE-599"),
response_id = c("DNAL1", "ZNF615"),
pair_id = paste0("Pair ", 1:2))
B <- 2500
pannel_a_list <- lapply(X = seq(1, nrow(pairs)), FUN = function(i) {
response_id <- pairs$response_id[i]
undercover_grna <- pairs$undercover_grna[i]
args_to_pass <- lowmoi::get_sceptre_function_args_for_pair(response_id = response_id,
undercover_grna = undercover_grna,
dataset_name = "frangieh/co_culture/gene",
output_amount = 2, B = B)
response_odm <- args_to_pass$mm_odm |> ondisc::get_modality("response")
grna_odm <- args_to_pass$mm_odm |> ondisc::get_modality("grna")
res <- lowmoi::mann_whitney_perm(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = args_to_pass$response_grna_group_pairs,
B = B,
progress = TRUE,
full_output = TRUE)
z_null <- res |> select(matches("z_[0-9]+")) |> as.numeric()
ks_stat <- resampling_res |>
filter(response_id == !!response_id,
undercover_grna == !!undercover_grna) |> pull(ks_stat)
z_star <- resampling_res |>
filter(response_id == !!response_id,
undercover_grna == !!undercover_grna) |> pull(z_star)
interval <- c(-3.75, 3.75)
z_grid <- seq(interval[1], interval[2], length.out = 1000)
lab <- paste0("Pair ", i, " (KS stat = ", round(ks_stat, 3), ")")
density_df <- data.frame(z_grid = z_grid,
density = stats::dnorm(z_grid)) |>
mutate(ks_fit = lab, z_star = z_star)
histogram_df <- data.frame(z_null = z_null) |>
mutate(ks_fit = lab, z_star)
return(list(density_df = density_df, histogram_df = histogram_df))
})
density_df <- lapply(pannel_a_list, function(l) l$density_df) |>
bind_rows() |>
mutate(ks_fit = factor(ks_fit))
histogram_df <- lapply(pannel_a_list, function(l) l$histogram_df) |>
bind_rows() |>
mutate(ks_fit = factor(ks_fit))
p_a <- ggplot() + geom_histogram(aes(x = z_null, y = after_stat(density),
fill = "Permutation distribution"),
data = histogram_df,
boundary = 0, color = "black", bins = 20) +
facet_wrap(ks_fit ~ ., nrow = 1) +
my_theme +
theme(strip.background = element_blank(),
legend.title = element_blank(),
legend.position = c(0.29, 0.78),
legend.key.size = unit(0.35, 'cm'),
legend.margin = margin(t = -0.5, unit = 'cm'),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0))
) +
ylab("Density") +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
geom_line(aes(x = z_grid, y = density, col = "N(0,1) density"),
data = density_df, linewidth = 0.7) +
ggtitle("Permutation distribution of MW statistic") +
xlab("Permuted MW statistic") +
scale_color_manual(values = c("N(0,1) density" = "purple3")) +
scale_fill_manual(values = c("Permutation distribution" = "lightgrey"))
p_a
##########
# PANNEL b
##########
pairs_to_annotate <- right_join(x = resampling_res,
y = pairs,
by = c("undercover_grna", "response_id")) |> arrange(pair_id)
p_b <- ggplot(data = resampling_res |> filter(p_rat < 10, p_rat > 1e-3, n_nonzero_treatment >= 1),
mapping = aes(x = ks_stat, y = p_rat, col = log(n_nonzero_treatment + 1))) +
geom_point(alpha = 0.7, size = 0.8) +
scale_y_log10() +
scale_x_log10() +
ylab(expression(italic(p)[ratio]*" = "*italic(p)[exact]/italic(p)[asymptotic])) +
# ylab(bquote(p[ratio] = p[exact] / p[asymptotic])) +
# paste0(expression(italic(p)[ratio]), " = ", expression(italic(p)[exact]/italic(p)[asymptotic]))) +
xlab("KS statistic") +
geom_hline(yintercept = 1) +
my_theme +
theme(legend.position = c(0.1, 0.67),
legend.key.size = unit(0.35, 'cm'),
legend.title = element_blank(),
legend.margin=margin(t = -0.5, unit='cm')) +
scale_color_continuous(name = "Log(N treatment cells + 1)") +
ggtitle("Inflation of MW p-values") +
annotate("text", x = 0.014, y = 9.5, label = "Log(N treatment cells with expression + 1)", size = 3) +
# annotate pair 1
geom_segment(aes(x = pairs_to_annotate[1,"ks_stat"],
xend = pairs_to_annotate[1,"ks_stat"],
yend = pairs_to_annotate[1,"p_rat"] + 0.13,
y = pairs_to_annotate[1, "p_rat"] + 2),
col = "black",
arrow = arrow(length = unit(0.03, "npc")),
linewidth = 0.45) +
annotate(geom = "label",
x = pairs_to_annotate[1,"ks_stat"],
y = pairs_to_annotate[1, "p_rat"] + 2,
label = "Pair 1",
size = 3) +
# annotate pair 2
geom_segment(aes(x = pairs_to_annotate[2,"ks_stat"] - 0.12,
xend = pairs_to_annotate[2,"ks_stat"] - 0.015,
yend = pairs_to_annotate[2,"p_rat"],
y = pairs_to_annotate[2, "p_rat"]),
col = "black",
arrow = arrow(length = unit(0.03, "npc")),
linewidth = 0.45) +
annotate(geom = "label",
x = pairs_to_annotate[2,"ks_stat"] - 0.14,
y = pairs_to_annotate[2, "p_rat"],
label = "Pair 2",
size = 3) +
scale_color_gradient(low = "mediumpurple3",
high = "navy")
p_b
p_b <- ggplot(data = resampling_res |> filter(p_rat < 10, p_rat > 1e-3, n_nonzero_treatment >= 7),
mapping = aes(x = ks_stat, y = p_rat, col = log(n_nonzero_treatment + 1))) +
geom_point(alpha = 0.7, size = 0.8) +
scale_y_log10() +
scale_x_log10() +
ylab(expression(italic(p)[ratio]*" = "*italic(p)[exact]/italic(p)[asymptotic])) +
# ylab(bquote(p[ratio] = p[exact] / p[asymptotic])) +
# paste0(expression(italic(p)[ratio]), " = ", expression(italic(p)[exact]/italic(p)[asymptotic]))) +
xlab("KS statistic") +
geom_hline(yintercept = 1) +
my_theme +
theme(legend.position = c(0.1, 0.67),
legend.key.size = unit(0.35, 'cm'),
legend.title = element_blank(),
legend.margin=margin(t = -0.5, unit='cm')) +
scale_color_continuous(name = "Log(N treatment cells + 1)") +
ggtitle("Inflation of MW p-values") +
annotate("text", x = 0.014, y = 9.5, label = "Log(N treatment cells with expression + 1)", size = 3) +
# annotate pair 1
geom_segment(aes(x = pairs_to_annotate[1,"ks_stat"],
xend = pairs_to_annotate[1,"ks_stat"],
yend = pairs_to_annotate[1,"p_rat"] + 0.13,
y = pairs_to_annotate[1, "p_rat"] + 2),
col = "black",
arrow = arrow(length = unit(0.03, "npc")),
linewidth = 0.45) +
annotate(geom = "label",
x = pairs_to_annotate[1,"ks_stat"],
y = pairs_to_annotate[1, "p_rat"] + 2,
label = "Pair 1",
size = 3) +
# annotate pair 2
geom_segment(aes(x = pairs_to_annotate[2,"ks_stat"] - 0.12,
xend = pairs_to_annotate[2,"ks_stat"] - 0.015,
yend = pairs_to_annotate[2,"p_rat"],
y = pairs_to_annotate[2, "p_rat"]),
col = "black",
arrow = arrow(length = unit(0.03, "npc")),
linewidth = 0.45) +
annotate(geom = "label",
x = pairs_to_annotate[2,"ks_stat"] - 0.14,
y = pairs_to_annotate[2, "p_rat"],
label = "Pair 2",
size = 3) +
scale_color_gradient(low = "mediumpurple3",
high = "navy")
p_b
resampling_res |> filter(n_nonzero_treatment >= 1)
resampling_res |> filter(n_nonzero_treatment >= 1) |> nrow()
0.1/100000
0.1/100000 * 100
0.1/100000 * 10
0.1/100000 *
0.1/100000 * 10
10/100000
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# set colors (not loaded by)
bio_rep_cols <- c("R1" = "firebrick3", "R2" = "navy", "R3" = "purple3")
bio_rep_fills <-  c("R1" = "firebrick3", "R2" = "navy", "R3" = "purple3")
dataset_cols <- c("frangieh_co_culture_gene" = "dodgerblue3",
"frangieh_control_gene" = "purple3",
"frangieh_ifn_gamma_gene" = "navy",
"papalexi_eccite_screen_gene" = "firebrick3")
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
resampling_res <- readRDS(paste0(result_dir, "resampling_distributions/seurat_resampling_at_scale_processed.rds")) |>
mutate(p_rat = p_emp/p_value)
fisher_exact_p <- readRDS(paste0(result_dir, "extra_analyses/papalexi_grna_confounding_tests.rds"))
nb_gof_tests <- readRDS(paste0(result_dir, "extra_analyses/goodness_of_fit_tests.rds")) |>
mutate(theta = NULL)
##########
# PANNEL d
##########
# load papalexi data
response_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/gene")
grna_odm <- lowmoi::load_dataset_modality("papalexi/eccite_screen/grna_assignment")
# find a gRNA group that is strongly associated with bio_rep
grna_assignments <- lowmoi:::get_grna_assignments_via_max_op(grna_odm)
nt_cells <- grepl(pattern = "^NTg*", x = grna_assignments)
nt_grna_assignments <- grna_assignments[nt_cells]
unique_nt_grnas <- unique(nt_grna_assignments)
biorep_vect <- response_odm |>
get_cell_covariates() |>
pull(bio_rep)
biorep_vect_nt <- biorep_vect[nt_cells]
my_nt_grna <- names(which.min(fisher_exact_p))
grna_binary_vect <- as.integer(my_nt_grna == nt_grna_assignments)
cont_table <- as.matrix(table(biorep_vect_nt, grna_binary_vect))
prop_table <- cont_table |>
prop.table(margin = 1) |>
as.data.frame() |>
filter(grna_binary_vect == 1) |>
select(-grna_binary_vect, freq = Freq, bio_rep = biorep_vect_nt) |>
mutate(bio_rep = fct_recode(bio_rep, "R1" = "rep_1", "R2" = "rep_2", "R3" = "rep_3"))
my_nt_grna
# carry out a similar analysis for relative gene expression
gene_exp_mat <- as.matrix(response_odm[[,nt_cells]])
rownames(gene_exp_mat) <- get_feature_ids(response_odm)
cell_cov <- (response_odm |> get_cell_covariates())[nt_cells,]
gene_to_plot <- response_odm |>
get_feature_covariates() |>
arrange(desc(mean_expression)) |>
slice(2) |>
row.names()
full_formula <- formula(expressions ~ bio_rep + offset(log(n_umis)))
reduced_formula <-  formula(expressions ~ offset(log(n_umis)))
rel_expression_df <- data.frame(rel_expression = 1000 * log(gene_exp_mat[gene_to_plot,]/cell_cov[,"n_umis"] + 1),
bio_rep = cell_cov[,"bio_rep"]) |>
mutate(bio_rep = fct_recode(bio_rep, "R1" = "rep_1", "R2" = "rep_2", "R3" = "rep_3"))
gene_to_plot
