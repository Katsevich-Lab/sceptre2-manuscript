abline(v = 0)
plot(out[,"z_score_distilled"], out[,"norm_sum_pearson"], ylab = "Z score", xlab = "S Pearson")
abline(a = 0, b = 1, col = "red")
abline(h = 0)
abline(v = 0)
plot(out[,"z_score_distilled"], out[,"norm_sum_pearson"], ylab = "Z distilled", xlab = "S Pearson")
abline(a = 0, b = 1, col = "red")
abline(h = 0)
abline(v = 0)
out <- run_experiment(fitted_means = TRUE, n_rep = 2000, correlated = TRUE)
hist(out[,"z_score_full"], freq = FALSE, breaks = 20,
main = "Full z-score", xlab = "")
lines(x = x_grid, y = y, col = "red")
hist(out[,"z_score_distilled"], freq = FALSE, breaks = 20,
main = "Distilled z-score", xlab = "")
lines(x = x_grid, y = y, col = "red")
sd(out[,"z_score_distilled"])
head(out)
hist(out[,"norm_sum_pearson"], freq = FALSE, breaks = 20,
main = "Distilled z-score", xlab = "")
lines(x = x_grid, y = y, col = "red")
plot(out[,"z_score_distilled"], out[,"z_score_full"], ylab = "Z distilled", xlab = "Z score")
abline(a = 0, b = 1, col = "red")
abline(h = 0)
abline(v = 0)
lm(out[,"z_score_full"] ~ out[,"z_score_distilled"])
plot(out[,"z_score_distilled"], out[,"norm_sum_pearson"], ylab = "Z distilled", xlab = "S Pearson")
abline(a = 0, b = 1, col = "red")
abline(h = 0)
abline(v = 0)
out <- run_experiment(fitted_means = FALSE, n_rep = 2000, correlated = FALSE)
x_grid <- seq(from = -3.5, to = 3.5, by = 0.01)
y <- dnorm(x_grid)
hist(out[,"z_score_distilled"], freq = FALSE, breaks = 20,
main = "Theoretical distilled z-score", xlab = "")
lines(x = x_grid, y = y, col = "red")
n <- 5000
beta_v <- c(1, 2, 1)
dat <- matrix(data = c(rep(1, n),
x1 = rbinom(n, 1, 0.4),
x2 = rnorm(n)),
ncol = 3)
lin_pred <- as.numeric(dat %*% beta_v)
mus <- exp(lin_pred)
x_test <- rbinom(n = n, size = 1, prob = 0.5)
y <- sapply(mus, function(curr_mu) rpois(n = 1, lambda = curr_mu))
fit <- glm(y ~ dat[,-1], family = poisson)
fit
head(dat)
class(dat)
source("~/research_code/sceptre2-manuscript/writeups/score_test_exploration/exploration_1/score_explore.R", echo=TRUE)
n <- 5000
beta_v <- c(1, 2, 1)
Z <- matrix(data = c(rep(1, n),
x1 = rbinom(n, 1, 0.4),
x2 = rnorm(n)),
ncol = 3)
lin_pred <- as.numeric(Z %*% beta_v)
mus <- exp(lin_pred)
x_test <- rbinom(n = n, size = 1, prob = 0.5)
print(i)
y <- sapply(mus, function(curr_mu) rpois(n = 1, lambda = curr_mu))
fit <- glm(y ~ Z[,-1], family = poisson)
# first, get Z^T W Z
W <- fit$weights
head(W)
tail(W)
head(Z)
h <- diag(W) %*% Z
head(h)
W[i] * Z[i,]
i
WZ <- apply(seq(1, length(W)), function(i) {
W[i] * Z[i,]
})
WZ <- spply(X = seq(1, length(W)), FUN = function(i) {
W[i] * Z[i,]
})
WZ <- sapply(X = seq(1, length(W)), FUN = function(i) {
W[i] * Z[i,]
})
head(WZ)
class(WZ)
dim(WZ)
ZTW <- sapply(X = seq(1, length(W)), FUN = function(i) {
W[i] * Z[i,]
})
head(ZTW)
dim(ZTW)
ZTW[1:3,1:3]
P <- ZTW %*% Z
P
dim(P)
P <- t(Z) %*% diag(W) %*% Z
P
P <- ZTW %*% Z
P
# next, spectral decomposition of P
P_decomp <- eigen(P)
# next, spectral decomposition of P
P_decomp <- eigen(P)
P_decomp
u <- P_decomp$vectors
class(u)
Lambda <- diag(P_decomp$values)
Lambda
Lambda_minus_half <- 1/sqrt(Lambda)
t(u) %*% Lambda %*% u
P
P <- ZTW %*% Z
P
# next, spectral decomposition of P
P_decomp <- eigen(P)
u <- P_decomp$vectors
Lambda <- diag(P_decomp$values)
t(u) %*% Lambda %*% u
P
u %*% Lambda %*% t(u)
P
u %*% Lambda %*% t(u)
P
Lambda_minus_half <- 1/sqrt(Lambda)
u %*% Lambda %*% t(u)
Lambda_minus_half
sqrt(Lambda)
Lambda_minus_half <- diag(1/sqrt(P_decomp$values))
Lambda_minus_half
head(Z)
head(ZTW)
dim(ZTW)
# u %*% Lambda %*% t(u) -> check that this equals P
B <- Lambda_minus_half %*% t(u) %*% ZTW
dim(B)
class(B)
B[1:3, 1:3]
x
X
x_test <- rbinom(n = n, size = 1, prob = 0.5)
head(x_test)
# check that B %*% X
L <- B %*% X
X <- rbinom(n = n, size = 1, prob = 0.5)
# check that B %*% X
L <- B %*% X
head(L)
class(L)
# check that B %*% X
L <- as.numeric(B %*% X)
head(L)
tail(L)
L[1:10]
head(X)
B[1:3,1:10]
is.na(B) |> any()
dim(X)
X <- as.matrix(rbinom(n = n, size = 1, prob = 0.5), ncol = 1)
head(X)
head(X)
dim(B)
# check that B %*% X
L <- as.numeric(B %*% X)
L |> head()
class(L)
L[1:10-]
L[1:10]
dim(B)
dim(X)
B %*% X
B %*% X |> dim()
# check that B %*% X
L <- as.numeric(B %*% X)
L
class(L)
L
sum(L^2)
product <- sum(L^2)
product
head(X)
# get product
product <- sum(L^2)
head(product)
?residulas
?residuals.glm
M_y_muhat <- fit$residuals
head(M_y_muhat)
tail(M_y_muhat)
length(M_y_muhat)
numerator <- sum(X * W * M_y_muhat)
numerator
head(Z)
head(X)
head(W)
head(M_y_muhat)
head(S)
head(W)
# finally, get the first part of the denominator
sum(x * W * x)
# finally, get the first part of the denominator
sum(X * W * X)
# get product
denom_2 <- sum(L^2)
denom_2
# finally, get the first part of the denominator
demon_1 <- sum(X * W * X)
# finally, get the first part of the denominator
denom_1 <- sum(X * W * X)
# combine all
numerator/(sqrt(denom_1 + denom_2))
# compare to original score test
statmod::glm.scoretest(fit, X)
head(X)
fit <- glm(y ~ Z[,-1], family = poisson)
# first, get P = Z^T W Z
W <- fit$weights
ZTW <- sapply(X = seq(1, length(W)), FUN = function(i) {
W[i] * Z[i,]
})
P <- ZTW %*% Z
# next, spectral decomposition of P
P_decomp <- eigen(P)
u <- P_decomp$vectors
Lambda <- diag(P_decomp$values)
Lambda_minus_half <- diag(1/sqrt(P_decomp$values))
# u %*% Lambda %*% t(u) -> check that this equals P
# compute B
B <- Lambda_minus_half %*% t(u) %*% ZTW
# compute L
L <- as.numeric(B %*% X)
# get product
denom_2 <- sum(L^2)
# next, focus on the numerator
M_y_muhat <- fit$residuals
numerator <- sum(X * W * M_y_muhat)
# finally, get the first part of the denominator
denom_1 <- sum(X * W * X)
# combine all
numerator/(sqrt(denom_1 + denom_2))
# compare to original score test
statmod::glm.scoretest(fit, X)
# combine all
numerator/(sqrt(denom_1 - denom_2))
# combine all
numerator/(sqrt(denom_1 - denom_2))
# compare to original score test
statmod::glm.scoretest(fit, X)
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
reject_thresh <- 1e-5
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
n_false_rejections <- undercover_res |>
compute_n_bonf_rejections() |>
rename("n_ntc_reject" = "n_reject")
#########
# PANEL A
#########
n_reject_df <- pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset, method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
Method = Method[1]) |>
group_by(dataset) |>
mutate(n_pc_reject = ifelse(n_pc_reject == 0, 0.02 * max(n_pc_reject), n_pc_reject),
Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"Liscovitch Meth." = "Liscovitch Method",
"Schraivogel Meth." = "Schraivogel Method",
"Weissman Meth." = "Weissman Method")) |>
left_join(n_false_rejections,
by = c("dataset", "method")) |>
filter(n_ntc_reject < 50)
make_n_rejected_plot_for_dataset <- function(n_reject_df, dataset, tit, y_text = TRUE, extra_space = FALSE) {
curr_n_reject_df <- n_reject_df |> filter(dataset == !!dataset)
# max_rejected <- curr_n_reject_df$n_pc_reject |> max()
integer_breaks <- function(n = 5, ...) {
fxn <- function(x) {
breaks <- floor(pretty(x, n, ...))
names(breaks) <- attr(breaks, "labels")
breaks
}
return(fxn)
}
p_0 <- curr_n_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = reorder(method, -n_pc_reject),
y = n_pc_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
ylab("N discoveries") +
xlab("Method") +
theme(legend.position = "bottom",
legend.title = element_blank()) +
guides(fill = guide_legend(
keywidth = 0.15,
keyheight = 0.15,
default.unit = "inch",
nrow = 1)) +
scale_fill_manual(values = my_cols) +
scale_y_continuous(breaks = integer_breaks(),
expand = c(0, 0))
legend <- get_legend(p_0)
p <- p_0 +
my_theme_no_legend +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
ggtitle(tit)
if (!y_text) {
p <- p + theme(axis.title.y = element_blank())
}
if (extra_space) {
p <- p + theme(axis.title.y = element_text(margin = margin(t = 5, r = 10, b = 5, l = 0,  unit = "pt")))
}
return(list(p = p, legend = legend))
}
p_a <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_ifn_gamma_gene", "Frangieh (IFN-\u03B3)", y_text = TRUE, extra_space = TRUE)
p_c <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_co_culture_gene", "Frangieh (co culture)", extra_space = FALSE, y_text = FALSE)
p_d <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_gene", "Papalexi (gene)",  extra_space = FALSE, y_text = FALSE)
p_e <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_protein", "Papalexi (protein)",  extra_space = FALSE, y_text = FALSE)
p_f <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "schraivogel_enhancer_screen", "Schraivogel",  extra_space = FALSE, y_text = FALSE)
p_a <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_ifn_gamma_gene", "Frangieh (IFN-\u03B3)", y_text = TRUE, extra_space = TRUE)
n_reject_df
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
reject_thresh <- 1e-5
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
n_false_rejections <- undercover_res |>
compute_n_bonf_rejections() |>
rename("n_ntc_reject" = "n_reject")
n_false_rejections
n_false_rejections <- undercover_res |>
compute_n_bonf_rejections() |>
rename("n_ntc_reject" = "n_reject") |>
select(-Method)
#########
# PANEL A
#########
n_reject_df <- pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset, method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
Method = Method[1]) |>
group_by(dataset) |>
mutate(n_pc_reject = ifelse(n_pc_reject == 0, 0.02 * max(n_pc_reject), n_pc_reject),
Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"Liscovitch Meth." = "Liscovitch Method",
"Schraivogel Meth." = "Schraivogel Method",
"Weissman Meth." = "Weissman Method")) |>
left_join(n_false_rejections,
by = c("dataset", "method")) |>
filter(n_ntc_reject < 50)
n_reject_df
make_n_rejected_plot_for_dataset <- function(n_reject_df, dataset, tit, y_text = TRUE, extra_space = FALSE) {
curr_n_reject_df <- n_reject_df |> filter(dataset == !!dataset)
# max_rejected <- curr_n_reject_df$n_pc_reject |> max()
integer_breaks <- function(n = 5, ...) {
fxn <- function(x) {
breaks <- floor(pretty(x, n, ...))
names(breaks) <- attr(breaks, "labels")
breaks
}
return(fxn)
}
p_0 <- curr_n_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = reorder(method, -n_pc_reject),
y = n_pc_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
ylab("N discoveries") +
xlab("Method") +
theme(legend.position = "bottom",
legend.title = element_blank()) +
guides(fill = guide_legend(
keywidth = 0.15,
keyheight = 0.15,
default.unit = "inch",
nrow = 1)) +
scale_fill_manual(values = my_cols) +
scale_y_continuous(breaks = integer_breaks(),
expand = c(0, 0))
legend <- get_legend(p_0)
p <- p_0 +
my_theme_no_legend +
theme(axis.text.x = element_blank(),
axis.title.x = element_blank()) +
ggtitle(tit)
if (!y_text) {
p <- p + theme(axis.title.y = element_blank())
}
if (extra_space) {
p <- p + theme(axis.title.y = element_text(margin = margin(t = 5, r = 10, b = 5, l = 0,  unit = "pt")))
}
return(list(p = p, legend = legend))
}
p_a <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_ifn_gamma_gene", "Frangieh (IFN-\u03B3)", y_text = TRUE, extra_space = TRUE)
p_b <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_control_gene", "Frangieh (control)", y_text = TRUE, extra_space = TRUE)
p_c <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "frangieh_co_culture_gene", "Frangieh (co culture)", extra_space = FALSE, y_text = FALSE)
p_d <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_gene", "Papalexi (gene)",  extra_space = FALSE, y_text = FALSE)
p_e <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "papalexi_eccite_screen_protein", "Papalexi (protein)",  extra_space = FALSE, y_text = FALSE)
p_f <- make_n_rejected_plot_for_dataset(n_reject_df = n_reject_df, "schraivogel_enhancer_screen", "Schraivogel",  extra_space = FALSE, y_text = FALSE)
fig_top <- plot_grid(p_a$p, p_c$p, p_e$p, p_b$p, p_d$p, p_f$p, nrow = 2, labels = c("a", "c", "e", "b", "d", "f"), align = "v")
legend <- p_e$legend
make_p_val_vs_sample_size_plot <- function(pc_res_sub, tit, print_legend) {
p <- pc_res_sub |>
mutate(reject = ifelse(p_value < reject_thresh, "Signif.", "Not signif.")) |>
ggplot(mapping = aes(x = n_treatment, y = p_value, col = reject)) +
annotate("rect", xmin = -Inf, xmax = N_NONZERO_TREATMENT_CUTOFF, ymin = 0, ymax = Inf, fill = "slategray1") +
annotate("rect", xmin = N_NONZERO_TREATMENT_CUTOFF, xmax = Inf, ymin = 0, ymax = Inf, fill = "lightpink") +
geom_hline(yintercept = reject_thresh, linetype = "dashed", col = "darkred") +
geom_point(alpha = 0.8, size = 0.95) +
scale_x_continuous(trans = scales::pseudo_log_trans(base = 10, sigma = 2),
breaks = c(0, 1, 10, 100), expand = c(0.02, 0)) +
scale_y_continuous(trans = revlog_trans(10)) +
xlab("N treatment cells with expression") +
ylab("SCEPTRE p-value") +
ggtitle(tit) +
scale_color_manual(values = c("Signif." = "black", "Not signif." = "slategrey"),
breaks = c("Signif.", "Not signif."))
if (print_legend) {
p <- p +
my_theme +
theme(legend.title= element_blank(),
legend.position = c(0.15, 0.87),
legend.text=element_text(size = 9),
legend.margin=margin(t = -0.5, b = 0, unit='cm'),
legend.key = element_rect(fill = "slategray1"),
legend.background = element_rect(fill = "slategray1")) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit="inch"))
} else {
p <- p + my_theme_no_legend
}
}
p_g <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_co_culture_gene",
method == "sceptre"),
"Frangieh (co culture) positive controls",
print_legend = TRUE)
p_h <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_control_gene", method == "sceptre"),
"Frangieh (control) positive controls",
print_legend = FALSE)
fig_bottom <- plot_grid(p_g, p_h, nrow = 1, labels = c("g", "h"))
############
# CREATE FIG
############
fig <- plot_grid(fig_top, legend, fig_bottom, nrow = 3, rel_heights = c(0.55, 0.08, 0.4), align = "v", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_5/r_output.png")
fig
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
reject_thresh <- 1e-5
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
n_false_rejections <- undercover_res |>
compute_n_bonf_rejections() |>
rename("n_ntc_reject" = "n_reject") |>
select(-Method)
n_false_rejections
pc_res
pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset, method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
Method = Method[1])
pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset, method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
Method = Method[1]) |>
group_by(dataset) |>
mutate(n_pc_reject = ifelse(n_pc_reject == 0, 0.02 * max(n_pc_reject), n_pc_reject),
Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"Liscovitch Meth." = "Liscovitch Method",
"Schraivogel Meth." = "Schraivogel Method",
"Weissman Meth." = "Weissman Method"))
pc_res
head(pc_res)
pc_res |> group_by(dataset, method) |> summarize(count = n())
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results_processed.rds"))
pc_res |> group_by(dataset, method) |> summarize(count = n())
x <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/positive_control_analysis/pc_results.rds")
x
nrow(x)
x |> group_by(dataset, method) |> summarize(count = n())
x <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/positive_control_analysis/pc_results.rds")
x |> group_by(dataset, method) |> summarize(count = n())
y <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/positive_control_analysis/pc_results_sceptre.rds")
y |> group_by(dataset, method) |> summarize(count = n())
