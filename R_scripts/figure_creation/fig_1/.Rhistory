breaks = c("Signif.", "Not signif."))
if (print_legend) {
p <- p +
my_theme +
theme(legend.title= element_blank(),
legend.position = c(0.15, 0.87),
legend.text=element_text(size = 9),
legend.margin=margin(t = -0.5, b = 0, unit='cm'),
legend.key = element_rect(fill = "slategray1"),
legend.background = element_rect(fill = "slategray1")) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit="inch"))
} else {
p <- p + my_theme_no_legend
}
}
p_g <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_co_culture_gene",
method == "sceptre"),
"Frangieh (co culture) positive controls",
print_legend = TRUE)
p_h <- make_p_val_vs_sample_size_plot(pc_res |>
filter(dataset == "frangieh_control_gene", method == "sceptre"),
"Frangieh (control) positive controls",
print_legend = FALSE)
fig_bottom <- plot_grid(p_g, p_h, nrow = 1, labels = c("g", "h"))
############
# CREATE FIG
############
fig <- plot_grid(fig_top_2, fig_bottom, nrow = 2, rel_heights = c(0.6, 0.4), align = "v", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_5/fig_5.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 6.25, dpi = 330)
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
mutate(Method = fct_recode(Method, "SCEPTRE" = "Sceptre"),
Method = fct_relevel(Method, "SCEPTRE", after = Inf))
make_figure_row <- function(dataset, name, print_legend, legend_posit = "bottom") {
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De", "SCEPTRE")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")")) +
my_theme +
theme(legend.title = element_blank(),
legend.position = legend_posit,
legend.text = element_text(size = 9),
legend.margin = margin(t = 0, unit = "cm")) +
guides(color = guide_legend(
override.aes = list(size = 2.5)))
legend <- cowplot::get_legend(p1)
p1 <- p1 + my_theme_no_legend
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub) |>
dplyr::mutate(n_reject = ifelse(n_reject == 0, 0.2, n_reject))
if (dataset %in% c("frangieh_co_culture_gene",
"frangieh_ifn_gamma_gene",
"frangieh_control_gene",
"schraivogel_enhancer_screen",
"simulated_experiment_1_gene")) {
s <- scale_y_continuous(trans = scales::pseudo_log_trans(base = 10, sigma = 1),
expand = c(0, 0),
breaks = c(0, 1, 10, 100, 1000, 8000))
}
if (dataset == "papalexi_eccite_screen_gene") {
s <- scale_y_continuous(trans = scales::pseudo_log_trans(base = 10, sigma = 0.5),
expand = c(0, 0),
breaks = c(0, 1, 10, 100, 1000, 8000))
}
if (dataset == "papalexi_eccite_screen_protein") {
s <- scale_y_continuous(expand = c(0, 0),
breaks = c(0, 1, 2))
}
p3 <- bonf_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
s +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = my_cols) +
ggtitle("N rejections")
p_row <- plot_grid(p1, p2, p3, nrow = 1, labels = NULL,
align = "h", rel_widths = c(0.42, 0.42, 0.26))
list(p_row = p_row, legend = legend)
}
# rows 1-3
r1 <- make_figure_row(dataset = "frangieh_ifn_gamma_gene", name = "Frangieh IFN-\u03B3", print_legend = FALSE)
r2 <- make_figure_row("frangieh_control_gene", "Frangieh control", FALSE)
r3 <- make_figure_row("frangieh_co_culture_gene", "Frangieh co culture", TRUE)
fig <- plot_grid(r1$p_row, r2$p_row, r3$p_row, r1$legend, nrow = 4,
labels = c("a", "b", "c"), rel_heights = c(0.3, 0.3, 0.3, 0.06))
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/fig_s1_1.png")
ggsave(filename = to_save_fp, plot = fig, device = "png", scale = 1.1, width = 6.5, height = 7.0, dpi = 330)
# rows 4-6
r4 <- make_figure_row(dataset = "schraivogel_enhancer_screen", name = "Schraivogel", FALSE)
r5 <- make_figure_row("papalexi_eccite_screen_gene", "Papalexi gene modality", FALSE)
r6 <- make_figure_row("papalexi_eccite_screen_protein", "Papalexi protein modality", TRUE)
fig <- plot_grid(r4$p_row, r5$p_row,
r6$p_row, r1$legend, nrow = 4,
labels = c("d", "e", "f"),
rel_heights = c(0.3, 0.3, 0.3, 0.06), align = "vh", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/fig_s1_2.png")
ggsave(filename = to_save_fp, plot = fig, device = "png", scale = 1.1, width = 6.5, height = 7.0, dpi = 330)
# row 7
r7 <- make_figure_row("simulated_experiment_1_gene", "Simulated data", TRUE)
fig <- plot_grid(r7$p_row, r7$legend, nrow = 2,
labels = c("g", ""), rel_heights = c(0.86, 0.14))
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_s1/fig_s1_3.png")
ggsave(filename = to_save_fp, plot = fig, device = "png", scale = 1.1, width = 6.5, height = 2.75, dpi = 330)
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
extra_analyses_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
grna_res <- readRDS(paste0(extra_analyses_dir, "papalexi_grna_confounding_tests.rds"))
gene_res <- readRDS(paste0(extra_analyses_dir, "papalex_gene_confounding_tests.rds"))
p1 <- ggplot(data = data.frame(p_value = grna_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("gRNA presence/absence")
p2 <- ggplot(data = data.frame(p_value = gene_res),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
ggtitle("Gene expression")
p_out <- cowplot::plot_grid(p1, p2, nrow = 1, ncol = 2, labels = "auto")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s2/fig_s2.png")
ggsave(filename = to_save_fp, plot = p_out, device = "png", scale = 1.2, width = 6, height = 2.5, dpi = 330)
z_grid <- seq(-4, 4, length.out = 1000)
density_df <- data.frame(density = dnorm(z_grid),
z_grid = z_grid)
histogram_df <- data.frame(z_null = correlated_res$resamp_dist$camp_null)
p3 <- ggplot() + geom_histogram(aes(x = z_null, y = after_stat(density)),
data = histogram_df,
boundary = 0,
fill = "grey85",
color = "black",
bins = 25) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
geom_line(aes(x = z_grid, y = density, col = "N(0,1) density"),
data = density_df, linewidth = 0.7) +
scale_color_manual(values = c("N(0,1) density" = "purple")) +
xlab("z null") +
ylab("") +
theme(legend.position = c(0.8, 0.8),
legend.key.size = unit(0.35, 'cm'),
legend.title = element_blank(),
legend.margin=margin(t = -0.5, unit='cm')) +
ggtitle("SCEPTRE null z-scores") +
xlim(-4, 4)
library(tidyverse)
library(katlabutils)
library(cowplot)
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/extra_analyses/")
sim_res <- readRDS(paste0(result_dir, "simulation_study_res.rds"))
# p1: no problems (no confounding, correct model specification)
make_qq_plot <- function(result_matrix, tit, w_legend = FALSE) {
p0 <- as.data.frame(result_matrix) |>
tidyr::pivot_longer(cols = c("p_theory", "p_camp", "p_perm"),
names_to = "Method", values_to = "p_value") |>
mutate(Method = fct_recode(Method, "NB Regression" = "p_theory",
"SCEPTRE" = "p_camp",
"Permutation test" = "p_perm")) |>
mutate(Method = fct_relevel(Method, "SCEPTRE", after = Inf)) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.9) +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit="inch",
override.aes = list(size = 2.5))) +
ggtitle(tit) +
scale_color_manual(values = my_cols)
if (w_legend) {
p <- p0 + theme(legend.position = c(0.75, 0.2),
legend.title = element_blank())
} else {
p <- p0 + theme(legend.position = "none")
}
return(p)
}
p_a <- make_qq_plot(result_matrix = sim_res$sim_res_uncorrelated_correct_model$out_m,
tit = "Treatment unconfounded,\nGLM specified correctly", w_legend = TRUE)
p_b <- make_qq_plot(result_matrix = sim_res$sim_res_uncorrelated_misspec$out_m,
tit = "Treatment unconfounded,\nGLM specified incorrectly", w_legend = FALSE)
p_c <- make_qq_plot(result_matrix = sim_res$sim_res_correlated_corret_model$out_m,
tit = "Treatment confounded,\nGLM specified correctly", w_legend = FALSE)
p_d <- make_qq_plot(result_matrix = sim_res$sim_res_correlated_misspec$out_m,
tit = "Treatment confounded,\nGLM specified incorrectly", w_legend = FALSE)
fig <- plot_grid(p_a, p_b, p_c, p_d, nrow = 2,
labels = "auto")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s3/fig_s3.png")
ggsave(filename = to_save_fp, plot = fig, device = "png", scale = 1.1, width = 6.5, height = 5.5, dpi = 330)
library(tidyverse)
library(katlabutils)
library(cowplot)
library(ondisc)
# load functions and data
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF,
method %in% c("sceptre", "sceptre_no_covariates", "nb_regression_w_covariates")) |>
mutate(Method = fct_recode(Method,
"SCEPTRE" = "Sceptre",
"SCEPTRE (w/o covariates)" = "Sceptre No Covariates",
"NB Regression" = "Nb Regression W Covariates"))
my_values <- my_cols[names(my_cols) %in% c("SCEPTRE", "SCEPTRE (w/o covariates)", "NB Regression")]
get_plots_for_dataset <- function(df_sub, tit, print_legend, legend_position = c(0.45, 0.85)) {
p_qq <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle(tit) +
scale_color_manual(values = my_values,
drop = FALSE,
breaks = c("SCEPTRE",
"Seurat De",
"SCEPTRE (w/o covariates)",
"NB Regression"))
if (print_legend) {
p_qq <- p_qq +
my_theme +
theme(legend.title= element_blank(),
legend.position = legend_position,
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
} else {
p_qq <- p_qq + my_theme_no_legend
}
n_bonf_rej <- df_sub |>
compute_n_bonf_rejections()
max_reject <- max(n_bonf_rej$n_reject)
n_bonf_rej <- n_bonf_rej |>
mutate(n_reject = ifelse(n_reject == 0, max_reject/50, n_reject))
breaks_v <-  seq(0, max_reject, by = if (max_reject >= 7) 5 else 1)
p_bar <- n_bonf_rej |> ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank(),
plot.margin = margin(t = 5.5, r = 5.5, b = 5.5, l = 5.5, unit = "pt")) +
scale_y_continuous(breaks = breaks_v, expand = c(0, 0)) +
ggtitle("") +
scale_fill_manual(values = my_values)
return(list(p_qq = p_qq, p_bar = p_bar))
}
# 1.
ifn_gama_plots <- get_plots_for_dataset(undercover_res |>
filter(dataset == "frangieh_ifn_gamma_gene"),
"Frangieh (IFN-\u03B3) neg. controls",
print_legend = FALSE)
# 2.
papa_plots <- get_plots_for_dataset(undercover_res |> filter(dataset == "papalexi_eccite_screen_gene"),
"Papalexi (gene) neg. controls",
print_legend = TRUE,
legend_position = c(0.38, 0.8))
fig <- cowplot::plot_grid(papa_plots$p_qq, papa_plots$p_bar,
ifn_gama_plots$p_qq, ifn_gama_plots$p_bar,
labels = c("a", "", "b", "", "c", "", "d", "", "e", "", "f", ""),
rel_widths = c(.75, 0.25),
ncol = 2, nrow = 2, align = "h")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 4.0, height = 5, dpi = 330)
library(ggplot2)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
correlated_sim_res <- readRDS(paste0(result_dir, "extra_analyses/correlated_sim_result.rds"))
result_dir
correlated_sim_res <- readRDS(paste0(result_dir, "extra_analyses/simulation_study_res.rds"))
correlated_sim_res |> head()
correlated_sim_res$sim_res_correlated_corret_model$resamp_dist |> head()
sim_res <- readRDS(paste0(result_dir, "extra_analyses/simulation_study_res.rds"))
correlated_sim_res <- sim_res$sim_res_correlated_corret_model
z_star <- correlated_sim_res$resamp_dist$camp_star
correlated_sim_res
sim_res <- readRDS(paste0(result_dir, "extra_analyses/simulation_study_res.rds"))
correlated_sim_res <- sim_res$sim_res_correlated_corret_model
correlated_sim_res
correlated_sim_res$out_m
z_star <- correlated_sim_res$resamp_dist$camp_star
p_val <- correlated_sim_res$out_m[1,"p_camp"]
z_star
p_val
density_df <- data.frame(z = correlated_sim_res$resamp_dist$camp_null)
p <- ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
annotate("rect", xmin = -Inf, xmax = -z_star,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
xlab("Null z-scores") +
xlim(c(-3.5, 3.5))
p
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sim_res <- readRDS(paste0(result_dir, "extra_analyses/simulation_study_res.rds"))
correlated_sim_res <- sim_res$sim_res_correlated_corret_model
correlated_sim_res
library(ggplot2)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sim_res <- readRDS(paste0(result_dir, "extra_analyses/simulation_study_res.rds"))
correlated_sim_res <- sim_res$sim_res_correlated_corret_model
z_star <- correlated_sim_res$resamp_dist$camp_star
p_val <- correlated_sim_res$out_m[1,"p_camp"]
z_star
p_val
z_null <- correlated_sim_res$resamp_dist$camp_null
density_df <- data.frame(z = z_null)
density_df
z_null
max(z_null)
min(z_null)
p <- ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
annotate("rect", xmin = -Inf, xmax = -z_star,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
xlab("Null z-scores") +
xlim(c(-3.5, 3.5))
p
p
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20)
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01)))
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank())
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1)
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15)
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = -Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15)
ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = -Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
annotate("rect", xmin = Inf, xmax = -z_star,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15)
p <- ggplot() + geom_histogram(aes(x = z, y = after_stat(density)),
data = density_df,  color = "black",
fill = "grey85", bins = 20) +
my_theme +
scale_y_continuous(expand = expansion(mult = c(0.0, .01))) +
theme(axis.ticks.x =  element_blank(),
axis.title.y =  element_blank(),
axis.text.y =  element_blank(),
axis.ticks.y =  element_blank()) +
geom_vline(xintercept = z_star, col = "purple", linewidth = 1) +
annotate("rect", xmin = z_star, xmax = -Inf,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
annotate("rect", xmin = Inf, xmax = -z_star,
ymin = 0, ymax = Inf, fill = "purple", alpha = 0.15) +
xlab("Null z-scores") +
xlim(c(-3.5, 3.5))
p
ggsave(filename = paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_3/histogram.png"),
plot = p, device = "png", width = 4, height = 3)
# cowplot option
left <- cowplot::plot_grid(NULL, p + ggtitle("\n"), NULL, NULL)
right <- cowplot::plot_grid(NULL, NULL, ncol = 1, labels = c("b", "c"))
fig <- cowplot::plot_grid(left, right, ncol = 2, rel_widths = c(2/3, 1/3), labels = c("a"))
ggsave(filename = paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_3/cowplot.pdf"),
plot = fig, device = "pdf", scale = 1.2, width = 7.5, height = 5)
ggsave(filename = paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_3/cowplot.pdf"),
plot = fig, device = "pdf", scale = 1.2, width = 7.5, height = 5)
