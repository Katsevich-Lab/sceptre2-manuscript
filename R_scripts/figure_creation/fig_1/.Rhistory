filter(grna_binary_vect == 1) |>
select(-grna_binary_vect, freq = Freq, bio_rep = biorep_vect_nt) |>
mutate(bio_rep = fct_recode(bio_rep, "R1" = "rep_1", "R2" = "rep_2", "R3" = "rep_3"))
# carry out a similar analysis for relative gene expression
gene_exp_mat <- as.matrix(response_odm[[,nt_cells]])
rownames(gene_exp_mat) <- get_feature_ids(response_odm)
cell_cov <- (response_odm |> get_cell_covariates())[nt_cells,]
gene_to_plot <- response_odm |>
get_feature_covariates() |>
arrange(desc(mean_expression)) |>
slice(2) |>
row.names()
full_formula <- formula(expressions ~ bio_rep + offset(log(n_umis)))
reduced_formula <-  formula(expressions ~ offset(log(n_umis)))
rel_expression_df <- data.frame(rel_expression = 1000 * log(gene_exp_mat[gene_to_plot,]/cell_cov[,"n_umis"] + 1),
bio_rep = cell_cov[,"bio_rep"]) |>
mutate(bio_rep = fct_recode(bio_rep, "R1" = "rep_1", "R2" = "rep_2", "R3" = "rep_3"))
p_d1 <- ggplot(data = prop_table,
aes(x = bio_rep, y = freq, col = bio_rep, fill = bio_rep)) +
geom_bar(stat = "identity") +
ylab("Frac. cells with perturbation") +
xlab("Biological rep.") +
scale_y_continuous(limits = c(0, NA),
expand = expansion(mult = c(0.01, 0.01))) +
my_theme + theme(plot.margin = margin(t = 5.5, r = 5.5, b = 5.5, l = 12, unit = "pt"),
axis.title.y = element_text(margin = margin(t = 0, r = 9, b = 0, l = 0, unit = "pt")),
legend.position = "none") +
scale_color_manual(values = bio_rep_cols) +
scale_fill_manual(values = bio_rep_fills)
p_d2 <- ggplot(data = rel_expression_df,
aes(x = bio_rep, y = rel_expression, col = bio_rep, fill = bio_rep)) +
geom_violin() +
geom_boxplot(outlier.shape = NA, coef = 0) +
scale_y_continuous(limits = c(0, 50),
expand = expansion(mult = c(0.01, 0))) +
ylab("Relative gene expression") +
xlab("Biological rep.") +
my_theme +
theme(plot.title = element_text(hjust=1),
legend.position = "none") +
scale_color_manual(values = bio_rep_cols) +
scale_fill_manual(values = bio_rep_fills)
p_d <- gridExtra::grid.arrange(p_d1, p_d2, nrow = 1,
top = ggpubr::text_grob("Confounding (Papalexi gene modality)",
size = 11, hjust = 0.395))
###########
# PANNEL E
###########
undercover_res_sub <- undercover_res |>
filter(method %in% c("seurat_de", "nb_regression_w_covariates", "nb_regression_no_covariates"),
dataset == "papalexi_eccite_screen_gene") |>
mutate(Method = fct_recode(Method,
"NB Reg (w/ covariates)" = "Nb Regression W Covariates",
"NB Reg (w/o covariates)" = "Nb Regression No Covariates"))
my_labels <- c("NB Reg (w/o covariates)", "NB Reg (w/ covariates)", "Seurat De")
p_e <- undercover_res_sub |>
ggplot(aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
theme(legend.title= element_blank(),
legend.position = c(0.27, 0.75),
legend.margin=margin(t = -0.5, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit = "inch")) +
scale_color_manual(values = my_cols[names(my_cols) %in% my_labels]) +
ggtitle("Papalexi (gene) negative control pairs")
##########
# PANNEL F
##########
p_f <- ggplot(data = nb_gof_tests,
mapping = aes(x = p, fill = dataset)) +
geom_histogram(bins = 10, col = "black", alpha = 0.6) +
scale_y_log10(expand = expansion(mult = c(0.0, .01))) +
scale_x_continuous(expand = expansion(mult = c(0.0, .01))) +
my_theme +
xlab("Goodness of fit p") +
ylab("N genes") +
theme(legend.position = c(0.5, 0.89),
legend.title = element_blank()) +
scale_fill_manual(values = dataset_cols,
labels = c("Frangieh IFN-\u03B3", "Papalexi (gene modality)")) +
ggtitle("NB regression goodness of fit p-values")
###########
# PANNEL E
###########
undercover_res_sub <- undercover_res |>
filter(method %in% c("nb_regression_w_covariates", "nb_regression_no_covariates"),
dataset == "papalexi_eccite_screen_gene") |>
mutate(Method = fct_recode(Method,
"NB Reg (w/ covariates)" = "Nb Regression W Covariates",
"NB Reg (w/o covariates)" = "Nb Regression No Covariates"))
my_labels <- c("NB Reg (w/o covariates)", "NB Reg (w/ covariates)", "Seurat De")
p_e <- undercover_res_sub |>
ggplot(aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.8) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
my_theme +
theme(legend.title= element_blank(),
legend.position = c(0.27, 0.75),
legend.margin=margin(t = -0.5, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit = "inch")) +
scale_color_manual(values = my_cols[names(my_cols) %in% my_labels]) +
ggtitle("Papalexi (gene) negative control pairs")
p_2
p_e
library(katlabutils)
library(tidyverse)
library(ondisc)
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
N_GENES <- 1000
#########################################
# GOODNESS OF FIT TESTS FOR NB REGRESSION
#########################################
datasets <- c("frangieh/ifn_gamma",
"frangieh/co_culture",
"frangieh/control",
"papalexi/eccite_screen")
dataset <- datasets[1]
dataset
mm <- lowmoi::load_dataset_multimodal(paper_fp = dataset, offsite_dir = sceptre2_dir)
response_odm <- mm |> get_modality("gene")
grna_assignments <- mm |>
get_modality("grna_assignment") |>
lowmoi:::get_target_assignments_via_max_op()
response_odm_ntc <- response_odm[,grna_assignments == "non-targeting"]
gene_ids <- response_odm_ntc |>
get_feature_covariates() |>
arrange(desc(n_nonzero)) |>
slice(1:N_GENES) |>
row.names()
# perform the sample split
set.seed(4)
n_ntc_cells <- ncol(response_odm_ntc)
samp_idxs <- sample(x = n_ntc_cells,
size = n_ntc_cells/2,
replace = FALSE)
my_formula_str <- response_odm@misc$nb_regression_formula
my_formula <- stats::as.formula(paste0("expression ", my_formula_str))
cell_covariates_ntc <- response_odm_ntc |> get_cell_covariates()
cell_covariates_ntc_s1 <- cell_covariates_ntc[samp_idxs,]
cell_covariates_ntc_s2 <- cell_covariates_ntc[-samp_idxs,]
gene_id
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
make_figure_row <- function(dataset, name, print_legend) {
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")"))
if (print_legend) {
p1 <- p1 +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.72, 0.2),
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch"))
} else {
p1 <- p1 + my_theme_no_legend
}
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub)
p3 <- bonf_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10, sigma = 0.2),
expand = c(0,0),
breaks = c(0, 1, 10, 100, 1000, 8000)) +
# scales::pseudo_log_trans() +
# scale_y_log10(expand = c(0, 0)) +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = my_cols) +
ggtitle("N rejections")
p_row <- plot_grid(p1, p2, p3, nrow = 1, labels = NULL,
align = "h", rel_widths = c(0.42, 0.42, 0.26))
p_row
}
r0 <- ggplot() + theme_minimal() + ggtitle("Undercover gRNA calibration assessment") + theme(plot.title = element_text(hjust = 0.5, size=11))
r1 <- make_figure_row("papalexi_eccite_screen_gene", "Papalexi gene modality", TRUE)
r2 <- make_figure_row("frangieh_ifn_gamma_gene", "Frangieh IFN-\u03B3", FALSE)
fig <- plot_grid(r0, r1, r2, nrow = 3,
labels = c("a", "b", "c"), rel_heights = c(0.3, 0.35, 0.35))
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/fig_1/r_output.png")
ggsave(filename = to_save_fp, plot = fig, device = "png", scale = 1.1, width = 6.5, height = 6.75, dpi = 330)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
undercover_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= 10,
n_nonzero_control >= 10)
make_figure_row <- function(dataset, name, print_legend) {
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")"))
if (print_legend) {
p1 <- p1 +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.72, 0.2),
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch"))
} else {
p1 <- p1 + my_theme_no_legend
}
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub)
p3 <- bonf_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10, sigma = 0.2),
expand = c(0,0),
breaks = c(0, 1, 10, 100, 1000, 8000)) +
# scales::pseudo_log_trans() +
# scale_y_log10(expand = c(0, 0)) +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = my_cols) +
ggtitle("N rejections")
p_row <- plot_grid(p1, p2, p3, nrow = 1, labels = NULL,
align = "h", rel_widths = c(0.42, 0.42, 0.26))
p_row
}
r0 <- ggplot() +
theme_minimal() +
ggtitle("Undercover gRNA calibration assessment") +
theme(plot.title = element_text(hjust = 0.5, size=11))
r1 <- make_figure_row("papalexi_eccite_screen_gene", "Papalexi gene modality", TRUE)
r2 <- make_figure_row("frangieh_ifn_gamma_gene", "Frangieh IFN-\u03B3", FALSE)
# Load packages
library(tidyverse)
library(katlabutils)
library(cowplot)
# Load scripts and results
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_processed.rds")) |>
filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF)
# The following plot (the letters are rows):
# a) three empty columns for undercover schematic
# b) col1: Frangieh IFN gamma transformed
#    col2: Frangieh IFN gamma transformed
#    col3: Frangieh IFN gamma N bonferoni rejections (at level 0.1)
# c) same as above, but with Papalexi
# d) same as above, but with simulated OR Schraivogel enhancer screen
# restricting attention to pairs with >= 10 treatment cells and > 10 control cells in all cases
r0 <- ggplot() +
theme_minimal() +
ggtitle("Undercover gRNA calibration assessment") +
theme(plot.title = element_text(hjust = 0.5, size=11))
r1 <- make_figure_row("papalexi_eccite_screen_gene", "Papalexi gene modality", TRUE)
r2 <- make_figure_row("frangieh_ifn_gamma_gene", "Frangieh IFN-\u03B3", FALSE)
make_figure_row <- function(dataset, name, print_legend) {
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")"))
if (print_legend) {
p1 <- p1 +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.71, 0.2),
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch",
override.aes = list(size = 2.5)))
} else {
p1 <- p1 + my_theme_no_legend
}
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub)
p3 <- bonf_reject_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
scale_y_continuous(trans=scales::pseudo_log_trans(base = 10, sigma = 0.2),
expand = c(0,0),
breaks = c(0, 1, 10, 100, 1000, 8000)) +
# scales::pseudo_log_trans() +
# scale_y_log10(expand = c(0, 0)) +
ylab("N Bonferoni rejections") +
xlab("Method") + my_theme_no_legend +
theme(axis.text.x = element_blank()) +
scale_fill_manual(values = my_cols) +
ggtitle("N rejections")
p_row <- plot_grid(p1, p2, p3, nrow = 1, labels = NULL,
align = "h", rel_widths = c(0.42, 0.42, 0.26))
p_row
}
r0 <- ggplot() +
theme_minimal() +
ggtitle("Undercover gRNA calibration assessment") +
theme(plot.title = element_text(hjust = 0.5, size=11))
r1 <- make_figure_row("papalexi_eccite_screen_gene", "Papalexi gene modality", TRUE)
r2 <- make_figure_row("frangieh_ifn_gamma_gene", "Frangieh IFN-\u03B3", FALSE)
fig <- plot_grid(r0, r1, r2, nrow = 3,
labels = c("a", "b", "c"),
rel_heights = c(0.3, 0.35, 0.35))
dataset = "papalexi_eccite_screen_gene"; name = "Papalexi gene modality"; print_legend = TRUE
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")"))
if (print_legend) {
p1 <- p1 +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.71, 0.2),
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch",
override.aes = list(size = 2.5)))
} else {
p1 <- p1 + my_theme_no_legend
}
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub)
bonf_reject_df
dataset = "frangieh_ifn_gamma_gene"; name = "Frangieh IFN-\u03B3"; print_legend = FALSE
my_methods <- c("Weissman Method", "Schraivogel Method", "Mimosca", "Liscovitch Method", "Seurat De")
my_values <- my_cols[names(my_cols) %in% my_methods]
df_sub <- undercover_res |>
filter(dataset == !!dataset,
Method %in% my_methods)
p1 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
ggtitle(paste0("QQ-plot (", name, ")"))
if (print_legend) {
p1 <- p1 +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.71, 0.2),
legend.text=element_text(size = 9),
legend.margin=margin(t = 0, unit='cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.1,
default.unit="inch",
override.aes = list(size = 2.5)))
} else {
p1 <- p1 + my_theme_no_legend
}
p2 <- ggplot(data = df_sub, mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") + my_theme_no_legend +
scale_color_manual(values = my_values) +
ggtitle("Transformed QQ-plot")
bonf_reject_df <- compute_n_bonf_rejections(df_sub)
bonf_reject_df
1933 / 67
undercover_res |> head()
undercover_res |> filter(Method == "mimosca")
undercover_res |> filter(method == "mimosca")
undercover_res |> filter(method == "mimosca") |> pull(p_val)
undercover_res$dataset |> unique()
undercover_res |> filter(method == "mimosca", dataset == "papalexi_eccite_screen_gene") |> pull(p_val)
undercover_res |> filter(method == "mimosca", dataset == "papalexi_eccite_screen_gene") |> pull(p_value)
undercover_res |> filter(method == "mimosca", dataset == "papalexi_eccite_screen_gene") |> pull(p_value) |> max()
devtools::install_github("katsevich-lab/katlabutils")
p_vals <- runif(1000)
p_vals <- runif(10000)
p <- ggplot(data = data.frame(p_value = p_vals),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black")
devtools::install_github("katsevich-lab/katlabutils")
library(katlabutils)
library(ggplot)
devtools::install_github("katsevich-lab/katlabutils")
library(katlabutils)
library(ggplot2)
p_vals <- runif(10000)
p <- ggplot(data = data.frame(p_value = p_vals),
mapping = aes(y = p_value)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
scale_x_reverse() +
scale_y_reverse() +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black")
p
