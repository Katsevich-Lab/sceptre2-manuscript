# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
reject_thresh <- 1e-5   # threshold for rejection of positive controls
alpha <- 0.1            # target FWER level for negative controls
max_false_reject <- 50  # maximum false rejections to display power
# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
#################################################################
# Set analysis parameters
#################################################################
reject_thresh <- 1e-5   # threshold for rejection of positive controls
alpha <- 0.1            # target FWER level for negative controls
max_false_reject <- 50  # maximum false rejections to display power
#################################################################
# Load results
#################################################################
# source shared figure script
shared_fig_script <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"
)
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
library(lowmoi)
library(tidyverse)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
sceptre2_results_dir
# discovery results
disc_res <- readRDS(paste0(sceptre2_results_dir, "discovery_analyses/discovery_results_0423.rds"))
disc_res
head(disc_res)
process_pc_result
disc_res_processed <- process_pc_result(pc_res = disc_res,
sample_size_df = sample_size_df)
head(disc_res_processed)
x <- disc_res_processed |> dplyr::filter(method == "sceptre")
head(x)
x$p_value |> is.na() |> any()
x |> na.omit() |> head()
x_sub <- x |> na.omit()
x_sub$n_treatment |> min()
x_sub$n_control |> min()
head(x_sub)
head(x)
min(x$n_treatment)
x_sub <- x |> dplyr::filter(n_treatment >= 7L, n_control >= 7L)
heda(x_sub)
head(x_sub)
x_sub$p_value |> is.na()
x_sub$p_value |> is.na() |> any()
head(x)
disc_res_processed <- process_pc_result(pc_res = disc_res,
sample_size_df = sample_size_df)
process_pc_result
pc_res <- disc_res
sample_size_df <- sample_size_df
if ("schraivogel/enhancer_screen_chr11/gene" %in% pc_res$dataset &&
"schraivogel/enhancer_screen_chr8/gene" %in% pc_res$dataset) {
x <- pc_res |>
replace_slash_w_underscore() |>
combine_schraivogel_enhancer_screens() |>
update_dataset_and_method_names()
} else {
x <- pc_res |>
replace_slash_w_underscore() |>
update_dataset_and_method_names()
}
load_all("~/research_code/lowmoi")
if ("schraivogel/enhancer_screen_chr11/gene" %in% pc_res$dataset &&
"schraivogel/enhancer_screen_chr8/gene" %in% pc_res$dataset) {
x <- pc_res |>
replace_slash_w_underscore() |>
combine_schraivogel_enhancer_screens() |>
update_dataset_and_method_names()
} else {
x <- pc_res |>
replace_slash_w_underscore() |>
update_dataset_and_method_names()
}
sample_size_df_pc <- sample_size_df |>
filter(feature_id %in% unique(pc_res$response_id),
dataset_concat %in% unique(pc_res$dataset)) |>
dplyr::mutate(dataset = dataset_concat,
dataset_concat = NULL, paper = NULL, modality = NULL) |>
dplyr::rename(grna_group = target, response_id = feature_id) |>
replace_slash_w_underscore()
combine_schraivogel_enhancer_screens
head(sample_size_df_pc$dataset)
unique(sample_size_df_pc$dataset)
if ("schraivogel_enhancer_screen_chr11_gene" %in% unique(sample_size_df_pc$dataset) ||
"schraivogel_enhancer_screen_chr8_gene" %in% unique(sample_size_df_pc$dataset)) {
sample_size_df_pc <- sample_size_df_pc |> combine_schraivogel_enhancer_screens()
}
control_sample_size_df <- sample_size_df_pc |>
filter(grna_group == "non-targeting") |>
group_by(response_id, dataset) |>
summarize(n_control = sum(n_nonzero_cells))
to_join <- sample_size_df_pc |>
group_by(grna_group, response_id, dataset) |>
summarize(n_treatment = sum(n_nonzero_cells)) |>
select(response_id, grna_group, n_treatment, dataset)
pc_res_w_ss <- left_join(x = x,
y = to_join,
by = c("grna_group", "response_id", "dataset")) |>
left_join(y = control_sample_size_df, by = c("response_id", "dataset"))
head(pc_res_w_ss)
# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
shared_fig_script <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"
)
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
# results of undercover analysis
undercover_res <- readRDS(paste0(
result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0423_processed.rds"
)) |>
filter(
n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF
) |>
mutate(Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"t-test" = "Liscovitch Method",
"MAST" = "Schraivogel Method",
"KS test" = "Weissman Method",
"MIMOSCA" = "Mimosca"
)) |>
mutate(dataset_rename = forcats::fct_recode(dataset_rename,
"Frangieh (Co Culture)" = "Frangieh Co Culture Gene",
"Frangieh (Control)" = "Frangieh Control Gene",
"Frangieh (IFN-\u03B3)" = "Frangieh Ifn Gamma Gene",
"Papalexi (Gene)" = "Papalexi Eccite Screen Gene",
"Papalexi (Protein)" = "Papalexi Eccite Screen Protein",
"Schraivogel" = "Schraivogel Enhancer Screen",
"Simulated" = "Simulated Experiment 1 Gene"
))
n_false_rejections <- undercover_res |>
filter(!(Method %in% c(c("Nb Regression No Covariates",
"Nb Regression W Covariates",
"Sceptre No Covariates")))) |>
group_by(dataset_rename, Method) |>
summarize(n_false_reject = sum(p_value < alpha/n()),
Method = Method[1],
`NT pairs` = n(),
.groups = "drop")
# read colors from my_cols
my_values <- my_cols[names(my_cols) %in% c("Seurat De", "SCEPTRE")]
# Frangieh QQ plot
qq_frangieh <- undercover_res |>
mutate(Method = fct_relevel(Method, "SCEPTRE", after = Inf)) |>
filter(dataset == "frangieh_control_gene",
method %in% c("sceptre", "seurat_de")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
# ggtitle("Frangieh (IFN-\u03B3) neg. controls") +
ggtitle("Frangieh (Control) neg. controls") +
scale_color_manual(values = my_values) +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.25, 0.86),
legend.text = element_text(size = 11),
legend.margin = margin(t = 0, unit = 'cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
# Papalexi QQ plot
qq_papalexi <- undercover_res |>
mutate(Method = fct_relevel(Method, "SCEPTRE", after = Inf)) |>
filter(dataset == "papalexi_eccite_screen_gene",
method %in% c("sceptre", "seurat_de")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle("Papalexi (gene) neg. controls") +
scale_color_manual(values = my_values) +
my_theme_no_legend
qq_frangieh
qq_papalexi
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
head(pc_res)
nrow(pc_res)
tail(pc_res)
pc_res$method <- as.character(pc_res$method)
pc_res$method |> head(10)
pc_res_2 <- pc_res |> dplyr::filter(method != "sceptre")
pc_res_2$method <- factor(pc_res_2$method)
pc_res_2
pc_res_2$method
saveRDS(object = pc_res_2, file = paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
args <- "false pos_control_pairs_grouped.rds frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene papalexi/eccite_screen/protein schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene"
args <- "false pos_control_pairs_grouped.rds frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene papalexi/eccite_screen/protein schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene" |> .split_args()
args
trial <- as.logical(args[1])
trial
pairs_to_analyze_file <- args[2]
pairs_to_analyze_file
datasets <- args[seq(3, length(args))] |> unique()
datasets
# loop over datasets, outputting the positive control pairs
out <- NULL
i <- 1
dataset_name <- datasets[i]
dataset_name
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/tf_pairs_grouped.rds"))
pairs_to_analyze_file
df <- readRDS(paste0(sceptre2_dir, dataset_name, pairs_to_analyze_file))
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
df <- readRDS(paste0(sceptre2_dir, dataset_name, pairs_to_analyze_file))
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_to_analyze_file))
df
n_grnas <- length(unique(df$grna_group))
n_grnas
my_idxs <- seq(1L, n_grnas)
my_idxs
out <- c(out, paste(dataset_name, if (trial) 1L else my_idxs))
out
args <- "frangieh/ifn_gamma/gene 0 sceptre assignment pos_control_pairs_grouped.rds false" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
if (length(args) >= 7) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality
pairs_file
trial <- as.logical(args[6])
trial
if (length(args) >= 7) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
head(response_grna_group_pairs)
idx > 0
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
trial && nrow(response_grna_group_pairs) >= 5
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list$response_grna_group_pairs
pairs_file
result_df <- do.call(what = method_name, args = to_pass_list)
