library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
shared_fig_script <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"
)
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
# results of undercover analysis
undercover_res <- readRDS(paste0(
result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0423_processed.rds"
)) |>
filter(
n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF
) |>
mutate(Method = forcats::fct_recode(Method,
"SCEPTRE" = "Sceptre",
"t-test" = "Liscovitch Method",
"MAST" = "Schraivogel Method",
"KS test" = "Weissman Method",
"MIMOSCA" = "Mimosca"
)) |>
mutate(dataset_rename = forcats::fct_recode(dataset_rename,
"Frangieh (Co Culture)" = "Frangieh Co Culture Gene",
"Frangieh (Control)" = "Frangieh Control Gene",
"Frangieh (IFN-\u03B3)" = "Frangieh Ifn Gamma Gene",
"Papalexi (Gene)" = "Papalexi Eccite Screen Gene",
"Papalexi (Protein)" = "Papalexi Eccite Screen Protein",
"Schraivogel" = "Schraivogel Enhancer Screen",
"Simulated" = "Simulated Experiment 1 Gene"
))
n_false_rejections <- undercover_res |>
filter(!(Method %in% c(c("Nb Regression No Covariates",
"Nb Regression W Covariates",
"Sceptre No Covariates")))) |>
group_by(dataset_rename, Method) |>
summarize(n_false_reject = sum(p_value < alpha/n()),
Method = Method[1],
`NT pairs` = n(),
.groups = "drop")
# read colors from my_cols
my_values <- my_cols[names(my_cols) %in% c("Seurat De", "SCEPTRE")]
# Frangieh QQ plot
qq_frangieh <- undercover_res |>
mutate(Method = fct_relevel(Method, "SCEPTRE", after = Inf)) |>
filter(dataset == "frangieh_control_gene",
method %in% c("sceptre", "seurat_de")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
# ggtitle("Frangieh (IFN-\u03B3) neg. controls") +
ggtitle("Frangieh (Control) neg. controls") +
scale_color_manual(values = my_values) +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.25, 0.86),
legend.text = element_text(size = 11),
legend.margin = margin(t = 0, unit = 'cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
# Papalexi QQ plot
qq_papalexi <- undercover_res |>
mutate(Method = fct_relevel(Method, "SCEPTRE", after = Inf)) |>
filter(dataset == "papalexi_eccite_screen_gene",
method %in% c("sceptre", "seurat_de")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle("Papalexi (gene) neg. controls") +
scale_color_manual(values = my_values) +
my_theme_no_legend
qq_frangieh
qq_papalexi
library(lowmoi)
library(tidyverse)
conflicts_prefer(dplyr::filter)
sceptre2_results_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
sample_size_df <- readRDS(paste0(sceptre2_results_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
# pc result
pc_res <- readRDS(paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
head(pc_res)
nrow(pc_res)
tail(pc_res)
pc_res$method <- as.character(pc_res$method)
pc_res$method |> head(10)
pc_res_2 <- pc_res |> dplyr::filter(method != "sceptre")
pc_res_2$method <- factor(pc_res_2$method)
pc_res_2
pc_res_2$method
saveRDS(object = pc_res_2, file = paste0(sceptre2_results_dir, "positive_control_analysis/pc_results_0423.rds"))
args <- "false pos_control_pairs_grouped.rds frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene papalexi/eccite_screen/protein schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene"
args <- "false pos_control_pairs_grouped.rds frangieh/co_culture/gene frangieh/control/gene frangieh/ifn_gamma/gene papalexi/eccite_screen/gene papalexi/eccite_screen/protein schraivogel/enhancer_screen_chr11/gene schraivogel/enhancer_screen_chr8/gene" |> .split_args()
args
trial <- as.logical(args[1])
trial
pairs_to_analyze_file <- args[2]
pairs_to_analyze_file
datasets <- args[seq(3, length(args))] |> unique()
datasets
# loop over datasets, outputting the positive control pairs
out <- NULL
i <- 1
dataset_name <- datasets[i]
dataset_name
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/tf_pairs_grouped.rds"))
pairs_to_analyze_file
df <- readRDS(paste0(sceptre2_dir, dataset_name, pairs_to_analyze_file))
#!/usr/bin/env Rscript
sceptre2_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
df <- readRDS(paste0(sceptre2_dir, dataset_name, pairs_to_analyze_file))
df <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_to_analyze_file))
df
n_grnas <- length(unique(df$grna_group))
n_grnas
my_idxs <- seq(1L, n_grnas)
my_idxs
out <- c(out, paste(dataset_name, if (trial) 1L else my_idxs))
out
args <- "frangieh/ifn_gamma/gene 0 sceptre assignment pos_control_pairs_grouped.rds false" |> .split_args()
args
dataset_name <- args[1]
idx <- as.integer(args[2])
method_name <- args[3]
grna_modality <- args[4]
pairs_file <- args[5]
trial <- as.logical(args[6])
if (length(args) >= 7) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
dataset_name
idx
method_name
grna_modality
pairs_file
trial <- as.logical(args[6])
trial
if (length(args) >= 7) {
optional_args <- args[seq(6, length(args))]
} else {
optional_args <- NULL
}
optional_args
# Load packages
library(ondisc)
library(lowmoi)
# read response matrix and grna expression matrix
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- load_dataset_modality(grna_dataset_name)
# update the gene-grna groups and grna ODM, if running a singleton experiment
response_grna_group_pairs <- readRDS(paste0(sceptre2_dir, dataset_name, "/", pairs_file))
head(response_grna_group_pairs)
idx > 0
# if idx > 0, slice the response grna group pairs accordingly
if (idx > 0) {
unique_grna_groups <- response_grna_group_pairs$grna_group |> unique()
curr_grna_group <- as.character(unique_grna_groups[idx])
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::filter(grna_group == curr_grna_group)
}
trial && nrow(response_grna_group_pairs) >= 5
if (trial && nrow(response_grna_group_pairs) >= 5) {
response_grna_group_pairs <- response_grna_group_pairs |> dplyr::sample_n(5)
}
# add additional args
to_pass_list <- list(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs)
if (!is.null(optional_args)) { # if there are optional arguments specified, add them to the list
optional_args <- strsplit(x = optional_args, split = ":") |> unlist()
values_vect <- NULL
names_vect <- NULL
for (str in optional_args) {
str_split <- strsplit(x = str, split = "=", fixed = TRUE)[[1]]
values_vect <- c(values_vect, str_split[2])
names_vect <- c(names_vect, str_split[1])
}
to_append_list <- purrr::set_names(as.list(values_vect), names_vect)
to_pass_list <- c(to_pass_list, to_append_list)
}
to_pass_list$response_grna_group_pairs
pairs_file
result_df <- do.call(what = method_name, args = to_pass_list)
# Load packages
library(tidyverse)
library(katlabutils)
library(ggpubr)
library(grid)
library(gridExtra)
library(gtable)
# Resolve namespace conflicts
conflicts_prefer(dplyr::filter)
#################################################################
# Set analysis parameters
#################################################################
reject_thresh <- 1e-5   # threshold for rejection of positive controls
alpha <- 0.1            # target FWER level for negative controls
max_false_reject <- 50  # maximum false rejections to display power
#################################################################
# Load results
#################################################################
# source shared figure script
shared_fig_script <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"
)
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
# results of undercover analysis
undercover_res <- readRDS(paste0(
result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds"
)) |>
filter(
n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF
)
# results of positive control analysis
pc_res <- readRDS(paste0(
result_dir,
"positive_control_analysis/pc_results_0523_processed.rds"
)) |>
dplyr::filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF)
#################################################################
# Process negative control results into final table
#################################################################
n_false_rejections <- undercover_res |>
filter(!(Method %in% c(c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)")))) |>
group_by(dataset_rename, Method) |>
summarize(n_false_reject = sum(p_value < alpha/n()),
Method = Method[1],
`NT pairs` = n(),
.groups = "drop")
n_false_rejections_tab <- n_false_rejections |>
pivot_wider(names_from = Method, values_from = n_false_reject) |>
relocate("SCEPTRE", .after = "dataset_rename") |>
relocate(`NT pairs`, .after = `KS test`) |>
rename(Dataset = dataset_rename)
n_false_rejections_tab <- n_false_rejections_tab |>
mutate(across(everything(), as.character)) |>
bind_rows(
n_false_rejections_tab |>
summarise(across(-c(Dataset, `NT pairs`), mean)) |>
mutate(Dataset = "Average") |>
mutate(across(-Dataset, function(x)(as.character(round(x, 1)))))
)  |>
mutate(`NT pairs` = ifelse(is.na(`NT pairs`), "", `NT pairs`))
n_false_rejections_tab <- n_false_rejections_tab[,c("Dataset", "SCEPTRE", "Seurat-Wilcox", "Seurat-NB", "t-test", "MAST", "KS test", "MIMOSCA", "NT pairs")]
colnames(n_false_rejections_tab)[colnames(n_false_rejections_tab) == "Seurat-Wilcox"] <- "Seurat-\nWilcox"
colnames(n_false_rejections_tab)[colnames(n_false_rejections_tab) == "Seurat-NB"] <- "Seurat-\nNB"
colnames(n_false_rejections_tab)[colnames(n_false_rejections_tab) == "NT pairs"] <- "NT\npairs"
#################################################################
# Process positive control results
#################################################################
n_true_rejections_tab <- pc_res |>
filter(n_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_control >= N_NONZERO_CONTROL_CUTOFF) |>
group_by(dataset_rename, Method) |>
summarize(n_pc_reject = sum(p_value < reject_thresh),
`PC pairs` = n(),
Method = Method[1],
.groups = "drop") |>
group_by(dataset_rename) |>
left_join(n_false_rejections,
by = c("dataset_rename", "Method")) |>
mutate(n_pc_reject = ifelse(n_false_reject <= max_false_reject,
as.character(n_pc_reject),
"-")) |>
select(dataset_rename, Method, n_pc_reject, `PC pairs`) |>
pivot_wider(names_from = Method, values_from = n_pc_reject) |>
relocate("SCEPTRE", .after = "dataset_rename") |>
relocate(`PC pairs`, .after = `KS test`) |>
rename(Dataset = dataset_rename)
n_true_rejections_tab <- n_true_rejections_tab[,c("Dataset", "SCEPTRE", "Seurat-Wilcox", "Seurat-NB", "t-test", "MAST", "KS test", "MIMOSCA", "PC pairs")]
colnames(n_true_rejections_tab)[colnames(n_true_rejections_tab) == "Seurat-Wilcox"] <- "Seurat-\nWilcox"
colnames(n_true_rejections_tab)[colnames(n_true_rejections_tab) == "Seurat-NB"] <- "Seurat-\nNB"
colnames(n_true_rejections_tab)[colnames(n_true_rejections_tab) == "PC pairs"] <- "PC\npairs"
#################################################################
# Helper code for tables
#################################################################
# From https://cran.r-project.org/web/packages/gridExtra/vignettes/tableGrob.html
find_cell <- function(table, row, col, name="core-fg"){
l <- table$layout
which(l$t==row & l$l==col & l$name==name)
}
# set the theme for the table
table_theme <- ttheme_default(core=list(fg_params=list(hjust=1, x=0.9)),
base_size = 10)
#################################################################
# Format Type-I error table
#################################################################
# create gtable for negative control table
nt_table_g <- tableGrob(n_false_rejections_tab, theme = table_theme, rows = NULL)
# add bold font for lowest numbers of false rejections
for (row_idx in seq(1, nrow(n_false_rejections_tab))) {
row <- as.integer(n_false_rejections_tab[row_idx, seq(2, 8L)])
col_idxs <- which(row == min(row))
for (col_idx in col_idxs) {
nt_table_g$grobs[find_cell(nt_table_g, row_idx + 1L, col_idx + 1L, "core-fg")][[1]][["gp"]] <- gpar(fontface="bold")
}
}
# add horizontal line separating the average row from the rest
nt_table_g <- gtable_add_grob(nt_table_g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(1,"npc"),
y1 = unit(0,"npc"),
gp = gpar(lwd = 4.0)),
t = 8, b = 8, l = 1, r = 9)
# add vertical line separating the NT pairs column from the rest
nt_table_g <- gtable_add_grob(nt_table_g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(0,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 4.0)),
t = 8, b = 1, l = 9, r = 9)
# add vertical line separating the dataset column from the rest
nt_table_g <- gtable_add_grob(nt_table_g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(0,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 4.0)),
t = 9, b = 1, l = 2, r = 2)
# add title to the table
title <- textGrob("Number of false positives",gp=gpar(fontsize=12))
padding <- unit(5,"mm")
nt_table_g <- gtable_add_rows(
nt_table_g,
heights = grobHeight(title) + padding,
pos = 0)
nt_table_g <- gtable_add_grob(
nt_table_g,
title,
1, 1, 1, ncol(nt_table_g))
# left-justify the first column
id <- which(grepl("core-fg", nt_table_g$layout$name ) & nt_table_g$layout$l == 1 )
for (i in id) {
nt_table_g$grobs[[i]]$x <- unit(0.05, "npc")
nt_table_g$grobs[[i]]$hjust <- 0
}
#################################################################
# Format power table
#################################################################
# create gtable for positive control table
pc_table_g <- tableGrob(n_true_rejections_tab, theme = table_theme, rows = NULL)
# add bold font for lowest numbers of false rejections
for (row_idx in seq(1, nrow(n_true_rejections_tab))) {
row <- as.integer(n_true_rejections_tab[row_idx, seq(2, 8L)])
row[is.na(row)] <- 0L
col_idxs <- which(row == max(row))
for (col_idx in col_idxs) {
pc_table_g$grobs[find_cell(pc_table_g, row_idx + 1L, col_idx + 1L, "core-fg")][[1]][["gp"]] <- gpar(fontface="bold")
}
}
# add line separating the PC pairs column from the rest
pc_table_g <- gtable_add_grob(pc_table_g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(0,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 4.0)),
t = 7, b = 1, l = 9, r = 9)
# add line separating the dataset column from the rest
pc_table_g <- gtable_add_grob(pc_table_g,
grobs = segmentsGrob(
x0 = unit(0,"npc"),
y0 = unit(0,"npc"),
x1 = unit(0,"npc"),
y1 = unit(1,"npc"),
gp = gpar(lwd = 4.0)),
t = 7, b = 1, l = 2, r = 2)
# add title
title <- textGrob("Number of true positives",gp=gpar(fontsize=12))
padding <- unit(5,"mm")
pc_table_g <- gtable_add_rows(
pc_table_g,
heights = grobHeight(title) + padding,
pos = 0)
pc_table_g <- gtable_add_grob(
pc_table_g,
title,
1, 1, 1, ncol(pc_table_g))
# left justify the first column
id <- which(grepl("core-fg", pc_table_g$layout$name ) & pc_table_g$layout$l == 1 )
for (i in id) {
pc_table_g$grobs[[i]]$x <- unit(0.05, "npc")
pc_table_g$grobs[[i]]$hjust <- 0
}
#################################################################
# Create QQ plots
#################################################################
# read colors from my_cols
my_values <- my_cols[names(my_cols) %in% c("Seurat-Wilcox", "Seurat-NB", "SCEPTRE")]
# Frangieh QQ plot
qq_frangieh <- undercover_res |>
mutate(Method = fct_relevel(Method, "Seurat-Wilcox", "SCEPTRE", after = Inf)) |>
filter(dataset == "frangieh_ifn_gamma_gene",
method %in% c("sceptre", "seurat_de", "seurat_de_nb")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-10, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
# ggtitle("Frangieh (IFN-\u03B3) neg. controls") +
ggtitle("Frangieh (IFN-\u03B3) neg. controls") +
scale_color_manual(values = my_values) +
my_theme +
theme(legend.title = element_blank(),
legend.position = c(0.25, 0.86),
legend.text = element_text(size = 11),
legend.margin = margin(t = 0, unit = 'cm')) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.2,
default.unit = "inch",
override.aes = list(size = 2.5)))
# Papalexi QQ plot
qq_papalexi <- undercover_res |>
mutate(Method = fct_relevel(Method, "Seurat-Wilcox", "SCEPTRE", after = Inf)) |>
filter(dataset == "papalexi_eccite_screen_gene",
method %in% c("sceptre", "seurat_de", "seurat_de_nb")) |>
ggplot(mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-9, size = 0.85) +
stat_qq_band() +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
ggtitle("Papalexi (gene) neg. controls") +
scale_color_manual(values = my_values) +
my_theme_no_legend
#################################################################
# Put the pieces together and save
#################################################################
# put the pieces together
final_plot <- ggarrange(
ggarrange(qq_frangieh, qq_papalexi, nrow = 1),
as_ggplot(nt_table_g),
as_ggplot(pc_table_g),
labels = "auto",
heights = c(1.2, 1, 0.8),
ncol = 1
)
# define the file path
fig_4_filename <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_4/fig_4.png"
)
final_plot
ggarrange(qq_frangieh, qq_papalexi, nrow = 1)
cowplot::plot_grid(qq_frangieh, qq_papalexi, nrow = 1)
cowplot::plot_grid(qq_frangieh, qq_papalexi, nrow = 1, labels = c("a", "b"))
# put the pieces together
final_plot <- ggarrange(
# ggarrange(qq_frangieh, qq_papalexi, nrow = 1),
cowplot::plot_grid(qq_frangieh, qq_papalexi, nrow = 1, labels = c("a", "b")),
as_ggplot(nt_table_g),
as_ggplot(pc_table_g),
labels = c("", "c", "d"),
heights = c(1.2, 1, 0.8),
ncol = 1
)
final_plot
# define the file path
fig_4_filename <- paste0(
.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_4/fig_4.png"
)
# save the figure
ggsave(filename = fig_4_filename,
plot = final_plot,
device = "png",
width = 7,
height = 8.5,
bg = "white")
