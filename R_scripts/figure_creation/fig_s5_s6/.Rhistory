legend.title = element_blank()) +
guides(color = guide_legend(
keywidth = 0.0,
keyheight = 0.15,
default.unit = "inch",
override.aes = list(size = 2.5))) +
scale_color_manual(values = pannel_f_cols, name = "N treatment cells with nonzero expression") +
ggtitle("NB reg. calibration on Frangieh IFN-\u03B3")
############
# CREATE FIG
############
fig <- cowplot::plot_grid(p_a, p_b,
p_c, p_d,
p_e, p_f, ncol = 2, labels = "auto", align = "vh", axis = "l")
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_2/fig_2.png")
ggsave(filename = to_save_fp, plot = fig, device = "png",
scale = 1.1, width = 6.5, height = 7, dpi = 330)
library(tidyverse)
source(paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R"))
sceptre2_dir <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
# load the dataset sparsity results; determine mean sparsity level of gene modality, protein modality, and TAP-seq
frac_n_nonzero_df <- readRDS(paste0(sceptre2_dir, "/results/dataset_sample_sizes/frac_entries_zero.rds"))
gene_modality_sparsity <-
c(frac_n_nonzero_df |> dplyr::filter(paper == "frangieh", dataset == "co_culture", modality == "gene") |> pull(prop_zero),
frac_n_nonzero_df |> dplyr::filter(paper == "frangieh", dataset == "control", modality == "gene") |> pull(prop_zero),
frac_n_nonzero_df |> dplyr::filter(paper == "frangieh", dataset == "ifn_gamma", modality == "gene") |> pull(prop_zero),
frac_n_nonzero_df |> dplyr::filter(paper == "papalexi", dataset == "eccite_screen", modality == "gene") |> pull(prop_zero)) |> mean()
tap_modality_sparsity <-
c(frac_n_nonzero_df |> dplyr::filter(paper == "schraivogel", dataset == "enhancer_screen_chr11") |> pull(prop_zero),
frac_n_nonzero_df |> dplyr::filter(paper == "schraivogel", dataset == "enhancer_screen_chr8") |> pull(prop_zero)) |>
mean()
protein_modality_sparsity <- frac_n_nonzero_df |> dplyr::filter(paper == "papalexi", dataset == "eccite_screen", modality == "protein") |> pull(prop_zero)
# there are three parameters:
# 1. the number of nonzero treatment cells threshold (7)
# 2. the sparsity
# 3. the probability that a pair passes pairwise QC
# we hold fixed the number of nonzero treatment cells threshold
# we vary the sparisty over the grid; the first entry represents a standard single-cell experiment, the second a TAP-seq experiment, and the final an experiment with protein readout
# similarly, we vary the fraction of pairs surviving pairwise QC over the grid (0.5, ..., 0.95)
# we compute the number of cells per perturbation required such that x% of pairs survive pairwise QC
sparsity_levels <- c(gene_modality_sparsity, tap_modality_sparsity, protein_modality_sparsity) |> round(2)
fractions_pass <- seq(from = 0.5, to = 0.99, by = 0.01)
n_nonzero_trt_threshes <- c(7, 14)
df <- sapply(sparsity_levels, function(sparsity_level) {
sapply(fractions_pass, function(fraction_pass) {
sapply(n_nonzero_trt_threshes, function(n_nonzero_trt_thresh) {
curr_n_cells <- 1L
repeat {
pass_qc <- qbinom(p = fraction_pass, size = curr_n_cells,
prob = 1 - sparsity_level, lower.tail = FALSE) >= n_nonzero_trt_thresh
if (pass_qc) {
break
} else {
curr_n_cells <- curr_n_cells + 1L
}
}
data.frame(sparsity_level = sparsity_level, fraction_pass = fraction_pass,
n_cells = curr_n_cells, n_nonzero_trt_thresh = n_nonzero_trt_thresh)
}, simplify = FALSE)
}, simplify = FALSE)
}, simplify = FALSE) |> unlist(recursive = FALSE) |> unlist(recursive = FALSE) |>
data.table::rbindlist() |>
mutate(sparsity_level = factor(sparsity_level),
n_nonzero_trt_thresh = paste0("N nonzero treat thresh = ", n_nonzero_trt_thresh) |> forcats::fct_relevel("N nonzero treat thresh = 7"))
# make plot
p <- ggplot(data = df, mapping = aes(x = fraction_pass * 100, y = n_cells, col = sparsity_level)) +
geom_line(linewidth = 0.9) + theme_bw() + facet_grid(. ~ n_nonzero_trt_thresh) +
scale_y_continuous(breaks = c(0, 10, 20, 40, 60, 80, 100, 120)) +
xlab("Percent pairs passing QC") + ylab("N cells per perturbation") +
labs(color = "Sparsity") +
theme(legend.key.size = unit(0.35, 'cm'),
legend.margin = margin(t = -0.5, unit = 'cm'),
axis.title.y = element_text(margin = margin(t = 0, r = 15, b = 0, l = 0)),
plot.title = element_text(hjust = 0.5, size = 10)) +
ggtitle("N cells per perturbation vs.percent pairs passing QC") +
scale_color_manual(values = c("dodgerblue3", "darkorchid3", "firebrick3"))
# how many needed cells needed to for 90% of pairs to pass QC for a standard gene expression assay?
df |> dplyr::filter(sparsity_level == 0.78, fraction_pass == 0.9) # 46 cells for standard QC threshold, and roughly twice as many -- 84 -- for the more stringent pairwise QC threshold.
# save the plot
to_save_fp <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s10/fig_s10.png")
ggsave(filename = to_save_fp, plot = p, device = "png", width = 6, height = 3, dpi = 330)
library(ggplot2)
library(katlabutils)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
library(ggplot2)
library(katlabutils)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds") |> file.exists()
# results of undercover analysis
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf)) |>
dplyr::filter(dataset %in% c("frangieh_ifn_gamma_gene", "papalexi_eccite_screen_gene"))
head(undercover_res)
# for two of the datasets, cut the effective sample size into four intervals; then, plot each method, faceting by effective sample size
undercover_res_w_bin <- undercover_res |>
dplyr::group_by(dataset) |>
dplyr::mutate(n_nonzero_trt_bin = bin(n_nonzero_treatment, 4L))
my_methods <- c("KS test", "MAST", "MIMOSCA", "t-test", "Seurat-Wilcox", "Seurat-NB", "SCEPTRE")
my_values <- my_cols[names(my_cols) %in% my_methods]
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(katlabutils)
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
# results of undercover analysis
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf)) |>
dplyr::filter(dataset %in% c("frangieh_ifn_gamma_gene", "papalexi_eccite_screen_gene"))
# for two of the datasets, cut the effective sample size into four intervals; then, plot each method, faceting by effective sample size
undercover_res_w_bin <- undercover_res |>
dplyr::group_by(dataset) |>
dplyr::mutate(n_nonzero_trt_bin = bin(n_nonzero_treatment, 4L))
my_methods <- c("KS test", "MAST", "MIMOSCA", "t-test", "Seurat-Wilcox", "Seurat-NB", "SCEPTRE")
my_values <- my_cols[names(my_cols) %in% my_methods]
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), guide = guide_axis(n.dodge=3)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
1e-0
my_breaks <- c(1e-0, 1e-3, 1e-6)
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
my_breaks <- c(1e-0, 1e-3, 1e-6, 1e-9)
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
scale_x_continuous
my_y_breaks <- c(1e-0, 1e-3, 1e-6)
my_x_breaks <- c(1e-0, 1e-2, 1e-4)
my_y_breaks <- c(1e-0, 1e-3, 1e-6)
my_x_breaks <- c(1e-0, 1e-2, 1e-4)
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_gamma
p_papalexi <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 9),
legend.margin = margin(t = 0, unit = "cm"),
legend.key=element_blank()) +
guides(color = guide_legend(
override.aes = list(size = 2.5, fill = NA)))
p_papalexi
p_papalexi <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10)) +
scale_y_continuous(trans = revlog_trans(10)) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 9),
legend.margin = margin(t = 0, unit = "cm"),
legend.key=element_blank()) +
guides(color = guide_legend(
override.aes = list(size = 2.5, fill = NA)))
p_papalexi <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 9),
legend.margin = margin(t = 0, unit = "cm"),
legend.key=element_blank()) +
guides(color = guide_legend(
override.aes = list(size = 2.5, fill = NA)))
legend <- cowplot::get_legend(p_papalexi)
p_papalexi <- p_papalexi + my_theme_no_legend + ylab("")
p_papalexi
head(undercover_res_w_bin)
undercover_res_w_bin$dataset |> unique
undercover_res_w_bin$dataset |> unique()
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf))
head(undercover_res)
undercover_res$dataset |> unique()
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf)) |>
dplyr::filter(dataset %in% c("frangieh_ifn_gamma_gene", "papalexi_eccite_screen_gene",
"frangieh_co_culture_gene", "schraivogel_enhancer_screen"))
# for two of the datasets, cut the effective sample size into four intervals; then, plot each method, faceting by effective sample size
undercover_res_w_bin <- undercover_res |>
dplyr::group_by(dataset) |>
dplyr::mutate(n_nonzero_trt_bin = bin(n_nonzero_treatment, 4L))
my_methods <- c("KS test", "MAST", "MIMOSCA", "t-test", "Seurat-Wilcox", "Seurat-NB", "SCEPTRE")
my_values <- my_cols[names(my_cols) %in% my_methods]
my_y_breaks <- c(1e-0, 1e-3, 1e-6)
my_x_breaks <- c(1e-0, 1e-2, 1e-4)
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
undercover_res_w_bin$dataset |> unique()
p_schraivogel <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "schraivogel_enhancer_screen"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_schraivogel
p_schraivogel <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_co_culture_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_schraivogel
shared_fig_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/shared_figure_script.R")
source(shared_fig_script)
# directory with results
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
# results of undercover analysis
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf)) |>
dplyr::filter(dataset %in% c("frangieh_ifn_gamma_gene", "papalexi_eccite_screen_gene",
"frangieh_control_gene", "schraivogel_enhancer_screen"))
# for two of the datasets, cut the effective sample size into four intervals; then, plot each method, faceting by effective sample size
undercover_res_w_bin <- undercover_res |>
dplyr::group_by(dataset) |>
dplyr::mutate(n_nonzero_trt_bin = bin(n_nonzero_treatment, 4L))
undercover_res$dataset |> unique()
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf))
undercover_res$dataset |> unique()
# results of undercover analysis
undercover_res <- readRDS(paste0(result_dir,
"undercover_grna_analysis/undercover_result_grp_1_0523_processed.rds")) |>
dplyr::filter(n_nonzero_treatment >= N_NONZERO_TREATMENT_CUTOFF,
n_nonzero_control >= N_NONZERO_CONTROL_CUTOFF) |>
dplyr::filter(!(Method %in% c("NB regression (no covariates)",
"NB regression (w/ covariates)",
"SCEPTRE (no covariates)"))) |>
dplyr::mutate(Method = forcats::fct_relevel(Method, "SCEPTRE", after = Inf)) |>
dplyr::filter(dataset %in% c("frangieh_ifn_gamma_gene", "papalexi_eccite_screen_gene",
"frangieh_control_gene", "simulated_experiment_1_gene"))
# for two of the datasets, cut the effective sample size into four intervals; then, plot each method, faceting by effective sample size
undercover_res_w_bin <- undercover_res |>
dplyr::group_by(dataset) |>
dplyr::mutate(n_nonzero_trt_bin = bin(n_nonzero_treatment, 4L))
my_methods <- c("KS test", "MAST", "MIMOSCA", "t-test", "Seurat-Wilcox", "Seurat-NB", "SCEPTRE")
my_values <- my_cols[names(my_cols) %in% my_methods]
my_y_breaks <- c(1e-0, 1e-3, 1e-6)
my_x_breaks <- c(1e-0, 1e-2, 1e-4)
p_frangieh_gamma <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_ifn_gamma_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_schraivogel <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_co_culture_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
undercover_res_w_bin$dataset |> unique()
p_frangieh_control <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "frangieh_control_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_frangieh_control
p_simulated <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "simulated_experiment_1_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
my_theme_no_legend
p_simulated
p_papalexi <- ggplot(data = undercover_res_w_bin |>
dplyr::filter(dataset == "papalexi_eccite_screen_gene"),
mapping = aes(y = p_value, col = Method)) +
stat_qq_points(ymin = 1e-8, size = 0.55) +
stat_qq_band() +
facet_grid(n_nonzero_trt_bin ~ dataset_rename) +
scale_x_continuous(trans = revlog_trans(10), breaks = my_x_breaks) +
scale_y_continuous(trans = revlog_trans(10), breaks = my_y_breaks) +
labs(x = "Expected null p-value", y = "Observed p-value") +
geom_abline(col = "black") +
scale_color_manual(values = my_values) +
theme(legend.title = element_blank(),
legend.position = "bottom",
legend.text = element_text(size = 9),
legend.margin = margin(t = 0, unit = "cm"),
legend.key=element_blank()) +
guides(color = guide_legend(
override.aes = list(size = 2.5, fill = NA)))
legend <- cowplot::get_legend(p_papalexi)
p_papalexi <- p_papalexi + my_theme_no_legend + ylab("")
p_combined_1 <- cowplot::plot_grid(cowplot::plot_grid(p_frangieh, p_papalexi, ncol = 2),
legend, rel_heights = c(0.93, 0.07), nrow = 2)
p_combined_1 <- cowplot::plot_grid(cowplot::plot_grid(p_frangieh_gamma, p_papalexi, ncol = 2),
legend, rel_heights = c(0.93, 0.07), nrow = 2)
p_combined_2 <- cowplot::plot_grid(cowplot::plot_grid(p_frangieh_control, p_simulated, ncol = 2),
legend, rel_heights = c(0.93, 0.07), nrow = 2)
p_combined_1
p_combined_2
# save figures 1 and 2
to_save_fp_1 <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4_a.png")
to_save_fp_2 <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4_b.png")
# create figures 1 and 2
p_combined_a <- cowplot::plot_grid(cowplot::plot_grid(p_frangieh_gamma, p_papalexi, ncol = 2),
legend, rel_heights = c(0.93, 0.07), nrow = 2)
p_combined_b <- cowplot::plot_grid(cowplot::plot_grid(p_frangieh_control, p_simulated, ncol = 2),
legend, rel_heights = c(0.93, 0.07), nrow = 2)
# save figures 1 and 2
to_save_fp_a <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4_a.png")
to_save_fp_b <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/figure_creation/fig_s4/fig_s4_b.png")
ggsave(filename = to_save_fp_a, plot = p_combined_a, device = "png", scale = 1.1, width = 6.5, height = 7.0, dpi = 330)
ggsave(filename = to_save_fp_b, plot = p_combined_a, device = "png", scale = 1.1, width = 6.5, height = 7.0, dpi = 330)
ggsave(filename = to_save_fp_b, plot = p_combined_b, device = "png", scale = 1.1, width = 6.5, height = 7.0, dpi = 330)
