calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS()
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(utilities)
library(ggplot2)
library(cowplot)
# first, seurat method
seurat_p <- calibration_result |> dplyr::filter(method == "seurat_de") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Seurat DE method")
devtools::install_github("Katsevich-Lab/katlabutils")
i
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS()
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# first, seurat method
seurat_p <- calibration_result |> dplyr::filter(method == "seurat_de") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Seurat DE method")
seurat_p
# next, schraivogel method
schraivogel_p <- calibration_result |> dplyr::filter(method == "schraivogel_method") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Schraivogel MAST method")
schraivogel_p
out_p <- cowplot::plot_grid(seurat_p, schraivogel_p, labels = c("a", "b"), nrow = 2)
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA.png"), plot = out_p, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
calibration_result
# next, make a plot of RAM and CPU usage
calibration_result |> dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram)
# next, make a plot of RAM and CPU usage
calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct()
# next, make a plot of RAM and CPU usage
calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method)
# next, make a plot of RAM and CPU usage
calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram))
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram))
to_plot
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram)) |>
dplyr::ungroup()
to_plot
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value")
to_plot
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"), labels = c("Time", "RAM")))
to_plot
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"), labels = c("Time (s)", "RAM (GB)")))
to_plot
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar()
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar(stat = "identity")
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar(stat = "identity") +
facet_wrap(.~metric)
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar(stat = "identity") +
facet_wrap(.~metric, scales = "free_y")
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar(stat = "identity") +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_bar(stat = "identity", col = method) +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = metric)) + geom_point(col = method) +
facet_wrap(.~metric, scales = "free_y") + ylab("")
to_plot
ggplot(to_plot, mapping = aes(x = dataset, y = metric, col = method)) + geom_point() +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, col = method)) + geom_point() +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, col = method)) + geom_bar() +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, col = method)) + geom_bar(stat = "identity") +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity") +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("")
head(to_plot)
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time), m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"), labels = c("Time (s)", "RAM (GB)")),
dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb")))
to_plot
ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("")
ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("") + xlab("Dataset")
ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("") + xlab("Dataset") + scale_x_discrete(guide = guide_axis(n.dodge = 2))
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA_compute.png"), plot = out_p2, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
out_p2 <- cowplot::plot_grid(seurat_p, schraivogel_p, labels = c("a", "b"), nrow = 2)
out_p2 <- ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("") + xlab("Dataset") + scale_x_discrete(guide = guide_axis(n.dodge = 2))
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA_compute.png"), plot = out_p2, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
out_p2 <- ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("") + xlab("Dataset") + scale_x_discrete(guide = guide_axis(n.dodge = 2)) + theme_bw()
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA_compute.png"), plot = out_p2, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA_compute.png"), plot = out_p2, device = "png", scale = 1.2, width = 6, height = 3, dpi = 320)
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS()
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method) |> table()
# first, seurat method
seurat_p <- calibration_result |> dplyr::filter(method == "seurat_de") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Seurat DE method")
# next, schraivogel method
schraivogel_p <- calibration_result |> dplyr::filter(method == "schraivogel_method") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Schraivogel MAST method")
out_p <- cowplot::plot_grid(seurat_p, schraivogel_p, labels = c("a", "b"), nrow = 2)
out_p
calibration_result
calibration_result
calibration_result
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method) |>
# first, seurat method
seurat_p <- calibration_result |> dplyr::filter(method == "seurat_de") |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw() +
ggtitle("Seurat DE method")
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
head()
head(calibration_result)
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
head(calibration_result)
calibration_result$method |> table
calibration_result$method |> table()
calibration_result
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
facet_wrap(~dataset, scales = "free") +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset) +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_result
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb")))
calibration_result
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("schraivogel Method", "Seurat DE")))
calibration_result
calibration_result |> head()
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method) |>
dplyr::mutate(method = factor)
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method) |>
dplyr::mutate(method = factor)
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method)
# check number of pairs analyzed by each method on each dataset
calibration_result |> dplyr::select(dataset, method)
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("Schraivogel_method", "seurat_de"),  labels = c("schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "PapalexiGgene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("Schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA.png"), plot = calibration_plot, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi Gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("Schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA.png"), plot = calibration_plot, device = "png", scale = 1.2, width = 6, height = 4, dpi = 320)
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time)/60, m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"), labels = c("Time (m)", "RAM (GB)")),
dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"),
labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb"))) |>
dplyr::mutate(value = ifelse(value < 1, 1.05, value))
out_p2 <- ggplot(to_plot, mapping = aes(x = dataset, y = value, fill = method)) + geom_bar(stat = "identity", position = "dodge") +
facet_wrap(.~metric, scales = "free_y") + ylab("") + xlab("Dataset") + scale_x_discrete(guide = guide_axis(n.dodge = 2)) + theme_bw() + scale_y_continuous(trans='log2')
ggsave(filename = paste0(code_dir, "figures/undercover_gRNA_compute.png"), plot = out_p2, device = "png", scale = 1.2, width = 6, height = 3, dpi = 320)
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi Gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("Schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
library(ggplot2)
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi Gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("Schraivogel Method", "Seurat DE")))
calibration_result <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_gRNA_check_results.rds") |> readRDS() |>
dplyr::mutate(dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"), labels = c("Schraivogel TAP", "Papalexi Gene", "Schraivogel Perturb")),
method = factor(x = method, levels = c("schraivogel_method", "seurat_de"),  labels = c("Schraivogel Method", "Seurat DE")))
code_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/")
library(katlabutils)
devtools::install_github("katsevich-lab/katlabutils")
library(katlabutils)
library(ggplot2)
library(cowplot)
# check number of pairs analyzed by each method on each dataset
calibration_plot <- calibration_result |>
ggplot(mapping = aes(y = p_value)) +
facet_grid(method ~ dataset, scales = "free_x") +
stat_qq_points(size = 0.7, ymin = 1e-10) +
stat_qq_band() +
geom_abline() +
scale_x_continuous(trans = revlog_trans(base = 10)) +
scale_y_continuous(trans = revlog_trans(base = 10)) +
labs(x = "Expected quantile", y = "Observed quantile") +
theme_bw()
calibration_plot
calibration_plot
# next, make a plot of RAM and CPU usage
to_plot <- calibration_result |>
dplyr::select(undercover_gRNA, dataset, method, clock_time, max_ram) |>
dplyr::distinct() |>
dplyr::group_by(dataset, method) |>
dplyr::summarize(m_clock_time = mean(clock_time)/60, m_max_ram = mean(max_ram)) |>
dplyr::ungroup() |>
tidyr::pivot_longer(cols = c("m_clock_time", "m_max_ram"),
names_to = "metric", values_to = "value") |>
dplyr::mutate(metric = factor(x = metric, levels = c("m_clock_time", "m_max_ram"), labels = c("Time (m)", "RAM (GB)")),
dataset = factor(x = dataset, levels = c("schraivogel_tap", "papalexi_gene", "schraivogel_perturb"),
labels = c("Schraivogel TAP", "Papalexi gene", "Schraivogel Perturb"))) |>
dplyr::mutate(value = ifelse(value < 1, 1.05, value))
to_plot
head(calibration_result)
nrow(calibration_result)
calibration_result
