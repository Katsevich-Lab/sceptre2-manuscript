undercover_res_fps
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
fig_dir
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
i <- 1
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::mutate(dataset_slash = replace_dataset_underscore_with_slash(dataset))
head(undercover_res)
undercover_res <- combine_schraivogel_enhancer_screens(undercover_res)
undercover_res$method |> unique()
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca", "sceptre")) |>
dplyr::mutate(dataset_slash = replace_dataset_underscore_with_slash(dataset))
undercover_res <- combine_schraivogel_enhancer_screens(undercover_res)
if (!perform_sanity_check(undercover_res)) {
stop("Sanity check failed.")
}
undercover_res <- update_dataset_names(undercover_res, TRUE)
undercover_res_no_chrom <- undercover_res |>
dplyr::filter(!(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin")))
undercover_res_chrom_only <- undercover_res |>
dplyr::filter(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin"))
# 1. create the qq-plots
trans_qq_plot <- make_trans_qq_plot(undercover_res_no_chrom)
untrans_qq_plot <- make_untrans_qq_plot(undercover_res_no_chrom)
lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_for_john_kat_aug_2022/")
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_aug_2022/")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
funct_script
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
library(future.apply)
i <- 1
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca", "sceptre")) |>
combine_schraivogel_enhancer_screens() |>
update_dataset_names(TRUE)
undercover_res_no_chrom <- undercover_res |>
dplyr::filter(!(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin")))
undercover_res_chrom_only <- undercover_res |>
dplyr::filter(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin"))
# 1. create the qq-plots
trans_qq_plot <- make_trans_qq_plot(undercover_res_no_chrom)
untrans_qq_plot <- make_untrans_qq_plot(undercover_res_no_chrom)
lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
ggsave(filename = paste0(fig_dir, "trans_qq_no_chrom_grp=", i, ".png"),
plot = trans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(filename = paste0(fig_dir, "untrans_qq_no_chrom_grp=", i, ".png"),
plot = untrans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
# 2. create n pairs rejected plots
n_rejected_df <- compute_n_bonf_rejected(undercover_res = undercover_res_no_chrom, alpha = 0.05)
n_rejected_plot <- make_n_rejected_pairs_plot(n_rejected_df = n_rejected_df, y_max = 1e5)
ggsave(filename = paste0(fig_dir, "barplot_no_chrom_grp=", i, ".png"),
plot = n_rejected_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_aug_2022/")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
library(future.apply)
i <- 1
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i])
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre")
head(undercover_res)
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre") |>
dplyr::select(-clock_time, -max_ram)
head(undercover_res)
head(undercover_res)
undercover_res |> dplyr::filter(p_value <= 0.01)
undercover_res |>
dplyr::filter(p_value <= 0.01) |>
dplyr::arrange(p_value)
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset = "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value)
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset == "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value)
sceptre_problem_pairs
head(sceptre_problem_pairs)
head()
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset == "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value) |> dplyr::select(-clock_time, -max_ram)
head(sceptre_problem_pairs)
sceptre_problem_pairs
sceptre_problem_pairs$undercover_grna |> table()
sceptre_problem_pairs
sceptre_problem_pairs$undercover_grna
saveRDS(object = sceptre_problem_pairs, file = "sceptre_problem_pairs_frangieh_control_gene.rds")
saveRDS(object = sceptre_problem_pairs, file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(sceptre_problem_pairs)
sceptre_problem_pairs
load_all("~/research_code/sceptre2/")
x <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(X)
head(x)
head(x)
x <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
x
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(problem_pairs)
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
problem_pairs |> head()
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
head(control_dir)
# obtain the multimodal odm
mm_fp <- paste0(tap_seq_dir, "multimodal_metadata.rds")
# obtain the multimodal odm
mm_fp <- paste0(control_dir, "multimodal_metadata.rds")
odm_fps <- paste0(control_dir, c("gene/matrix.odm", "grna_assignment/matrix.odm"))
mm_odm <- ondisc::read_multimodal_odm(odm_fps = odm_fps, multimodal_metadata_fp = mm_fp)
mm_odm
mm_fp
mm_odm
mm_odm@modalities$gene@misc
# set the additional args
form <- formula(~ log(gene_n_nonzero) + log(gene_n_umis) + batch)
response_modality_name <- "gene"
grna_modality_name <- "grna_expression"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# set the additional args
form <- mm_odm@modalities$gene@misc[["sceptre_formula"]]
form
response_modality_name <- "gene"
grna_modality_name <- "grna_expression"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
# step 1: check inputs; get the unique responses
cat("Checking inputs. ")
mm_odm <- check_ondisc_inputs(mm_odm = mm_odm,
response_grna_group_pairs = response_grna_group_pairs,
form = form,
response_modality_name = response_modality_name,
grna_modality_name = grna_modality_name,
grna_group_column_name = grna_group_column_name,
low_moi = TRUE)
# set the additional args
form <- mm_odm@modalities$gene@misc[["sceptre_formula"]]
response_modality_name <- "gene"
grna_modality_name <- "grna_assignment"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
# step 1: check inputs; get the unique responses
cat("Checking inputs. ")
mm_odm <- check_ondisc_inputs(mm_odm = mm_odm,
response_grna_group_pairs = response_grna_group_pairs,
form = form,
response_modality_name = response_modality_name,
grna_modality_name = grna_modality_name,
grna_group_column_name = grna_group_column_name,
low_moi = TRUE)
response_grna_group_pairs
heaD(problem_pairs)
head(problem_pairs)
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
# step 1: obtain cell-to-gRNA assignments
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
grna_odm
cat("Obtaining the cell-to-gRNA assignments.")
grna_group_info <- lowmoi::get_target_assignments_via_max_op(grna_odm) |> get_grna_group_info()
rm(grna_odm)
cat(crayon::green(' \u2713\n'))
head(grna_group_info)
lowmoi::get_target_assignments_via_max_op(grna_odm)
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
# step 1: obtain cell-to-gRNA assignments
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
cat("Obtaining the cell-to-gRNA assignments.")
grna_group_info <- lowmoi::get_target_assignments_via_max_op(grna_odm)
head(grna_group_info)
table(grna_group_info)
head(problem_pairs)
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
head(problem_pairs)
problem_pairs |> dplyr::sample(1)
problem_pairs |> dplyr::sample_n(1)
problem_pairs |> dplyr::sample_n(1)
19
random_pair <- problem_pairs |> dplyr::sample_n(1)
head(random_pair)
response_id <- random_pair$response_id; undercover_grna <- random_pair$undercover_grna
response_id
undercover_grna
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
undercover_grnas <- problem_pairs$undercover_grna |> unique()
get_sceptre_function_args_for_pair <- function(problem_pairs, undercover_grna) {
problem_responses <- problem_pairs |>
dplyr::filter(undercover_grna == !!undercover_grna) |>
dplyr::pull(response_id) |>
as.character()
dataset_name <- "frangieh/control/gene"
undercover_ntc_name_in <- undercover_grna
grna_modality <- "assignment"
response_odm <- lowmoi::load_dataset_modality(dataset_name)
grna_dataset_name <- lowmoi::get_grna_dataset_name(dataset_name, grna_modality)
grna_odm <- lowmoi::load_dataset_modality(grna_dataset_name)
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- grna_odm |> ondisc::get_feature_covariates()
grna_feature_covariates[undercover_ntc_name, "target"] <- "undercover"
if (!("non-targeting" %in% grna_feature_covariates$target)) {
stop("After performing label swap, `non-targeting` is no longer string in the `target` column.")
}
grna_odm_swapped <- grna_odm |> ondisc::mutate_feature_covariates(target = grna_feature_covariates$target)
response_grna_group_pairs <- data.frame(response_id = ondisc::get_feature_ids(response_odm),
grna_group = "undercover") |>
dplyr::filter(response_id %in% problem_responses)
response_odm <- response_odm; grna_odm <- grna_odm_swapped; response_grna_group_pairs <- response_grna_group_pairs
mm_odm <- lowmoi::process_multimodal_odm(ondisc::multimodal_ondisc_matrix(list(response = response_odm, grna = grna_odm)))
form <- mm_odm@modalities$response@misc$sceptre_formula
ret <- list(mm_odm = mm_odm,
response_grna_group_pairs = response_grna_group_pairs,
form = form,
response_modality_name = "response",
grna_modality_name = "grna",
grna_group_column_name = "target",
B = 1e5,
side = "both",
full_output = TRUE)
return(ret)
}
################
# ANALYSIS START
################
load_all("~/research_code/sceptre2/")
curr_undercover_grna <- as.character(sample(undercover_grnas, 1))
funct_args <- get_sceptre_function_args_for_pair(problem_pairs = problem_pairs,
undercover_grna = curr_undercover_grna)
funct_args$response_grna_group_pairs <- funct_args$response_grna_group_pairs |> dplyr::sample_n(15)
curr_problem_pairs <- problem_pairs |>
dplyr::filter(undercover_grna == curr_undercover_grna)
out <- do.call(what = run_sceptre_low_moi, args = funct_args) |> tibble::as_tibble()
################
# ANALYSIS START
################
load_all("~/research_code/sceptre2/")
i <- 1
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
plot_fitted_density_result_row(out[i,])
compute_ks_test_result_row(out[i,])
i <- 2
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
plot_fitted_density_result_row(out[i,])
i <- 3
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
plot_fitted_density_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
100000
100000000
1000000000
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
fig_dir
i <- 4
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 5
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
ggplot2::ggsave(filename = paste0(fig_dir, "resampling_dist_lowmoi.png"),
plot = p, device = "png", scale = 1, width = 6, height = 5, dpi = 330)
fig_dir
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/")
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/frangieh/control/")
undercover_grnas <- problem_pairs$undercover_grna |> unique()
fig_dir
ggplot2::ggsave(filename = paste0(fig_dir, "resampling_dist_lowmoi.png"),
plot = p, device = "png", scale = 1, width = 6, height = 5, dpi = 330)
paste0(fig_dir, "resampling_dist_lowmoi.png")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_aug_2022/")
ggplot2::ggsave(filename = paste0(fig_dir, "resampling_dist_lowmoi.png"),
plot = p, device = "png", scale = 1, width = 6, height = 5, dpi = 330)
ggplot2::ggsave(filename = paste0(fig_dir, "resampling_dist_lowmoi.png"),
plot = p, device = "png", scale = 1, width = 6, height = 4, dpi = 330)
p
i
i <- 7
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
curr_undercover_grna <- as.character(sample(undercover_grnas, 1))
funct_args <- get_sceptre_function_args_for_pair(problem_pairs = problem_pairs,
undercover_grna = curr_undercover_grna)
funct_args$response_grna_group_pairs <- funct_args$response_grna_group_pairs |> dplyr::sample_n(15)
curr_problem_pairs <- problem_pairs |>
dplyr::filter(undercover_grna == curr_undercover_grna)
out <- do.call(what = run_sceptre_low_moi, args = funct_args) |> tibble::as_tibble()
i <- 1
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 2
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 3
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 4
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 5
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 6
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 7
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 8
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 9
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
0.07087929/0.00633
load_all()
load_all("~/research_code/sceptre2/")
i <- 9
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 1
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
0.05795942/0.00640
compute_empirical_p_value_result_row
compute_empirical_p_value
p <- plot_fitted_density_result_row(out[i,])
p
i <- 1
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
i <- 2
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 3
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 4
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 5
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 6
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 7
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 8
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
i <- 9
compute_empirical_p_value_result_row(out[i,])
out[i, "p_value"]
compute_ks_test_result_row(out[i,])
p <- plot_fitted_density_result_row(out[i,])
p
p
ggplot2::ggsave(filename = paste0(fig_dir, "resampling_dist_lowmoi.png"),
plot = p, device = "png", scale = 1, width = 6, height = 4, dpi = 330)
0.00633
0.001 > 0.00633
0.01 < 0.00633
1e9
.05/(100000)
.05/(1000000)
.05/(1000000)
.05/(100000)
.05/(1000000)
.05/(10000000)
.1/(10000000)
.01/(10000000)
10000 * 500
10000 * 50
10000 * 500
10000 * 1000
0.05/(10000 * 1000)
10000/60
(10000/60)/60
1/100000
1e9/1e5
10000/(60^2)
