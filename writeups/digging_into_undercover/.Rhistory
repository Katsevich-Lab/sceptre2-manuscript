lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
ggsave(filename = paste0(fig_dir, "trans_qq_no_chrom_grp=", i, ".png"),
plot = trans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(filename = paste0(fig_dir, "untrans_qq_no_chrom_grp=", i, ".png"),
plot = untrans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(file = paste0(fig_dir, "trans_qq_chrom_only_grp=", i, ".png"),
plot = lisc_plot, device = "png", scale = 1.4, dpi = 330, width = 4, height = 2)
}
# 2. create n pairs rejected plots
n_rejected_df <- compute_n_bonf_rejected(undercover_res = undercover_res_no_chrom, alpha = 0.05)
n_rejected_plot <- make_n_rejected_pairs_plot(n_rejected_df = n_rejected_df, y_max = 1e5)
if (FALSE) {
ggsave(filename = paste0(fig_dir, "barplot_no_chrom_grp=", i, ".png"),
plot = n_rejected_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
}
# 3. create histograms for the permutation, seurat de, and NB regression methods
methods <- c("permutation_test", "seurat_de", "nb_regression")
if (FALSE) {
for (j in seq(1, length(methods))) {
method <- methods[j]
fill <- my_cols[j]
hist_p <- make_histograms(undercover_res |> filter(method == !!method),
fill = my_cols[j])
ggsave(filename = paste0(fig_dir, "histogram_", method, "_grp=", i, ".png"),
plot = hist_p, device = "png", scale = 1.1, width = 8, height = 5, dpi = 330)
}
}
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
n_rejected_n_cells_df <- get_n_reject_n_undercover_cells_df(undercover_res, alpha = 0.1)
# 10. append the number of undercover cells
append_n_undercover_cells <- function(undercover_res) {
undercover_res |>
group_by(undercover_grna, dataset_slash) |>
group_modify(function(tibble, key) {
print(paste0("Working on ", paste0(key$undercover_grna, key$dataset_slash, collapse = " ")))
dataset_name <- as.character(key$dataset_slash)
undercover_grna <- as.character(key$undercover_grna)
grna_feature_covariates <- get_grna_dataset_name(dataset_name, "assignment") |>
load_dataset_modality() |>
get_feature_covariates()
n_undercover_cells <- grna_feature_covariates[undercover_grna, "n_nonzero"] |> sum()
mutate(tibble, n_undercover_cells = n_undercover_cells)
})
}
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
j <- 1
method <- methods[j]
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
method <- methods[j]
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
n_rejected_n_cells_df
b
n_rejected_n_cells_df
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
undercover_res
undercover_res
(undercover_res |> dplyr::pull()([1])
(undercover_res |> dplyr::pull()[1]
)
(undercover_res |> dplyr::pull())[1]
(undercover_res |> dplyr::pull(undercover_grna))[1]
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
tibble <- undercover_res |> filter(undercover_grna == "NO-SITE-707,ONE-NON-GENE-SITE-2", dataset_slash == )
(undercover_res |> dplyr::pull(dataset_slash))[1]
tibble <- undercover_res |> filter(undercover_grna == "NO-SITE-707,ONE-NON-GENE-SITE-2", dataset_slash == "frangieh/co_culture/gene")
key <- data.frame(undercover_grna = "NO-SITE-707,ONE-NON-GENE-SITE-2", dataset_slash = "frangieh/co_culture/gene")
key
tibble
key
print(paste0("Working on ", paste0(key$undercover_grna, key$dataset_slash, collapse = " ")))
dataset_name <- as.character(key$dataset_slash)
undercover_grna <- as.character(key$undercover_grna)
grna_feature_covariates <- get_grna_dataset_name(dataset_name, "assignment") |>
load_dataset_modality() |>
get_feature_covariates()
grna_feature_covariates
undercover_grna
strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
undercover_grna <- strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
undercover_grna
undercover_grna <- strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
grna_f
undercover_grna <- strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- get_grna_dataset_name(dataset_name, "assignment") |>
load_dataset_modality() |>
get_feature_covariates()
n_undercover_cells <- grna_feature_covariates[undercover_grna, "n_nonzero"] |> sum()
n_undercover_cells
grna_feature_covariates[undercover_grna, "n_nonzero"]
# 10. append the number of undercover cells
append_n_undercover_cells <- function(undercover_res) {
undercover_res |>
group_by(undercover_grna, dataset_slash) |>
group_modify(function(tibble, key) {
print(paste0("Working on ", paste0(key$undercover_grna, key$dataset_slash, collapse = " ")))
dataset_name <- as.character(key$dataset_slash)
undercover_grna <- strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- get_grna_dataset_name(dataset_name, "assignment") |>
load_dataset_modality() |>
get_feature_covariates()
n_undercover_cells <- grna_feature_covariates[undercover_grna, "n_nonzero"] |> sum()
mutate(tibble, n_undercover_cells = n_undercover_cells)
})
}
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
key <- data.frame(undercover_grna = "NO-SITE-707,ONE-NON-GENE-SITE-2", dataset_slash = "frangieh/co_culture/gene")
key
undercover_grna <- strsplit(x = key$undercover_grna, split = ",", fixed = TRUE) |> unlist()
undercover_grna
print(paste0("Working on ", key$undercover_grna, key$dataset_slash, collapse = " "))
print(paste0("Working on ", key$undercover_grna, " ", key$dataset_slash))
# 10. append the number of undercover cells
append_n_undercover_cells <- function(undercover_res) {
undercover_res |>
group_by(undercover_grna, dataset_slash) |>
group_modify(function(tibble, key) {
print(paste0("Working on ", key$undercover_grna, " ", key$dataset_slash))
dataset_name <- as.character(key$dataset_slash)
undercover_grna <- strsplit(x = as.character(key$undercover_grna), split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- get_grna_dataset_name(dataset_name, "assignment") |>
load_dataset_modality() |>
get_feature_covariates()
n_undercover_cells <- grna_feature_covariates[undercover_grna, "n_nonzero"] |> sum()
mutate(tibble, n_undercover_cells = n_undercover_cells)
})
}
n_rejected_n_cells_df <- get_n_reject_n_undercover_cells_df(undercover_res, alpha = 0.1)
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
undercover_res
undercover_res$n_undercover_cells <- NA
undercover_res$n_undercover_cells <- NULL
undercover_res
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
undercover_res
undercover_res$n_undercover_cells |> unique()
n_rejected_n_cells_df <- get_n_reject_n_undercover_cells_df(undercover_res, alpha = 0.1)
n_rejected_n_cells_df
j
method <- methods[j]
method
methods
methods <- c("seurat_de", "nb_regression")
for (j in seq(1, length(methods))) {
method <- methods[j]
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
ggsave(filename = paste0(fig_dir, "assoc_plot_", method, "_grp=", i, ".png"),
plot = effective_samp_size_n_rejected_assoc_plot,
device = "png", scale = 1.1, width = 8, height = 5,
dpi = 330)
}
j
method <- methods[j]
method
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
effective_samp_size_n_rejected_assoc_plot
method
method <- "seurat_de"
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
effective_samp_size_n_rejected_assoc_plot
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/R_scripts/analyze_undercover_results_plot_functs.R")
source(funct_script)
# load packages
library(ggplot2)
library(katlabutils)
library(future.apply)
library(wesanderson)
plan(multisession)
future_lapply(X = seq(1, 3), FUN = function(i) {
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::mutate(dataset_slash = replace_dataset_underscore_with_slash(dataset))
undercover_res <- combine_schraivogel_enhancer_screens(undercover_res)
if (!perform_sanity_check(undercover_res)) {
stop("Sanity check failed.")
}
undercover_res <- update_dataset_names(undercover_res, TRUE)
undercover_res_no_chrom <- undercover_res |>
dplyr::filter(!(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin")))
undercover_res_chrom_only <- undercover_res |>
dplyr::filter(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin"))
if (FALSE) {
# 1. create the qq-plots
trans_qq_plot <- make_trans_qq_plot(undercover_res_no_chrom)
untrans_qq_plot <- make_untrans_qq_plot(undercover_res_no_chrom)
lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
ggsave(filename = paste0(fig_dir, "trans_qq_no_chrom_grp=", i, ".png"),
plot = trans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(filename = paste0(fig_dir, "untrans_qq_no_chrom_grp=", i, ".png"),
plot = untrans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(file = paste0(fig_dir, "trans_qq_chrom_only_grp=", i, ".png"),
plot = lisc_plot, device = "png", scale = 1.4, dpi = 330, width = 4, height = 2)
}
# 2. create n pairs rejected plots
n_rejected_df <- compute_n_bonf_rejected(undercover_res = undercover_res_no_chrom, alpha = 0.05)
n_rejected_plot <- make_n_rejected_pairs_plot(n_rejected_df = n_rejected_df, y_max = 1e5)
if (FALSE) {
ggsave(filename = paste0(fig_dir, "barplot_no_chrom_grp=", i, ".png"),
plot = n_rejected_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
}
# 3. create histograms for the permutation, seurat de, and NB regression methods
methods <- c("permutation_test", "seurat_de", "nb_regression")
if (FALSE) {
for (j in seq(1, length(methods))) {
method <- methods[j]
fill <- my_cols[j]
hist_p <- make_histograms(undercover_res |> filter(method == !!method),
fill = my_cols[j])
ggsave(filename = paste0(fig_dir, "histogram_", method, "_grp=", i, ".png"),
plot = hist_p, device = "png", scale = 1.1, width = 8, height = 5, dpi = 330)
}
}
# 4. create plot exploring connection between effective sample size and rejection rate
undercover_res <- append_n_undercover_cells(undercover_res)
n_rejected_n_cells_df <- get_n_reject_n_undercover_cells_df(undercover_res, alpha = 0.1)
methods <- c("seurat_de", "nb_regression")
for (j in seq(1, length(methods))) {
method <- methods[j]
effective_samp_size_n_rejected_assoc_plot <- associate_n_undercover_cells_w_n_rejections(n_rejected_n_cells_df |> filter(method == !!method))
ggsave(filename = paste0(fig_dir, "assoc_plot_", method, "_grp=", i, ".png"),
plot = effective_samp_size_n_rejected_assoc_plot,
device = "png", scale = 1.1, width = 8, height = 5,
dpi = 330)
}
})
.get_config_path()
.get_config_path
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
fig_dir
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/positive_control_analysis/pc_result.rds")
undercover_res_fps
file.exists(undercover_res_fps)
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
fig_dir
pc_res <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/positive_control_analysis/pc_result.rds")
pc_res
readRDS(pc_res)
100000
# load packages
library(tidyverse)
pc_res
# load data; set figure dir
pc_res_fp <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/positive_control_analysis/pc_result.rds")
# verify that the number of p-values across datasets coincides
pc_res <- readRDS(pc_res_fp)
pc_res
pc_res |>
group_by(dataset)
pc_res |>
group_by(dataset, method) |>
summarize(n())
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())>
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
x <- pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
View(x)
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n())
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize( all(diff(n_pairs) == 0) )
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0))
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
source(funct_script)
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
funct_script
source(funct_script)
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |> View()
# combine Schraivogel screens
undercover_res <- combine_schraivogel_enhancer_screens(pc_res)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
pc_res
# combine Schraivogel screens
undercover_res <- combine_schraivogel_enhancer_screens(pc_res)
combine_schraivogel_enhancer_screens
update_dataset_names
# combine Schraivogel screens
pc_res
# combine Schraivogel screens
pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res
head(pc_res)
undercover_res <- combine_schraivogel_enhancer_screens(pc_res)
undercover_res
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |> View()
pc_res <- combine_schraivogel_enhancer_screens(pc_res)
pc_res
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |> View()
readRDS(pc_res_fp) |> head()
readRDS(pc_res_fp) |>
arrange(dataset, method)
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res <- combine_schraivogel_enhancer_screens(pc_res)
pc_res
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res <- combine_schraivogel_enhancer_screens(pc_res)
pc_res |> View()
pc_res
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res_2 <- combine_schraivogel_enhancer_screens(pc_res) |>
update_dataset_names(TRUE)
pc_res_2
compute_n_bonf_rejected
pc_res <- combine_schraivogel_enhancer_screens(pc_res) |>
update_dataset_names(TRUE)
# compute number of Bonferoni rejections
compute_n_bonf_rejected(pc_res)
compute_n_bonf_rejected(pc_res) |> View()
# compute number of Bonferoni rejections
n_bonf_reject <- compute_n_bonf_rejected(pc_res)
# plot the number of Bonferoni rejections
make_n_rejected_pairs_plot(n_bonf_reject)
log_trans = TRUE
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
n_rejected_df <- n_bonf_reject
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
y_max y_max = 1e5
y_max = 1e5
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
log_trans <- FALSE
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
n_bonf_reject
n_bonf_reject |> View()
# 8. make n rejected pairs plot
make_n_rejected_pairs_plot <- function(n_rejected_df, y_max = 1e5, scales = "fixed", log_trans = TRUE) {
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35), scales = scales) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
}
# 8. make n rejected pairs plot
make_n_rejected_pairs_plot <- function(n_rejected_df, y_max = 1e5, scales = "fixed", log_trans = TRUE) {
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35), scales = scales) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
}
# plot the number of Bonferoni rejections
make_n_rejected_pairs_plot(n_rejected_df = n_bonf_reject, y_max = NULL, scales = "free", log_trans = FALSE)
