readRDS(pc_res_fp) |>
arrange(dataset, method)
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res <- combine_schraivogel_enhancer_screens(pc_res)
pc_res
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res <- combine_schraivogel_enhancer_screens(pc_res)
pc_res |> View()
pc_res
pc_res <- readRDS(pc_res_fp) |>
arrange(dataset, method)
# load aux functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
source(funct_script)
# sanity check: verify that the number of p-values across datasets coincides
pc_res |>
group_by(dataset, method) |>
summarize(n_pairs = n()) |>
summarize(same_n_pairs = all(diff(n_pairs) == 0)) |>
pull(same_n_pairs) |>
all()
# combine Schraivogel screens
pc_res <- pc_res |>
dplyr::mutate(dataset = gsub(pattern = "/", replacement = "_", fixed = TRUE, x = dataset))
pc_res_2 <- combine_schraivogel_enhancer_screens(pc_res) |>
update_dataset_names(TRUE)
pc_res_2
compute_n_bonf_rejected
pc_res <- combine_schraivogel_enhancer_screens(pc_res) |>
update_dataset_names(TRUE)
# compute number of Bonferoni rejections
compute_n_bonf_rejected(pc_res)
compute_n_bonf_rejected(pc_res) |> View()
# compute number of Bonferoni rejections
n_bonf_reject <- compute_n_bonf_rejected(pc_res)
# plot the number of Bonferoni rejections
make_n_rejected_pairs_plot(n_bonf_reject)
log_trans = TRUE
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
n_rejected_df <- n_bonf_reject
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
y_max y_max = 1e5
y_max = 1e5
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
log_trans <- FALSE
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35)) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
n_bonf_reject
n_bonf_reject |> View()
# 8. make n rejected pairs plot
make_n_rejected_pairs_plot <- function(n_rejected_df, y_max = 1e5, scales = "fixed", log_trans = TRUE) {
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35), scales = scales) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
}
# 8. make n rejected pairs plot
make_n_rejected_pairs_plot <- function(n_rejected_df, y_max = 1e5, scales = "fixed", log_trans = TRUE) {
n_rejected_df |>
ggplot2::ggplot(ggplot2::aes(x = Method, y = n_reject, fill = Method)) +
ggplot2::geom_col(col = "black") +
facet_wrap(~dataset_rename_w_pairs, labeller = label_wrap_gen(35), scales = scales) +
theme_bw() +
theme(legend.position = "bottom",
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title= element_blank()) +
ylab("N rejected (after Bonf. correction)") +
if (log_trans) ggplot2::scale_y_log10(limits = c(1, y_max)) else NULL
}
# plot the number of Bonferoni rejections
make_n_rejected_pairs_plot(n_rejected_df = n_bonf_reject, y_max = NULL, scales = "free", log_trans = FALSE)
library(ondisc)
library(lowmoi)
response_id <- "FOXF2"
undercover_ntc_name_in <- "ONE-NON-GENE-SITE-328"
dataset_name <- "frangieh/co_culture/gene"
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- load_dataset_modality(grna_dataset_name)
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- grna_odm |> get_feature_covariates()
grna_feature_covariates[undercover_ntc_name, "target"] <- "undercover"
grna_odm_swapped <- grna_odm |> mutate_feature_covariates(target = grna_feature_covariates$target)
pairs_df <- data.frame(grna_group = "undercover", response_id = response_id)
head(pairs_df)
perm_res <- permutation_test(response_odm = response_odm,
grna_odm = grna_odm_swapped,
response_grna_group_pairs = pairs_df,
return_permuted_test_stats = TRUE,
test_stat = "log_fold_change")
perm_res[,1:5]
perm_res |> dplyr::select(resample_1:resample_1000) |> as.numeric() |> hist()
perm_res[,1:5]
perm_res |> dplyr::select(resample_1:resample_1000) |> as.numeric() |> hist()
perm_res
perm_res[1:5, 1:5]
perm_res_1 <- permutation_test(response_odm = response_odm,
grna_odm = grna_odm_swapped,
response_grna_group_pairs = pairs_df,
return_permuted_test_stats = TRUE,
test_stat = "log_fold_change")
perm_res[1:5, 1:5]
perm_res[1, 1:5]
library(ondisc)
library(lowmoi)
response_id <- "FOXF2"
undercover_ntc_name_in <- "ONE-NON-GENE-SITE-328"
dataset_name <- "frangieh/co_culture/gene"
response_odm <- load_dataset_modality(dataset_name)
grna_dataset_name <- get_grna_dataset_name(dataset_name, "assignment")
grna_odm <- load_dataset_modality(grna_dataset_name)
undercover_ntc_name <- strsplit(x = undercover_ntc_name_in, split = ",", fixed = TRUE) |> unlist()
grna_feature_covariates <- grna_odm |> get_feature_covariates()
grna_feature_covariates[undercover_ntc_name, "target"] <- "undercover"
grna_odm_swapped <- grna_odm |> mutate_feature_covariates(target = grna_feature_covariates$target)
pairs_df <- data.frame(grna_group = "undercover", response_id = response_id)
perm_res_1 <- permutation_test(response_odm = response_odm,
grna_odm = grna_odm_swapped,
response_grna_group_pairs = pairs_df,
return_permuted_test_stats = TRUE,
test_stat = "log_fold_change")
perm_res[1, 1:5]
perm_res_1[1, 1:5]
perm_res_1[1, 1:4]
perm_res_2 <- permutation_test(response_odm = response_odm,
grna_odm = grna_odm_swapped,
response_grna_group_pairs = pairs_df,
return_permuted_test_stats = TRUE)
perm_res_2
perm_res_2[1, 1:4]
perm_res_2[1, 1:4]
perm_res_1[1, 1:4]
ls
n <- 1
undercover_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/undercover_grna_analysis/")
undercover_dir
res <- paste0(undercover_dir, "undercover_result_grp_size_", n ,".rds") |> readRDS()
head(res)
n
nrow(res)
res
nrow(res)
res$method |> unique()
res <- res |> dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca"))
head(Res)
head(res)
res$method |> unique()
head(Res)
head(res)
res_sceptre <- paste0(undercover_dir, "undercover_result_grp_size_", n, "_new_perm.rds") |> readRDS()
n <- 1
undercover_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/undercover_grna_analysis/")
res <- paste0(undercover_dir, "undercover_result_grp_size_", n ,".rds") |> readRDS()
res <- res |> dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca"))
res_sceptre <- paste0(undercover_dir, "undercover_result_grp_size_", n, "sceptre.rds") |> readRDS()
res_sceptre <- paste0(undercover_dir, "undercover_result_grp_size_", n, "_sceptre.rds") |> readRDS()
head(res_sceptre)
res_new <- rbind(res, res_sceptre)
head(res_new)
head(res_new)
res_new |> dplyr::group_by("method", "dataset")
res_new |>
dplyr::group_by("method", "dataset") |>
dplyr::summarize(count = dplyr::n())
res_new |>
dplyr::group_by(method, dataset) |>
dplyr::summarize(count = dplyr::n())
res_new |>
dplyr::group_by(method, dataset) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::group_by(dataset)
res_new |>
dplyr::group_by(method, dataset) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::group_by(dataset) |>
dplyr::summarize(all_same = diff(count) == 0)
x <- res_new |>
dplyr::group_by(method, dataset) |>
dplyr::summarize(count = dplyr::n()) |>
dplyr::ungroup() |>
dplyr::group_by(dataset)
View(X)
View(x)
res_new
saveRDS(object = res_new, file = paste0(undercover_dir, "undercover_result_grp_size_", n ,".rds"))
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
undercover_res_fps
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/figures/undercover_figs/")
fig_dir
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
i <- 1
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::mutate(dataset_slash = replace_dataset_underscore_with_slash(dataset))
head(undercover_res)
undercover_res <- combine_schraivogel_enhancer_screens(undercover_res)
undercover_res$method |> unique()
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca", "sceptre")) |>
dplyr::mutate(dataset_slash = replace_dataset_underscore_with_slash(dataset))
undercover_res <- combine_schraivogel_enhancer_screens(undercover_res)
if (!perform_sanity_check(undercover_res)) {
stop("Sanity check failed.")
}
undercover_res <- update_dataset_names(undercover_res, TRUE)
undercover_res_no_chrom <- undercover_res |>
dplyr::filter(!(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin")))
undercover_res_chrom_only <- undercover_res |>
dplyr::filter(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin"))
# 1. create the qq-plots
trans_qq_plot <- make_trans_qq_plot(undercover_res_no_chrom)
untrans_qq_plot <- make_untrans_qq_plot(undercover_res_no_chrom)
lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_for_john_kat_aug_2022/")
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_aug_2022/")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
funct_script
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
library(future.apply)
i <- 1
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::mutate(clock_time = NULL, max_ram = NULL)|>
dplyr::filter(method %in% c("seurat_de", "liscovitch_method", "schraivogel_method", "weissman_method", "mimosca", "sceptre")) |>
combine_schraivogel_enhancer_screens() |>
update_dataset_names(TRUE)
undercover_res_no_chrom <- undercover_res |>
dplyr::filter(!(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin")))
undercover_res_chrom_only <- undercover_res |>
dplyr::filter(dataset %in% c("liscovitch_experiment_big_chromatin",
"liscovitch_experiment_small_chromatin"))
# 1. create the qq-plots
trans_qq_plot <- make_trans_qq_plot(undercover_res_no_chrom)
untrans_qq_plot <- make_untrans_qq_plot(undercover_res_no_chrom)
lisc_plot <- make_trans_qq_plot(undercover_res_chrom_only)
ggsave(filename = paste0(fig_dir, "trans_qq_no_chrom_grp=", i, ".png"),
plot = trans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
ggsave(filename = paste0(fig_dir, "untrans_qq_no_chrom_grp=", i, ".png"),
plot = untrans_qq_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
# 2. create n pairs rejected plots
n_rejected_df <- compute_n_bonf_rejected(undercover_res = undercover_res_no_chrom, alpha = 0.05)
n_rejected_plot <- make_n_rejected_pairs_plot(n_rejected_df = n_rejected_df, y_max = 1e5)
ggsave(filename = paste0(fig_dir, "barplot_no_chrom_grp=", i, ".png"),
plot = n_rejected_plot, device = "png", scale = 1.25, dpi = 330, width = 9, height = 6)
undercover_res_fps <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"results/undercover_grna_analysis/undercover_result_grp_size_", seq(1, 3), ".rds")
fig_dir <- paste0(.get_config_path("LOCAL_CODE_DIR"), "sceptre2-manuscript/writeups/digging_into_undercover/figs_aug_2022/")
if (!dir.exists(fig_dir)) dir.create(fig_dir)
# source the functions
funct_script <- paste0(.get_config_path("LOCAL_CODE_DIR"),
"sceptre2-manuscript/writeups/digging_into_undercover/analyze_undercover_results_plot_functs.R")
# load packages and script
source(funct_script)
library(katlabutils)
library(tidyverse)
library(future.apply)
i <- 1
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i])
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre")
head(undercover_res)
# Pick out problematic sceptre pairs from Frangieh control data
undercover_res <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre") |>
dplyr::select(-clock_time, -max_ram)
head(undercover_res)
head(undercover_res)
undercover_res |> dplyr::filter(p_value <= 0.01)
undercover_res |>
dplyr::filter(p_value <= 0.01) |>
dplyr::arrange(p_value)
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset = "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value)
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset == "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value)
sceptre_problem_pairs
head(sceptre_problem_pairs)
head()
# Pick out problematic sceptre pairs from Frangieh control data
sceptre_problem_pairs <- readRDS(undercover_res_fps[i]) |>
dplyr::filter(method == "sceptre", dataset == "frangieh_control_gene", p_value <= 0.01) |>
dplyr::arrange(p_value) |> dplyr::select(-clock_time, -max_ram)
head(sceptre_problem_pairs)
sceptre_problem_pairs
sceptre_problem_pairs$undercover_grna |> table()
sceptre_problem_pairs
sceptre_problem_pairs$undercover_grna
saveRDS(object = sceptre_problem_pairs, file = "sceptre_problem_pairs_frangieh_control_gene.rds")
saveRDS(object = sceptre_problem_pairs, file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(sceptre_problem_pairs)
sceptre_problem_pairs
load_all("~/research_code/sceptre2/")
x <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(X)
head(x)
head(x)
x <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
x
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
head(problem_pairs)
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
problem_pairs |> head()
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
head(control_dir)
# obtain the multimodal odm
mm_fp <- paste0(tap_seq_dir, "multimodal_metadata.rds")
# obtain the multimodal odm
mm_fp <- paste0(control_dir, "multimodal_metadata.rds")
odm_fps <- paste0(control_dir, c("gene/matrix.odm", "grna_assignment/matrix.odm"))
mm_odm <- ondisc::read_multimodal_odm(odm_fps = odm_fps, multimodal_metadata_fp = mm_fp)
mm_odm
mm_fp
mm_odm
mm_odm@modalities$gene@misc
# set the additional args
form <- formula(~ log(gene_n_nonzero) + log(gene_n_umis) + batch)
response_modality_name <- "gene"
grna_modality_name <- "grna_expression"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# set the additional args
form <- mm_odm@modalities$gene@misc[["sceptre_formula"]]
form
response_modality_name <- "gene"
grna_modality_name <- "grna_expression"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
# step 1: check inputs; get the unique responses
cat("Checking inputs. ")
mm_odm <- check_ondisc_inputs(mm_odm = mm_odm,
response_grna_group_pairs = response_grna_group_pairs,
form = form,
response_modality_name = response_modality_name,
grna_modality_name = grna_modality_name,
grna_group_column_name = grna_group_column_name,
low_moi = TRUE)
# set the additional args
form <- mm_odm@modalities$gene@misc[["sceptre_formula"]]
response_modality_name <- "gene"
grna_modality_name <- "grna_assignment"
grna_group_column_name <- "target"
B <- 2500
side <- "both"
full_output <- FALSE
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
# step 1: check inputs; get the unique responses
cat("Checking inputs. ")
mm_odm <- check_ondisc_inputs(mm_odm = mm_odm,
response_grna_group_pairs = response_grna_group_pairs,
form = form,
response_modality_name = response_modality_name,
grna_modality_name = grna_modality_name,
grna_group_column_name = grna_group_column_name,
low_moi = TRUE)
response_grna_group_pairs
heaD(problem_pairs)
head(problem_pairs)
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
# step 1: obtain cell-to-gRNA assignments
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
grna_odm
cat("Obtaining the cell-to-gRNA assignments.")
grna_group_info <- lowmoi::get_target_assignments_via_max_op(grna_odm) |> get_grna_group_info()
rm(grna_odm)
cat(crayon::green(' \u2713\n'))
head(grna_group_info)
lowmoi::get_target_assignments_via_max_op(grna_odm)
# call function
# DELETE AFTER REWRITING ASSIGN GRNA FUNCT
# step 1: obtain cell-to-gRNA assignments
grna_odm <- mm_odm |> ondisc::get_modality(grna_modality_name)
cat("Obtaining the cell-to-gRNA assignments.")
grna_group_info <- lowmoi::get_target_assignments_via_max_op(grna_odm)
head(grna_group_info)
table(grna_group_info)
head(problem_pairs)
load_all("~/research_code/sceptre2/")
problem_pairs <- readRDS(file = "~/Desktop/sceptre_problem_pairs_frangieh_control_gene.rds")
control_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"),
"data/frangieh/control/")
head(problem_pairs)
problem_pairs |> dplyr::sample(1)
problem_pairs |> dplyr::sample_n(1)
problem_pairs |> dplyr::sample_n(1)
19
random_pair <- problem_pairs |> dplyr::sample_n(1)
head(random_pair)
response_id <- random_pair$response_id; undercover_grna <- random_pair$undercover_grna
response_id
undercover_grna
