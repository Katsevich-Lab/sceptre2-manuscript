full_test_stat = FALSE)
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
n_cntrl = length(all_nt_idxs),
n_trt = length(grna_group_idxs[[grna_group]]),
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
n_cntrl = length(all_nt_idxs),
n_trt = length(grna_group_idxs[[grna_group]]),
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
n_cntrl = length(all_nt_idxs),
n_trt = length(grna_group_idxs[[grna_group]]),
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a, b = precomp_pieces$b,
n_cntrl = length(all_nt_idxs),
n_trt = length(grna_group_idxs[[grna_group]]),
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a, b = precomp_pieces$b,
n_cntrl = length(all_nt_idxs),
n_trt = length(grna_group_idxs[[grna_group]]),
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = TRUE,
return_resampling_dist = return_resampling_dist)
result
perform_response_precomputation
head(curr_expression_vector)
response_precomp$precomp_str
n_cntrl
n_cntrl <- length(all_nt_idxs),
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
n_cntrl
all_nt_idxs
n_cntrl <- length(all_nt_idxs),
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
n_cntrl
n_cntrl <- length(all_nt_idxs),
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
n_cntrl
n_trt
synthetic_idxs
B1
B2
B3
fit_skew_normal
return_resampling_dist
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = FALSE)
precomp_pieces
n_cntrl
n_trt
synthetic_idxs
B1
B2
B3
fit_skew_normal
return_resampling_dist
# 4. run the association test
result <- run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$b,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
# 4. run the association test
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$b,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
# 4. run the association test
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
b = precomp_pieces$b,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
# 4. run the association test
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
b = precomp_pieces$b,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result
return_resampling_dist <- TRUE
# 4. run the association test
result <- run_low_level_test_distilled(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
b = precomp_pieces$b,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
result$resampling_dist |> hist()
load_all()
load_all("~/research_code/sceptre")
i
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
result_list_inner[[i]]
load_all("~/research_code/sceptre")
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
print(i)
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
result_list_outer
result_list_inner
return_resampling_dist <- FALSE
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
print(i)
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
result_list_inner
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
curr_response_result[[1]]
curr_response_result[[2]]
curr_response_result[[88]]
options(warn=2)
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
low_level_association_funct
load_all("~/research_code/sceptre")
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
synthetic_idxs
B1; B2; B3
fit_skew_normal
return_resampling_dist
grna_group_idxs <- args_to_pass$grna_group_idxs
covariate_matrix
all_nt_idxs
grna_groups
grna_groups <- args_to_pass$grna_groups
grna_groups
pieces_precomp
expression_vector_nt
expression_vector
response_precomp
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
synthetic_idxs <- args_to_pass$synthetic_idxs
names <- names(args_to_pass)
for (name in names) assign(name, args_to_pass[[name]])
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
low_level_association_funct
i
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
result_list_inner[[1]]
i
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
load_all("~/research_code/sceptre")
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
low_level_association_funct
lowmoi_exact_full_stat_discovery(synthetic_idxs = args_to_pass$synthetic_idxs, B1 = args_to_pass$B1, B2 = args_to_pass$B2, B3 = args_to_pass$B3, fit_skew_normal = args_to_pass$fit_skew_normal, return_resampling_dist = args_to_pass$return_resampling_dist, grna_group_idxs = args_to_pass$grna_group_idxs, covariate_matrix = args_to_pass$covariate_matrix, all_nt_idxs = args_to_pass$all_nt_idxs, grna_groups = args_to_pass$grna_groups, pieces_precomp = args_to_pass$pieces_precomp, expression_vector_nt = args_to_pass$expression_vector_nt, expression_vector = args_to_pass$expression_vector, response_precomp = args_to_pass$response_precomp)
synthetic_idxs = args_to_pass$synthetic_idxs; B1 = args_to_pass$B1; B2 = args_to_pass$B2; B3 = args_to_pass$B3; fit_skew_normal = args_to_pass$fit_skew_normal; return_resampling_dist = args_to_pass$return_resampling_dist; grna_group_idxs = args_to_pass$grna_group_idxs; covariate_matrix = args_to_pass$covariate_matrix; all_nt_idxs = args_to_pass$all_nt_idxs; grna_groups = args_to_pass$grna_groups; pieces_precomp = args_to_pass$pieces_precomp; expression_vector_nt = args_to_pass$expression_vector_nt; expression_vector = args_to_pass$expression_vector; response_precomp = args_to_pass$response_precomp
result_list_inner <- vector(mode = "list", length = length(grna_groups))
for (i in seq_along(grna_groups)) {
print(i)
grna_group <- grna_groups[i]
n_cntrl <- length(all_nt_idxs)
n_trt <- length(grna_group_idxs[[grna_group]])
# 0. get the expression vector and covariate matrix
curr_expression_vector <- expression_vector[c(all_nt_idxs, grna_group_idxs[[grna_group]])]
curr_covariate_matrix <- covariate_matrix[c(all_nt_idxs, grna_group_idxs[[grna_group]]),]
# 1. perform the response precomputation
response_precomp <- perform_response_precomputation(expressions = curr_expression_vector,
covariate_matrix = curr_covariate_matrix)
result_list_inner[[i]] <- tryCatch({
# 2. get the precomp pieces
precomp_pieces <- compute_precomputation_pieces(expression_vector = curr_expression_vector,
covariate_matrix = curr_covariate_matrix,
fitted_coefs = response_precomp$fitted_coefs,
theta = response_precomp$theta,
full_test_stat = TRUE)
# 3. compute D matrix
D <- compute_D_matrix(precomp_pieces$Zt_wZ, precomp_pieces$wZ)
# 4. run the association test
run_low_level_test_full_v2(y = curr_expression_vector,
mu = precomp_pieces$mu,
a = precomp_pieces$a,
w = precomp_pieces$w,
D = D,
n_cntrl = n_cntrl,
n_trt = n_trt,
synthetic_idxs = synthetic_idxs,
B1 = B1, B2 = B2, B3 = B3,
fit_skew_normal = fit_skew_normal,
return_resampling_dist = return_resampling_dist)
}, error = function(e) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist),
warning = function(w) backup_distilled(curr_expression_vector, response_precomp,
n_cntrl, n_trt, synthetic_idxs, B1, B2,
B3, fit_skew_normal, return_resampling_dist))
}
lowmoi_exact_full_stat_discovery(synthetic_idxs = args_to_pass$synthetic_idxs, B1 = args_to_pass$B1, B2 = args_to_pass$B2, B3 = args_to_pass$B3, fit_skew_normal = args_to_pass$fit_skew_normal, return_resampling_dist = args_to_pass$return_resampling_dist, grna_group_idxs = args_to_pass$grna_group_idxs, covariate_matrix = args_to_pass$covariate_matrix, all_nt_idxs = args_to_pass$all_nt_idxs, grna_groups = args_to_pass$grna_groups, pieces_precomp = args_to_pass$pieces_precomp, expression_vector_nt = args_to_pass$expression_vector_nt, expression_vector = args_to_pass$expression_vector, response_precomp = args_to_pass$response_precomp)
load_all()
load_all("~/research_code/sceptre/")
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
load_all("~/research_code/sceptre/")
lowmoi_exact_full_stat_discovery(synthetic_idxs = args_to_pass$synthetic_idxs, B1 = args_to_pass$B1, B2 = args_to_pass$B2, B3 = args_to_pass$B3, fit_skew_normal = args_to_pass$fit_skew_normal, return_resampling_dist = args_to_pass$return_resampling_dist, grna_group_idxs = args_to_pass$grna_group_idxs, covariate_matrix = args_to_pass$covariate_matrix, all_nt_idxs = args_to_pass$all_nt_idxs, grna_groups = args_to_pass$grna_groups, pieces_precomp = args_to_pass$pieces_precomp, expression_vector_nt = args_to_pass$expression_vector_nt, expression_vector = args_to_pass$expression_vector, response_precomp = args_to_pass$response_precomp)
load_all("~/research_code/sceptre/")
# 9. pass the arguments to the appropriate low-level association testing function
curr_response_result <- do.call(what = low_level_association_funct, args = args_to_pass)
install()
