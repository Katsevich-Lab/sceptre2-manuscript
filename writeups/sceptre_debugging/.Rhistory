result_dir
result_dir
paste0(result_dir, "undercover_grna_analysis/")
# 1.
fisher_exact_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/fisher_exact_1.rds"))
fisher_exact_res
head(fisher_exact_res)
v
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results.rds"))
pc_res
nrow(pc_res)
head(pc_res)
pc_res |> group_by(dataset, method)
pc_res |> group_by(dataset, method) |> summarize(count - n())
pc_res |> group_by(dataset, method) |> summarize(count = dplyr::n())
pc_res |> group_by(dataset, method) |> summarize(count = dplyr::n()) |> print(n = 100)
fisher_exact_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/fisher_exact_1.rds"))
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results.rds"))
pc_res
n_cells_per_grna_df <- readRDS(paste0(result_dir, "positive_control_analysis/n_cells_per_grna.rds"))
paste0(result_dir, "positive_control_analysis/n_cells_per_grna.rds")
n_cells_per_grna_df <- readRDS(paste0(result_dir, "dataset_sample_sizes/n_cells_per_grna.rds"))
n_cells_per_grna_df
head(n_cells_per_grna_df)
n_nonzero_cells_per_grna_df <- readRDS(paste0(result_dir, "n_nonzero_cells_per_grna.rds"))
result_dir
n_nonzero_cells_per_grna_df <- readRDS(paste0(result_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
head(n_nonzero_cells_per_grna_df)
nrow(n_nonzero_cells_per_grna_df)
head(n_nonzero_cells_per_grna_df)
head(pc_res)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
paper
paper <- papers[1]
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
grna_tbl$`SLC26A2-3`
cellwise_grna_assignments
unique_grnas
grna_assign_modality
grna_assign_modality |> get_feature_covariates() |> head()
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 500)
grna_assign_modality |> get_feature_covariates() |> print()
grna_assign_modality |> get_feature_covariates() |> print(n = 700)
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 600)
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 600)
grna_assign_modality |> get_feature_covariates() |> View()
grna_target_df <- grna_assign_modality |> get_feature_covariates()
head(grna_target_df)
tail(grna_target_df)
head(grna_target_df)
yead(grna_target_df)
grna_target_df <- data.frame(grna_id = row.names(grna_target_df),
target = grna_target_df$target)
head(grna_target_df)
grna_target_df <- grna_assign_modality |>
get_feature_covariates()
grna_target_df <- data.frame(grna_id = row.names(grna_target_df),
target = grna_target_df$target)
head(grna_target_df)
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
head(grna_target_df)
factor(row.names(grna_target_df))
row.names(grna_target_df))
row.names(grna_target_df)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
head(grna_target_df)
head(grna_target_df)
grna_target_df$grna_id |> head()
grna_target_df$target |> head()
modality <- remaining_modalities[1]
modalities
modality
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
i <- 1
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
# loop through modalities
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
seq(1, length(feature_ids))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
# lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
lapply(X = seq(1, 40), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
# lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
x
nrow(x)
x
head()
head(x)
head(grna_target_df)
grna_target_df |> head()
dplyr::left_join(x, grna_target_df, by = "grna_id")
grna_target_df
grna_target_df |> tail()
dplyr::left_join(x, grna_target_df, by = "grna_id")
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
head(x)
dplyr::left_join(x, grna_target_df, by = "grna_id")
x <- dplyr::left_join(x, grna_target_df, by = "grna_id")
head(x)
head(x, 100)
dirs <- c("data/papalexi/eccite_screen/",
"data/schraivogel/enhancer_screen_chr8/")
sample_discovery_pairs <- function(response_odm, grna_odm, n_to_sample) {
set.seed(3)
grna_groups <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target) |> unique()
grna_groups <- grna_groups[grna_groups != "non-targeting"]
expand.grid(response_id = response_odm |> ondisc::get_feature_ids(),
grna_group = grna_groups) |>
dplyr::sample_n(n_to_sample)
}
run_analysis <- function(dir, n_to_sample = 5000) {
# 1. load data
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
# 2. response info
response_odm_fp <- paste0(data_dir, "gene/matrix.odm")
response_metadata_fp <- paste0(data_dir, "gene/metadata_qc.rds")
response_odm <- read_odm(odm_fp = response_odm_fp, metadata_fp = response_metadata_fp)
# 3. grna info
grna_odm_fp <- paste0(data_dir, "grna_assignment/matrix.odm")
grna_metadata_fp <- paste0(data_dir, "grna_assignment/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
# 4. discovery pairs to analyze
response_grna_group_pairs <- sample_discovery_pairs(response_odm = response_odm,
grna_odm = grna_odm,
n_to_sample = n_to_sample)
approx_time <- system.time(approx_res <- lowmoi::sceptre(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs,
test_stat = "full",
print_progress = FALSE))
exact_time <- system.time(exact_res <- lowmoi::sceptre(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs,
test_stat = "exact_full",
print_progress = FALSE))
# 5. join the data frames
res <- dplyr::left_join(x = approx_res,
y = exact_res,
by = c("response_id", "grna_group"),
suffix = c("_approx", "_exact")) |> na.omit()
# 6. output the result
list(res = res, approx_time = approx_time, exact_time = exact_time)
}
plot_analysis_output <- function(res) {
p1 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Untransformed scale") + geom_abline(slope = 1, intercept = 0, col = "blue")
p2 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Transformed scale") + ggplot2::scale_x_continuous(trans = sceptre:::revlog_trans(10)) +
ggplot2::scale_y_continuous(trans = sceptre:::revlog_trans(10)) +
geom_abline(slope = 1, intercept = 0, col = "blue")
return(cowplot::plot_grid(p1, p2, nrow = 1))
}
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
dir <- dirs[2]
sample_discovery_pairs <- function(response_odm, grna_odm, n_to_sample) {
set.seed(3)
grna_groups <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target) |> unique()
grna_groups <- grna_groups[grna_groups != "non-targeting"]
expand.grid(response_id = response_odm |> ondisc::get_feature_ids(),
grna_group = grna_groups) |>
dplyr::sample_n(n_to_sample)
}
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
# 2. response info
response_odm_fp <- paste0(data_dir, "gene/matrix.odm")
response_metadata_fp <- paste0(data_dir, "gene/metadata_qc.rds")
response_odm <- read_odm(odm_fp = response_odm_fp, metadata_fp = response_metadata_fp)
library(ondisc)
library(lowmoi)
library(ggplot2)
library(ondisc)
library(lowmoi)
library(ggplot2)
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
# 2. response info
response_odm_fp <- paste0(data_dir, "gene/matrix.odm")
response_metadata_fp <- paste0(data_dir, "gene/metadata_qc.rds")
formula_obj
response_odm
response_odm <- read_odm(odm_fp = response_odm_fp, metadata_fp = response_metadata_fp)
response_odm@misc$sceptre_formula
fp <- "papa_out.rds"
getwd()
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(ondisc)
library(lowmoi)
library(ggplot2)
# write a function to carry out the analysis for a given dataset
sample_discovery_pairs <- function(response_odm, grna_odm, n_to_sample) {
set.seed(3)
grna_groups <- grna_odm |>
ondisc::get_feature_covariates() |>
dplyr::pull(target) |> unique()
grna_groups <- grna_groups[grna_groups != "non-targeting"]
expand.grid(response_id = response_odm |> ondisc::get_feature_ids(),
grna_group = grna_groups) |>
dplyr::sample_n(n_to_sample)
}
run_analysis <- function(dir, n_to_sample = 5000, formula_obj = NULL) {
# 1. load data
LOCAL_SCEPTRE2_DATA_DIR <- .get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
data_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, dir)
# 2. response info
response_odm_fp <- paste0(data_dir, "gene/matrix.odm")
response_metadata_fp <- paste0(data_dir, "gene/metadata_qc.rds")
response_odm <- read_odm(odm_fp = response_odm_fp, metadata_fp = response_metadata_fp)
if (!is.null(formula_obj)) {
response_odm@misc$sceptre_formula <- formula_obj
}
# 3. grna info
grna_odm_fp <- paste0(data_dir, "grna_assignment/matrix.odm")
grna_metadata_fp <- paste0(data_dir, "grna_assignment/metadata_qc.rds")
grna_odm <- read_odm(odm_fp = grna_odm_fp, metadata_fp = grna_metadata_fp)
# 4. discovery pairs to analyze
response_grna_group_pairs <- sample_discovery_pairs(response_odm = response_odm,
grna_odm = grna_odm,
n_to_sample = n_to_sample)
approx_time <- system.time(approx_res <- lowmoi::sceptre(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs,
test_stat = "full",
print_progress = FALSE))
exact_time <- system.time(exact_res <- lowmoi::sceptre(response_odm = response_odm,
grna_odm = grna_odm,
response_grna_group_pairs = response_grna_group_pairs,
test_stat = "exact_full",
print_progress = FALSE))
# 5. join the data frames
res <- dplyr::left_join(x = approx_res,
y = exact_res,
by = c("response_id", "grna_group"),
suffix = c("_approx", "_exact")) |> na.omit()
# 6. output the result
list(res = res, approx_time = approx_time, exact_time = exact_time)
}
plot_analysis_output <- function(res) {
p1 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Untransformed scale") + geom_abline(slope = 1, intercept = 0, col = "blue")
p2 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Transformed scale") + ggplot2::scale_x_continuous(trans = sceptre:::revlog_trans(10)) +
ggplot2::scale_y_continuous(trans = sceptre:::revlog_trans(10)) +
geom_abline(slope = 1, intercept = 0, col = "blue")
return(cowplot::plot_grid(p1, p2, nrow = 1))
}
fp <- "papa_out.rds"
if (!file.exists("papa_out.rds")) {
papa_out <- run_analysis("data/papalexi/eccite_screen/")
saveRDS(papa_out, file = fp)
} else {
papa_out <- readRDS(fp)
}
plot_analysis_output(papa_out$res)
cor(papa_out$res$p_value_approx, papa_out$res$p_value_exact)
cor(-log(papa_out$res$p_value_approx, base = 10),
-log(papa_out$res$p_value_exact, base = 10))
papa_out$exact_time[[3]]/papa_out$approx_time[[3]]
fp
fp <- "frangieh_out.rds"
if (!file.exists(fp)) {
frangieh_out <- run_analysis("data/frangieh/ifn_gamma/")
saveRDS(object = frangieh_out, file = fp)
} else {
frangieh_out <- readRDS(fp)
}
plot_analysis_output(frangieh_out$res |>
dplyr::filter(p_value_approx > 1e-50))
frangieh_out$exact_time[[3]]/frangieh_out$approx_time[[3]]
schraivogel_out <- run_analysis("data/schraivogel/enhancer_screen_chr8/", n_to_sample = 10000)
fp
# schraivogel
fp <- "schraivogel_out_no_batch.rds"
if (!file.exists(fp)) {
schraivogel_out_no_batch <- run_analysis("data/schraivogel/enhancer_screen_chr8/",
n_to_sample = 10000)
saveRDS(object = schraivogel_out_no_batch, file = fp)
} else {
schraivogel_out_no_batch <- readRDS(fp)
}
plot_analysis_output(schraivogel_out_no_batch$res)
cor(-log(schraivogel_out_no_batch$res$p_value_approx),
-log(schraivogel_out_no_batch$res$p_value_exact))
fp <- "schraivogel_out_no_batch.rds"
fp <- "schraivogel_out_with_batch.rds"
fp <- "schraivogel_out_with_batch.rds"
if (!file.exists(fp)) {
schraivogel_out_with_batch <- run_analysis("data/schraivogel/enhancer_screen_chr8/",
n_to_sample = 10000,
formula_obj = formula(~log(response_n_umis) + log(response_n_nonzero) + batch))
saveRDS(object = schraivogel_out_with_batch, file = fp)
} else {
schraivogel_out_with_batch <- readRDS(fp)
}
head(schraivogel_out_with_batch)
plot_analysis_output(schraivogel_out_with_batch$res)
plot_analysis_output(schraivogel_out_with_batch$res)
plot_analysis_output
res |> head()
res <- schraivogel_out_with_batch$res
head(res)
plot_analysis_output <- function(res) {
res <- res |> dplyr::mutate(p_value_approx = ifelse(p_value_approx == 0, 1e-200))
p1 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Untransformed scale") + geom_abline(slope = 1, intercept = 0, col = "blue")
p2 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Transformed scale") + ggplot2::scale_x_continuous(trans = sceptre:::revlog_trans(10)) +
ggplot2::scale_y_continuous(trans = sceptre:::revlog_trans(10)) +
geom_abline(slope = 1, intercept = 0, col = "blue")
return(cowplot::plot_grid(p1, p2, nrow = 1))
}
plot_analysis_output(schraivogel_out_with_batch$res)
plot_analysis_output <- function(res) {
res <- res |> dplyr::mutate(p_value_approx = ifelse(p_value_approx == 0, 1e-200, p_value_approx))
p1 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Untransformed scale") + geom_abline(slope = 1, intercept = 0, col = "blue")
p2 <- ggplot(data = res, mapping = aes(x = p_value_exact, y = p_value_approx)) +
geom_point() + theme_bw() + xlab("P-value (exact)") + ylab("P-value (approx)") +
ggtitle("Transformed scale") + ggplot2::scale_x_continuous(trans = sceptre:::revlog_trans(10)) +
ggplot2::scale_y_continuous(trans = sceptre:::revlog_trans(10)) +
geom_abline(slope = 1, intercept = 0, col = "blue")
return(cowplot::plot_grid(p1, p2, nrow = 1))
}
plot_analysis_output(schraivogel_out_with_batch$res)
fp <- "schraivogel_out_no_batch.rds"
if (!file.exists(fp)) {
schraivogel_out_no_batch <- run_analysis("data/schraivogel/enhancer_screen_chr8/",
n_to_sample = 10000)
saveRDS(object = schraivogel_out_no_batch, file = fp)
} else {
schraivogel_out_no_batch <- readRDS(fp)
}
plot_analysis_output(schraivogel_out_no_batch$res)
cor(-log(schraivogel_out_no_batch$res$p_value_approx),
-log(schraivogel_out_no_batch$res$p_value_exact))
