knitr::opts_chunk$set(echo = TRUE)
# load packages
devtools::load_all("~/research_code/sceptre2/")
devtools::load_all("~/research_code/lowmoi/")
library(mgcv)
library(tidyverse)
reverselog_trans <- function(base = exp(1)) {
trans <- function(x) -log(x, base)
inv <- function(x) base^(-x)
scales::trans_new(paste0("reverselog-", format(base)), trans, inv,
scales::log_breaks(base = base),
domain = c(1e-100, Inf))
}
# load results
sceptre_debug <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/undercover_grna_analysis/sceptre_debug.rds")
# define the categories
ks_stat_categories <- list(good = c(0, 1e-2),
adequate = c(1e-2, 5e-2),
subpar = c(5e-2, 0.1),
poor = c(0.1, 1))
# make some modifications to results
sceptre_debug <- sceptre_debug |>
mutate(p_gap = abs(p_value - p_value_emp),
p_rat = p_value_emp/p_value,
ks_fit = cut(x = ks_stat,
breaks = unique(unlist(ks_stat_categories)),
labels = names(ks_stat_categories))) |>
filter(dataset != "papalexi/eccite_screen/protein")
plot(cowplot_lists$good)
plot(cowplot_lists$good)
ggplot(data = sceptre_debug,
mapping = aes(x = n_treatment_cells_with_expression + 1,
y = ks_stat)) +
geom_point(cex = 0.5, alpha = 0.5) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(.~dataset) +
theme_bw() +
xlab("N treatment cells with expression + 1") +
ylab("KS statistic")
knitr::opts_chunk$set(echo = TRUE)
# load packages
devtools::load_all("~/research_code/sceptre2/")
devtools::load_all("~/research_code/lowmoi/")
library(mgcv)
library(tidyverse)
reverselog_trans <- function(base = exp(1)) {
trans <- function(x) -log(x, base)
inv <- function(x) base^(-x)
scales::trans_new(paste0("reverselog-", format(base)), trans, inv,
scales::log_breaks(base = base),
domain = c(1e-100, Inf))
}
# load results
sceptre_debug <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/undercover_grna_analysis/sceptre_debug.rds")
# define the categories
ks_stat_categories <- list(good = c(0, 1e-2),
adequate = c(1e-2, 5e-2),
subpar = c(5e-2, 0.1),
poor = c(0.1, 1))
# make some modifications to results
sceptre_debug <- sceptre_debug |>
mutate(p_gap = abs(p_value - p_value_emp),
p_rat = p_value_emp/p_value,
ks_fit = cut(x = ks_stat,
breaks = unique(unlist(ks_stat_categories)),
labels = names(ks_stat_categories))) |>
filter(dataset != "papalexi/eccite_screen/protein")
ggplot(data = sceptre_debug,
mapping = aes(x = n_control_cells_with_expression + 1,
y = ks_stat)) +
geom_point(cex = 0.5, alpha = 0.5) +
scale_x_log10() +
scale_y_log10() +
facet_wrap(.~dataset) +
theme_bw() +
xlab("N control cells with expression + 1") +
ylab("KS statistic")
# Fitting GAMs to each; two questions: (i) fraction deviance explained?
# (ii) what sample size do we need (for both treated and untreated) to have a "good" fit?
gam_out <- sceptre_debug |>
select(dataset,
ks_stat,
n_treatment_cells_with_expression,
n_control_cells_with_expression) |>
mutate(lg_ks_stat = log(ks_stat),
lg_n_treatment = log(n_treatment_cells_with_expression + 1),
lg_n_control = log(n_control_cells_with_expression + 1)) |>
group_by(dataset) |>
group_map(.f = function(tbl, key) {
fit_n_treatment <- gam(formula = lg_ks_stat ~ s(lg_n_treatment), data = tbl)
fit_n_control <- gam(formula = lg_ks_stat ~ s(lg_n_control), data = tbl)
fit_both <- gam(formula = lg_ks_stat ~ s(lg_n_treatment) + s(lg_n_control), data = tbl)
dev_explained_n_treatment <- summary(fit_n_treatment)$dev.expl
dev_explained_n_control <- summary(fit_n_control)$dev.expl
dev_explained_both <- summary(fit_both)$dev.expl
list(dataset = as.character(key$dataset),
dev_explained_n_treatment = dev_explained_n_treatment,
dev_explained_n_control = dev_explained_n_control,
dev_explained_both = dev_explained_both)
})
knitr::opts_chunk$set(echo = TRUE)
# load packages
devtools::load_all("~/research_code/sceptre2/")
devtools::load_all("~/research_code/lowmoi/")
library(mgcv)
library(tidyverse)
reverselog_trans <- function(base = exp(1)) {
trans <- function(x) -log(x, base)
inv <- function(x) base^(-x)
scales::trans_new(paste0("reverselog-", format(base)), trans, inv,
scales::log_breaks(base = base),
domain = c(1e-100, Inf))
}
# load results
sceptre_debug <- readRDS("/Users/timbarry/research_offsite/projects/sceptre2/results/undercover_grna_analysis/sceptre_debug.rds")
# define the categories
ks_stat_categories <- list(good = c(0, 1e-2),
adequate = c(1e-2, 5e-2),
subpar = c(5e-2, 0.1),
poor = c(0.1, 1))
# make some modifications to results
sceptre_debug <- sceptre_debug |>
mutate(p_gap = abs(p_value - p_value_emp),
p_rat = p_value_emp/p_value,
ks_fit = cut(x = ks_stat,
breaks = unique(unlist(ks_stat_categories)),
labels = names(ks_stat_categories))) |>
filter(dataset != "papalexi/eccite_screen/protein")
dev_explained <- data.frame(
dataset = sapply(gam_out, function(elem) elem[["dataset"]]),
dev_explained_n_treatment = sapply(gam_out, function(elem) elem[["dev_explained_n_treatment"]]),
dev_explained_n_control = sapply(gam_out, function(elem) elem[["dev_explained_n_control"]]),
dev_explained_both = sapply(gam_out, function(elem) elem[["dev_explained_both"]])) |>
mutate_at(c("dev_explained_n_treatment",
"dev_explained_n_control",
"dev_explained_both"), ~round(., 3))
dev_explained |> knitr::kable()
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "internal/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "internal/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
# load packages
library(tidyverse)
# load packages
library(tidyverse)
library(katlabutils)
.get_config_path("SCEPTRE2")
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
sceptre_offsite_dir <-
# load results
# 1. Fisher exact test negative control results
# 2. Fisher exact test positive control results
# 3. sample size data frame (number of cells per gRNA)
# 4. effective sample size data frame (number of cells with nonzero expression per gRNA)
# 1.
paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
result_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/")
head(result_dir)
result_dir
result_dir
result_dir
paste0(result_dir, "undercover_grna_analysis/")
# 1.
fisher_exact_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/fisher_exact_1.rds"))
fisher_exact_res
head(fisher_exact_res)
v
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results.rds"))
pc_res
nrow(pc_res)
head(pc_res)
pc_res |> group_by(dataset, method)
pc_res |> group_by(dataset, method) |> summarize(count - n())
pc_res |> group_by(dataset, method) |> summarize(count = dplyr::n())
pc_res |> group_by(dataset, method) |> summarize(count = dplyr::n()) |> print(n = 100)
fisher_exact_res <- readRDS(paste0(result_dir, "undercover_grna_analysis/fisher_exact_1.rds"))
pc_res <- readRDS(paste0(result_dir, "positive_control_analysis/pc_results.rds"))
pc_res
n_cells_per_grna_df <- readRDS(paste0(result_dir, "positive_control_analysis/n_cells_per_grna.rds"))
paste0(result_dir, "positive_control_analysis/n_cells_per_grna.rds")
n_cells_per_grna_df <- readRDS(paste0(result_dir, "dataset_sample_sizes/n_cells_per_grna.rds"))
n_cells_per_grna_df
head(n_cells_per_grna_df)
n_nonzero_cells_per_grna_df <- readRDS(paste0(result_dir, "n_nonzero_cells_per_grna.rds"))
result_dir
n_nonzero_cells_per_grna_df <- readRDS(paste0(result_dir, "dataset_sample_sizes/n_nonzero_cells_per_grna.rds"))
head(n_nonzero_cells_per_grna_df)
nrow(n_nonzero_cells_per_grna_df)
head(n_nonzero_cells_per_grna_df)
head(pc_res)
library(ondisc)
sceptre2_data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
sceptre2_sample_sizes_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "results/dataset_sample_sizes/")
if (!dir.exists(sceptre2_sample_sizes_dir)) dir.create(sceptre2_sample_sizes_dir)
papers <- c("frangieh", "liscovitch",  "papalexi", "schraivogel", "simulated")
paper
paper <- papers[1]
print(paste0("paper: ", paper))
paper_dir <- paste0(sceptre2_data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
print(paste0("paper: ", paper, " dataset: ", dataset))
paper_fp <- paste0(paper, "/", dataset)
mm_odm <- lowmoi::load_dataset_multimodal(paper_fp = paper_fp,
offsite_dir = .get_config_path("LOCAL_SCEPTRE2_DATA_DIR"))
modalities <- names(mm_odm@modalities)
remaining_modalities <- modalities[!(modalities %in% c("grna_assignment", "grna_expression"))]
grna_assign_modality <- get_modality(mm_odm, "grna_assignment")
# load the gRNA assignments
cellwise_grna_assignments <- grna_assign_modality |>
get_cell_covariates() |>
dplyr::pull(assigned_grna)
unique_grnas <- unique(cellwise_grna_assignments)
grna_tbl <- lapply(unique_grnas, function(grna) {
which(cellwise_grna_assignments == grna)
}) |> stats::setNames(nm = unique_grnas)
grna_tbl$`SLC26A2-3`
cellwise_grna_assignments
unique_grnas
grna_assign_modality
grna_assign_modality |> get_feature_covariates() |> head()
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 500)
grna_assign_modality |> get_feature_covariates() |> print()
grna_assign_modality |> get_feature_covariates() |> print(n = 700)
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 600)
grna_assign_modality |> get_feature_covariates()
grna_assign_modality |> get_feature_covariates() |> print(n = 600)
grna_assign_modality |> get_feature_covariates() |> View()
grna_target_df <- grna_assign_modality |> get_feature_covariates()
head(grna_target_df)
tail(grna_target_df)
head(grna_target_df)
yead(grna_target_df)
grna_target_df <- data.frame(grna_id = row.names(grna_target_df),
target = grna_target_df$target)
head(grna_target_df)
grna_target_df <- grna_assign_modality |>
get_feature_covariates()
grna_target_df <- data.frame(grna_id = row.names(grna_target_df),
target = grna_target_df$target)
head(grna_target_df)
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
head(grna_target_df)
factor(row.names(grna_target_df))
row.names(grna_target_df))
row.names(grna_target_df)
grna_target_df <- grna_assign_modality |> get_feature_covariates()
grna_target_df <- data.frame(grna_id = factor(row.names(grna_target_df)),
target = factor(grna_target_df$target))
head(grna_target_df)
head(grna_target_df)
grna_target_df$grna_id |> head()
grna_target_df$target |> head()
modality <- remaining_modalities[1]
modalities
modality
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
i <- 1
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
# loop through modalities
lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
seq(1, length(feature_ids))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
# lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
lapply(X = seq(1, 40), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
# lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
x
nrow(x)
x
head()
head(x)
head(grna_target_df)
grna_target_df |> head()
dplyr::left_join(x, grna_target_df, by = "grna_id")
grna_target_df
grna_target_df |> tail()
dplyr::left_join(x, grna_target_df, by = "grna_id")
# loop through modalities
x <- lapply(X = remaining_modalities, FUN = function(modality) {
print(paste0("Working on modality ", modality))
curr_modality <- get_modality(mm_odm, modality)
feature_ids <- get_feature_ids(curr_modality)
# loop through feature IDs; load the relevant feature
lapply(X = seq(1, length(feature_ids)), FUN = function(i) {
# lapply(X = seq(1, 4), FUN = function(i) {
feature_id <- feature_ids[i]
if (i %% 200 == 0) print(paste0("Working on ", feature_id, "."))
gene_exp <- curr_modality[[feature_id,]] |> as.numeric()
# loop through grnas, finding the number of nonzero cells for each grna
n_nonzero_cells <- sapply(grna_tbl, FUN = function(curr_grna_idx) {
gene_exp[curr_grna_idx] |> sum()
})
df <- data.frame(feature_id = feature_id,
grna_id = names(grna_tbl),
n_nonzero_cells = n_nonzero_cells)
rownames(df) <- NULL
return(df)
}) |> data.table::rbindlist() |>
dplyr::mutate(feature_id = factor(feature_id),
grna_id = factor(grna_id),
modality = factor(modality))
}) |> data.table::rbindlist() |>
dplyr::mutate(dataset = factor(dataset))
head(x)
dplyr::left_join(x, grna_target_df, by = "grna_id")
x <- dplyr::left_join(x, grna_target_df, by = "grna_id")
head(x)
head(x, 100)
