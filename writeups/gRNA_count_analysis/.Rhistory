sum_tab <- do.call(what = cbind, lapply(res_list, function(item) item$summary_stats)) |> t()
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
get_summary_stats <- function(gRNA_assignment_vect, plot_col = "blue", plot_name, max_val) {
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
to_plot_df <- data.frame(count = as.integer(tab),
gRNA_id = names(tab)) |>
dplyr::mutate(gRNA_id = factor(gRNA_id, gRNA_id, gRNA_id))
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + ylim(0, max_val)
return(list(plot = p, summary_stats = summary_stats))
}
perform_count_analysis <- function(gRNA_assignments, gRNA_metadata) {
max_val <- max(table(gRNA_assignments)) + 10
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
# apply the analysis function to each element of the assignment list
res_list <- lapply(X = names(col_choices), FUN = function(gRNA_type) {
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
}) |> purrr::set_names(names(col_choices))
# create the plot
p_all <- cowplot::plot_grid(plotlist = lapply(res_list, function(item) item$plot),
labels = c("a", "b", "c"))
# create the table
sum_tab <- do.call(what = cbind, lapply(res_list, function(item) item$summary_stats)) |> t()
# return the table and plot
list(p_all, sum_tab)
}
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
analysis_result
analysis_result[[1]]
analysis_result[[2]]
analysis_result[[1]]
paper
papers
paper <- "liscovitch"
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
datasets
dataset <- datasets[1]
gRNA_odm <- lowmoi::load_dataset_modality(data_fp = paste0(paper, "/", dataset, "/grna_assignment"))
gRNA_mat <- gRNA_odm |> lowmoi::load_whole_odm()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_metadata <- gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::select(target, target_type)
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
analysis_result[[1]]
analysis_result[[2]]
analysis_result[[1]]
analysis_result[[1]]
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(data_dir)
paper
paper <- papers[1]
paper
dataset
dataset <- datasets[1]
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
dataset <- datasets[1]
dataset
gRNA_odm <- lowmoi::load_dataset_modality(data_fp = paste0(paper, "/", dataset, "/grna_assignment"))
gRNA_mat <- gRNA_odm |> lowmoi::load_whole_odm()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_metadata <- gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::select(target, target_type)
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
get_summary_stats <- function(gRNA_assignment_vect, plot_col = "blue", plot_name, max_val) {
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
to_plot_df <- data.frame(count = as.integer(tab),
gRNA_id = names(tab)) |>
dplyr::mutate(gRNA_id = factor(gRNA_id, gRNA_id, gRNA_id))
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + ylim(0, max_val)
return(list(plot = p, summary_stats = summary_stats))
}
perform_count_analysis <- function(gRNA_assignments, gRNA_metadata) {
max_val <- max(table(gRNA_assignments)) + 10
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
# apply the analysis function to each element of the assignment list
res_list <- lapply(X = names(col_choices), FUN = function(gRNA_type) {
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
}) |> purrr::set_names(names(col_choices))
# create the plot
p_all <- cowplot::plot_grid(plotlist = lapply(res_list, function(item) item$plot),
labels = c("a", "b", "c"))
# create the table
sum_tab <- do.call(what = cbind, lapply(res_list, function(item) item$summary_stats)) |> t()
# return the table and plot
list(p_all, sum_tab)
}
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
analysis_result[[1]]
analysis_result[[2]]
print(analysis_result[[2]])
plot(analysis_result[[1]])
print(analysis_result[[2]])
cat("\n\n\n\n\n\n")
plot.new()
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(data_dir)
data_dir
papers
get_summary_stats <- function(gRNA_assignment_vect, plot_col = "blue", plot_name, max_val) {
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
to_plot_df <- data.frame(count = as.integer(tab),
gRNA_id = names(tab)) |>
dplyr::mutate(gRNA_id = factor(gRNA_id, gRNA_id, gRNA_id))
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans='log2', limits = c(0, max_val))
return(list(plot = p, summary_stats = summary_stats))
}
perform_count_analysis <- function(gRNA_assignments, gRNA_metadata) {
max_val <- max(table(gRNA_assignments)) + 10
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
# apply the analysis function to each element of the assignment list
res_list <- lapply(X = names(col_choices), FUN = function(gRNA_type) {
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
}) |> purrr::set_names(names(col_choices))
# create the plot
p_all <- cowplot::plot_grid(plotlist = lapply(res_list, function(item) item$plot),
labels = c("a", "b", "c"))
# create the table
sum_tab <- do.call(what = cbind, lapply(res_list, function(item) item$summary_stats)) |> t()
# return the table and plot
list(p_all, sum_tab)
}
papers
paper <- papers[1]
paper
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
datasets
dataset
dataset <- datasets[1]
dataset
gRNA_odm <- lowmoi::load_dataset_modality(data_fp = paste0(paper, "/", dataset, "/grna_assignment"))
gRNA_mat <- gRNA_odm |> lowmoi::load_whole_odm()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_metadata <- gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::select(target, target_type)
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
print(paste0("Paper: ", paper, ", Dataset: ", dataset))
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
gRNA_assignments; gRNA_metadata
max_val <- max(table(gRNA_assignments)) + 10
max_val
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
# apply the analysis function to each element of the assignment list
res_list <- lapply(X = names(col_choices), FUN = function(gRNA_type) {
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
}) |> purrr::set_names(names(col_choices))
# create the plot
p_all <- cowplot::plot_grid(plotlist = lapply(res_list, function(item) item$plot),
labels = c("a", "b", "c"))
lapply(res_list, function(item) item$plot)
res_list
res_list
res_list |> length()
res_list$targeting
get_summary_stats
gRNA_assignment_vect <- assignment_list[[gRNA_type]]; plot_col = "blue"; plot_name <- stringr::str_to_title(gRNA_type); max_val <- max_val
gRNA_type <- "nontargeting"
gRNA_assignment_vect <- assignment_list[[gRNA_type]]; plot_col = "blue"; plot_name <- stringr::str_to_title(gRNA_type); max_val <- max_val
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
to_plot_df <- data.frame(count = as.integer(tab),
gRNA_id = names(tab)) |>
dplyr::mutate(gRNA_id = factor(gRNA_id, gRNA_id, gRNA_id))
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans='log2', limits = c(0, max_val))
p
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans='log2')
p
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans='log10')
p
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) +  ylim(c(0, max_val)) + scale_y_continuous(trans='log2')
p
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans='log2', limits = c(0, max_val))
p
max_val
0
?scale_y_continuous
max_val
class(max_val)
class(0)
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans = 'log2', limits = as.numeric(c(0, max_val)))
p
c(0, max_val)
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) # + scale_y_continuous(trans = 'log2', limits = c(0, max_val))
p
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans = 'log2', limits = c(0, max_val))
p
log2(!0)
log2(10)
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans = 'log2', limits = c(1, max_val))
p
?plot.new
args <- c("~/simulatr_dir/sim_spec_obj.rds", "NA", "5")
args
simulatr_spec <- readRDS(args[1])
meta_params_fp <- args[2]
B_in <- as.integer(args[3])
simulatr_spec
b_in
B_in
simulatr::get_params_for_nextflow(simulatr_spec, meta_params_fp, B_in)
simulatr::get_params_for_nextflow
simulatr::get_params_for_nextflow
simulatr_spec
B_in
# Basic quantities
method_names <- names(simulatr_spec@run_method_functions)
method_names
n_processors <- get_param_from_simulatr_spec(simulatr_spec, NULL, "n_processors")
n_processors
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
data_dir <- paste0(.get_config_path("LOCAL_SCEPTRE2_DATA_DIR"), "data/")
papers <- list.files(data_dir)
papres
papers
paper
paper <- papers[1]
paper_dir <- paste0(data_dir, paper, "/")
datasets <- list.files(paper_dir)
datasets
dataset <- datasets[1]
dataset
paper_dir
gRNA_odm <- lowmoi::load_dataset_modality(data_fp = paste0(paper, "/", dataset, "/grna_assignment"))
gRNA_mat <- gRNA_odm |> lowmoi::load_whole_odm()
gRNA_assignments <- apply(X = gRNA_mat, MARGIN = 2, FUN = function(col) names(which.max(col))) |>
unname()
gRNA_metadata <- gRNA_odm |>
ondisc::get_feature_covariates() |>
dplyr::select(target, target_type)
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
cat(paste0("Paper: ", paper, ", Dataset: ", dataset))
get_summary_stats <- function(gRNA_assignment_vect, plot_col = "blue", plot_name, max_val) {
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
summary_stats <- c(n_gRNAs = n_gRNAs,
min_count = min_count,
max_count = max_count,
median_count = median_count,
mean_count = mean_count)
to_plot_df <- data.frame(count = as.integer(tab),
gRNA_id = names(tab)) |>
dplyr::mutate(gRNA_id = factor(gRNA_id, gRNA_id, gRNA_id))
p <- ggplot(data = to_plot_df, mapping = aes(x = gRNA_id, y = count)) +
geom_bar(stat = "identity", fill = plot_col) + theme_bw() + xlab("") + ylab("Cells/gRNA") +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank(), panel.grid.major.x = element_blank()) +
ggtitle(plot_name) + scale_y_continuous(trans = 'log2', limits = c(1, max_val))
return(list(plot = p, summary_stats = summary_stats))
}
perform_count_analysis <- function(gRNA_assignments, gRNA_metadata) {
max_val <- max(table(gRNA_assignments))
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
# apply the analysis function to each element of the assignment list
res_list <- lapply(X = names(col_choices), FUN = function(gRNA_type) {
get_summary_stats(assignment_list[[gRNA_type]],
col_choices[gRNA_type],
stringr::str_to_title(gRNA_type),
max_val)
}) |> purrr::set_names(names(col_choices))
# create the plot
p_all <- cowplot::plot_grid(plotlist = lapply(res_list, function(item) item$plot),
labels = c("a", "b", "c"))
# create the table
sum_tab <- do.call(what = cbind, lapply(res_list, function(item) item$summary_stats)) |> t()
# return the table and plot
list(p_all, sum_tab)
}
analysis_result <- perform_count_analysis(gRNA_assignments, gRNA_metadata)
analysis_result
analysis_result[[2]]["targeting", mean_count]
analysis_result[[2]]["targeting", "mean_count"]
analysis_result[[2]]["targeting", "mean_count"] / analysis_result[[2]]["nontargeting", "mean_count"]
analysis_result[[2]]["targeting", "mean_count"] / analysis_result[[2]]["nontargeting", "mean_count"] * 100
analysis_result[[2]]["targeting", "mean_count"] / analysis_result[[2]]["nontargeting", "mean_count"]
ratio <- analysis_result[[2]]["targeting", "mean_count"] / analysis_result[[2]]["nontargeting", "mean_count"]
ratio
print(paste0("Ratio of cells/gRNA of targeting gRNAs to non-targeting gRNAs: ", ratio))
print(paste0("Ratio of cells/gRNA of targeting gRNAs to non-targeting gRNAs: ", round(ratio, 2)))
gRNA_assignments
gRNA_metadata
max_val <- max(table(gRNA_assignments))
# get vectors of targeting and non-targeting gRNAs, as well as combined vector
nontargeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type == "non-targeting") |>
row.names()
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
nontargeting_gRNAs
targeting_gRNAs <- gRNA_metadata |>
dplyr::filter(target_type != "non-targeting") |>
row.names()
gRNA_assignments_targeting <- gRNA_assignments[gRNA_assignments %in% targeting_gRNAs]
gRNA_assignments_nontargeting <- gRNA_assignments[gRNA_assignments %in% nontargeting_gRNAs]
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
gRNA_assignments_targeting
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
get_summary_stats
gRNA_assignment_vect
col_choices
names(col_choices)
gRNA_type <- col_choices[1]
gRNA_type
assignment_list[[gRNA_type]]
assignment_list
assignment_list <- list(targeting = gRNA_assignments_targeting,
nontargeting = gRNA_assignments_nontargeting,
combined = gRNA_assignments)
col_choices <- c(targeting = "firebrick4", nontargeting = "dodgerblue4", combined = "darkorchid4")
col_choices
col_choices <- gRNA_type[1]
col_choices
gRNA_type <- "targeting"
gRNA_type
assignment_list[[gRNA_type]]
col_choices[gRNA_type]
assignment_list[[gRNA_type]]
col_choices[gRNA_type]
gRNA_assignment_vect <- assignment_list[[gRNA_type]]
plot_col <- col_choices[gRNA_type]
plot_name <- stringr::str_to_title(gRNA_type)
max_val <- max_val
tab <- table(gRNA_assignment_vect) |> sort(decreasing = TRUE)
n_gRNAs <- length(tab)
min_count <- min(tab)
max_count <- max(tab)
median_count <- median(tab)
mean_count <- mean(tab)
min_count
max_count
tab
sd(tab)
