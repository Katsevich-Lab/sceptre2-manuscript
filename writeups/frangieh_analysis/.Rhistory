load_all()
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
LOCAL_SCEPTRE2_DATA_DIR
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
?sceptre3::run_sceptre_lowmoi
load_all()
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_expression/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
mm_odm
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
mm_odm
x <- mm_odm |> ondisc::get_modality("grna_assignment")
x
grna_mat <- x[[seq(1, nrow(x)),]]
grna_mat
class(grna_mat)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
head(covariate_data_frame)
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
head(grna_group_data_frame)
mm_odm@global_misc$formula
# set formulas, grna group target name
gene_formula <- mm_odm@global_misc$formula
gene_formula
mm_odm@global_cell_covariates |> head()
response_matrix[1:5,1:6]
grna_matrix[1:5,1:6]
head(covariate_data_frame)
head(grna_group_data_frame)
gene_formula
nrow(response_matrix)
head(grna_group_data_frame)
grna_group_data_frame |>
dplyr::filter(grna_group == "non-targeting")
n_ntc <- grna_group_data_frame |>
dplyr::filter(grna_group == "non-targeting") |>
nrow()
n_nt
n_nt c
n_ntc
n_ntc * nrow(response_matrix)
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs =  20000) # n_ntc * nrow(response_matrix))
head(undercover_result)
nrow(undercover_result)
hist(undercover_result$p_value)
sceptre3:::plot_calibration_results(undercover_result)
undercover_result |> head()
undercover_result |> dplyr::filter(round == 2)
undercover_result |> dplyr::filter(round == 3)
mm_odm@global_misc$formula
nrow(undercover_result)
mm_odm@global_misc$formula
formula
# set formulas, grna group target name
gene_formula <- formula(~log(gene_n_umis) + log(gene_n_nonzero) + phase) #  mm_odm@global_misc$formula
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
calibration_check = TRUE,
response_grna_group_pairs = NULL,
test_stat = "full",
return_resampling_dist = FALSE,
fit_skew_normal = TRUE,
B1 = 500,
B2 = 5000,
B3 = 25000,
undercover_group_size = 1,
n_calibration_pairs =  20000) # n_ntc * nrow(response_matrix))
load_all("~/research_code/sceptre2-manuscript/")
load_all("~/research_code/sceptre3/")
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/writeup_results/calibration_check")
if (!dir.exists(result_dir)) dir.create(result_dir, recursive = TRUE)
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
ifn_gamma_dir
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
n_ntc <- grna_group_data_frame |>
dplyr::filter(grna_group == "non-targeting") |>
nrow()
# set formulas, grna group target name
gene_formula <- mm_odm@global_misc$formula
"full"
return_resampling_dist = FALSE; fit_skew_normal = TRUE;
undercover_group_size = NULL; n_calibration_pairs = NULL;
B1 = 499L; B2 = 4999L; B3 = 24999L;
n_nonzero_trt = 7L; n_nonzero_cntrl = 7L
###############
# PART 1: SETUP
###############
cat("Running setup. ")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
calibration_check <- TRUE
dim(response_matrix)
gc()
###############
# PART 1: SETUP
###############
cat("Running setup. ")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
formula_object
response_matrix[1:5,1:5]
grna_matrix[1:5,1:5]
head(covariate_data_frame)
grna_group_data_frame |> head()
formula_object
calibration_check
response_grna_group_pairs
dim(response_matrix)
undercover_group_size
n_calibration_pairs
B1
B2
B3
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
# set formulas, grna group target name
gene_formula <- mm_odm@global_misc$formula
formula_object = gene_formula,
formula_object = gene_formula
###############
# PART 1: SETUP
###############
cat("Running setup. ")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
calibration_check = TRUE
response_grna_group_pairs = NULL
test_stat = "full"
return_resampling_dist = FALSE
fit_skew_normal = TRUE
B1 = 500
B2 = 5000
B3 = 25000
undercover_group_size = 1
n_calibration_pairs =  n_ntc * nrow(response_matrix)
###############
# PART 1: SETUP
###############
cat("Running setup. ")
# 1. check function input arguments
check_inputs(response_matrix, grna_matrix, covariate_data_frame, grna_group_data_frame,
formula_object, calibration_check, response_grna_group_pairs, test_stat) |> invisible()
# 2. harmonize arguments (called for side-effect)
harmonize_arguments(return_resampling_dist, fit_skew_normal, test_stat) |> invisible()
# 3. cast and transpose response matrix; cast grna matrix
response_matrix <- cast_and_transpose_matrix(matrix_in = response_matrix, transpose = TRUE)
gc()
grna_matrix <- cast_and_transpose_matrix(matrix_in = grna_matrix, transpose = FALSE)
# 4. convert the cell covariate data frame into a design matrix
covariate_matrix <- convert_covariate_df_to_design_matrix(covariate_data_frame, formula_object)
rm(covariate_data_frame)
# 5. assign the gRNAs to cells
grna_assignments <- assign_grnas_to_cells_lowmoi(grna_matrix, grna_group_data_frame, calibration_check)
rm(grna_matrix); gc() |> invisible()
cat(crayon::green(' \u2713\n'))
calibration_check
calibration_check
cat("Constructing negative control pairs.")
is.null(undercover_group_size)
if (is.null(undercover_group_size)) undercover_group_size <- compute_undercover_group_size(grna_group_data_frame)
undercover_group_size
response_grna_group_pairs <- construct_negative_control_pairs(n_calibration_pairs, undercover_group_size, grna_assignments, response_matrix, n_nonzero_trt, n_nonzero_cntrl, grna_group_data_frame, response_grna_group_pairs)
gc()
response_matrix[1:5,1:5]
n_calibration_pairs
undercover_group_size
grna_assignments
9
response_matrix
response_matrix[1:5,1:5]
10
n_nonzero_trt
n_nonzero_cntrl
grna_group_data_frame
response_grna_group_pairs
is.null(n_calibration_pairs)
# 1. set the number of calibration pairs
if (is.null(n_calibration_pairs)) { # do QC
n_calibration_pairs <- nrow(response_grna_group_pairs)
}
# 2. set a few variables
N_POSSIBLE_GROUPS_THRESHOLD <- 20000
nt_idxs <- grna_assignments[["non-targeting"]]
nt_grna_names <- names(grna_assignments)[names(grna_assignments) != "non-targeting"]
n_nt_grnas <- length(nt_grna_names)
# 3. construct the NT n nonzero matrix M
n_nonzero_m <- construct_nt_nonzero_matrix(response_matrix, nt_grna_names, grna_assignments, nt_idxs)
gc()
dim(n_nonzero_m)
head(n_nonzero_m)
19
n_nonzero_m[1:6,1:7]
n_nonzero_m[1:50, 1:7]
load_all()
dim(response_matrix)
construct_nt_nonzero_matrix <- function(response_matrix, nt_grna_names, grna_assignments, nt_idxs) {
apply(X = response_matrix, MARGIN = 2, FUN = function(col) {
col_nt <- col[nt_idxs]
sapply(X = nt_grna_names, FUN = function(nt_grna_name) {
sum(col_nt[grna_assignments[[nt_grna_name]]] >= 1)
})
})
}
dim(construct_nt_nonzero_matrix)
dim(response_matrix)
nt_grna_names
grna_assignments$`ONE-NON-GENE-SITE-670`
nt_idxs
# 3. construct the NT n nonzero matrix M
n_nonzero_m <- construct_nt_nonzero_matrix(response_matrix, nt_grna_names, grna_assignments, nt_idxs)
pryr::object_size(n_nonzero_m)
gc()
response_matrix[,1]
response_matrix[,1] |> system.time()
response_matrix[,1] |> system.time()
response_matrix[,1] |> system.time()
response_matrix[1,] |> system.time()
response_matrix[,1] |> system.time()
response_matrix[,2] |> system.time()
response_matrix[,3] |> system.time()
x <- response_matrix[,3]
x <- response_matrix[,5]
x <- response_matrix[,10]
resposne_matrix[,1]
class(response_matrix)
dim(response_matrix)
response_matrix[,10]
x <- response_matrix[,10]
system.time(x <- response_matrix[,10])
x <- response_matrix[,100]
head(x)
9
10
99
x <- response_matrix[,100]
length(x)
head(x)
tail(x)
length(x)
ncol(response_matrix)
system.time(x[,1])
system.time(response_matrix[,1])
0.208 * 14654
3048.032/60
response_matrix[,1] |> head()
x <- response_matrix[,1]
x <- response_matrix[,10]
nrow(x)
length(x)
m <- as.matrix(response_matrix)
m[,1] |> head()
m[,2] |> head()
m[,3] |> head()
system.time(m[,3])
response_matrix[,1] |> head()
system.time(response_matrix[,1])
response_matrix
response_matrix[,1] |> system.time()
rm(m)
gc()
response_matrix[1:5,1:5]
response_matrix[,1:5]
response_matrix[,1:5]  |> system.time()
response_matrix[,1]  |> system.time()
response_matrix[,1:100]  |> system.time()
response_matrix[,1:1000]  |> system.time()
response_matrix[,10]  |> system.time()
response_matrix[,11]  |> system.time()
response_matrix[,1:10]  |> system.time()
m <- response_matrix[,1:10]
class(m)
m[,1]
m[,1] |> system.time()
m[,1] |> system.time()
m[,2] |> system.time()
m[,3] |> system.time()
response_matrix[,1] |> system.time()
response_matrix[,1] |> system.time()
x <- response_matrix[,1:100]
x <- response_matrix[,1:1000]
system.time(x <- response_matrix[,1:1000])
system.time(x[,1])
system.time(x[,2])
system.time(x[,3])
load_all()
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/writeup_results/calibration_check")
if (!dir.exists(result_dir)) dir.create(result_dir, recursive = TRUE)
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- gene_odm[[seq(1, nrow(gene_odm)),]]
rownames(response_matrix) <- ondisc::get_feature_ids(gene_odm)
# get the in-memory grna matrix
grna_odm <- mm_odm |> ondisc::get_modality("grna_assignment")
grna_matrix <- grna_odm[[seq(1, nrow(grna_odm)),]]
rownames(grna_matrix) <- ondisc::get_feature_ids(grna_odm)
gc()
# covariate matrix
covariate_data_frame <- mm_odm |> ondisc::get_cell_covariates()
# grna group data frame
grna_group_data_frame <- data.frame(grna_id = rownames(grna_odm@feature_covariates),
grna_group = grna_odm@feature_covariates$target)
n_ntc <- grna_group_data_frame |>
dplyr::filter(grna_group == "non-targeting") |>
nrow()
# set formulas, grna group target name
gene_formula <- mm_odm@global_misc$formula
response_grna_group_pairs <- data.frame(grna_group = sample(x = factor(grna_group_data_frame$grna_group[grna_group_data_frame$grna_group != "non-targeting"]), size = 30000, replace = TRUE),
response_id = sample(x = factor(rownames(response_matrix)), size = 30000, replace = TRUE)) |>
dplyr::filter(grna_group != "non-targeting") |>
dplyr::distinct()
response_grna_group_pairs
nrow(response_grna_group_pairs)
gc()
undercover_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = TRUE)
head(undercover_result)
tail(undercover_result)
head(undercover_result)
plot_calibration_result(undercover_result)
library(sceptre3)
plot_calibration_result(undercover_result)
nrow(undercover_result)
nrow(response_grna_group_pairs)
discovery_result <- sceptre3::run_sceptre_lowmoi(response_matrix = response_matrix,
grna_matrix = grna_matrix,
covariate_data_frame = covariate_data_frame,
grna_group_data_frame = grna_group_data_frame,
formula_object = gene_formula,
response_grna_group_pairs = response_grna_group_pairs,
calibration_check = FALSE)
head(discovery_result)
discovery_result$grna_group |> unique()
compare_calibration_and_discovery_results(calibration_result = calibration_result, discovery_result = discovery_result)
compare_calibration_and_discovery_results(calibration_result = undercover_result, discovery_result = discovery_result)
obtain_discovery_set(discovery_result)
obtain_discovery_set(discovery_result) |> nrow()
obtain_discovery_set(discovery_result)
19
9
tail(discovery_result)
discovery_result_pass_qc <- discovery_result |> na.omit()
nrow(discovery_result_pass_qc)
nrow(undercover_result)
discovery_result_pass_qc
discovery_result_pass_qc$n_nonzero_trt |> min()
discovery_result_pass_qc$n_nonzero_cntrl |> min()
calibration_result <- undercover_result
calibration_result$n_nonzero_trt |> min()
calibration_result$n_nonzero_cntrl |> min()
make_volcano_plot(discovery_result)
head(discovery_result)
calibration_result |> head()
calibration_result$p_value |> hist()
plot_calibration_result(calibration_result)
is.na(calibration_result$p_value)
is.na(calibration_result$p_value)
is.na(discovery_result$p_value)
discovery_result_fail_qc <- discovery_result[is.na(discovery_result$p_value),]
discovery_result_fail_qc
nrow(discovery_result_fail_qc)
discovery_result_fail_qc$n_nonzero_trt |> max()
head(discovery_result)
tail(discovery_result)
head(discovery_result)
# This script uses sceptre3 to run an approximate undercover analysis on the
LOCAL_SCEPTRE2_DATA_DIR <-.get_config_path("LOCAL_SCEPTRE2_DATA_DIR")
result_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "results/writeup_results/calibration_check")
if (!dir.exists(result_dir)) dir.create(result_dir, recursive = TRUE)
ifn_gamma_dir <- paste0(LOCAL_SCEPTRE2_DATA_DIR, "data/frangieh/ifn_gamma/")
# gene info
gene_odm_fp <- paste0(ifn_gamma_dir, "gene/matrix.odm")
# grna info
grna_odm_fp <- paste0(ifn_gamma_dir, "grna_assignment/matrix.odm")
# mm odm metadata fp
mm_metadata_fp <- paste0(ifn_gamma_dir, "multimodal_metadata.rds")
# construct mm odm
mm_odm <- ondisc::read_multimodal_odm(odm_fps = c(gene_odm_fp, grna_odm_fp),
multimodal_metadata_fp = mm_metadata_fp)
# get the in-memory gene matrix
gene_odm <- mm_odm |> ondisc::get_modality("gene")
response_matrix <- lowmoi::load_whole_odm(odm = gene_odm, csc_format = FALSE)
gc()
dim(response_matrix)
saveRDS(object = response_matrix, file = "~/Desktop/response_matrix.rds")
gc()
